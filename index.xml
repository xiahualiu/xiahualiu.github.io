<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type="text/xsl" href="https://xiahualiu.github.io/xml/base.min.xml" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xiahua</title>
    <link>https://xiahualiu.github.io/</link>
    <description>Recent content on Xiahua</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Dec 2019 15:02:54 -0500</lastBuildDate>
    <atom:link href="https://xiahualiu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello World</title>
      <link>https://xiahualiu.github.io/posts/hello-world/</link>
      <pubDate>Sat, 21 Dec 2019 15:02:54 -0500</pubDate>
      <guid>https://xiahualiu.github.io/posts/hello-world/</guid>
      <description>&lt;p&gt;This is the test post for hugo.&lt;/p&gt;
&lt;p&gt;Equation:&lt;/p&gt;
&lt;p&gt;$$ x=a^2+b^2 $$&lt;/p&gt;
&lt;p&gt;Chinese test:&lt;/p&gt;
&lt;p&gt;先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。&lt;/p&gt;</description>
    </item>
    <item>
      <title>S32K144EVB的学习历程（三）</title>
      <link>https://xiahualiu.github.io/posts/2017-10-02-s32k144_3/</link>
      <pubDate>Mon, 02 Oct 2017 21:10:30 +0000</pubDate>
      <guid>https://xiahualiu.github.io/posts/2017-10-02-s32k144_3/</guid>
      <description>&lt;p&gt;让我们继续上一节的内容&lt;/p&gt;
&lt;h3 id=&#34;fast-irc-control-status-register-scg-firccsr&#34;&gt;Fast IRC Control Status Register (SCG_FIRCCSR)&lt;/h3&gt;
&lt;p&gt;这个寄存器展示并且控制 FIRC 的工作状态&lt;/p&gt;
&lt;h3 id=&#34;fast-irc-divide-register-scg-fircdiv&#34;&gt;Fast IRC Divide Register (SCG_FIRCDIV)&lt;/h3&gt;
&lt;p&gt;这个寄存器控制 FIRC 的分频器的值&lt;/p&gt;
&lt;h3 id=&#34;fast-irc-configuration-register-scg-firccfg&#34;&gt;Fast IRC Configuration Register (SCG_FIRCCFG)&lt;/h3&gt;
&lt;p&gt;这个寄存器控制 FIRC 的基础设置，不能在 FIRC 开启的时候修改&lt;/p&gt;
&lt;h3 id=&#34;system-pll-control-status-register-scg-spllcsr&#34;&gt;System PLL Control Status Register (SCG_SPLLCSR)&lt;/h3&gt;
&lt;h3 id=&#34;system-pll-divide-register-scg-splldiv&#34;&gt;System PLL Divide Register (SCG_SPLLDIV)&lt;/h3&gt;
&lt;h3 id=&#34;system-pll-configuration-register-scg-spllcfg&#34;&gt;System PLL Configuration Register (SCG_SPLLCFG)&lt;/h3&gt;
&lt;p&gt;以上的几个寄存器基本设置都类似，但是具体到写程序的时候，一定要对照寄存器的表来写，因为他们之间都有一些不同&lt;/p&gt;
&lt;h2 id=&#34;-scg-&#34;&gt;不同工作模式中 SCG 的工作流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;启动的时候，’Reset’ 会直接传递给 Run 模式下的 FIRC，Run 模式下 FIRC，SOSC，SPLL，SIRC 共同工作，可以互相传递时钟&lt;/li&gt;
&lt;li&gt;启动完成后，如果单片机进入 &lt;strong&gt;High Speed Mode&lt;/strong&gt; 则会直接将 FIRC 时钟和 SPLL 相互传递&lt;/li&gt;
&lt;li&gt;启动完成后，如果单片机进入 &lt;strong&gt;Very Slow Power Mode&lt;/strong&gt; 则只启用 SIRC 时钟。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;heading&#34;&gt;查看代码对应的时钟寄存器&lt;/h1&gt;
&lt;h4 id=&#34;void-sosc-init-8mhzvoid-&#34;&gt;&lt;code&gt;void SOSC_init_8MHz(void)&lt;/code&gt; :&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SCG-&amp;gt;SOSCDIV=0x00000101;&lt;/code&gt; 设置对应的两路 DIV&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SCG-&amp;gt;SOSCCFG=0x00000024;&lt;/code&gt; 设置SOSC的硬件属性，晶振频率选择，可以看出来 1MHz ~ 8Mhz 是中频的范围，这个值在 Reference Manual 中并未给出。HGO 中高增益意味着高功率，在这里我们不需要高增益。&lt;/li&gt;
&lt;li&gt;循环，等 &lt;code&gt;SOSCCSR&lt;/code&gt; 状态寄存器解锁&lt;/li&gt;
&lt;li&gt;设置 &lt;code&gt;SOSCCSR&lt;/code&gt;  状态寄存器，这里什么都没有开启，只给了使能。&lt;/li&gt;
&lt;li&gt;循环，等待 &lt;code&gt;SOSCCSR&lt;/code&gt; 有效&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，这个函数应该在启用 &lt;strong&gt;锁相环&lt;/strong&gt; 前设定完成，而且要保证使能步骤在函数内部的最后一步完成。&lt;/p&gt;
&lt;h4 id=&#34;void-spll-init-160mhzvoid-&#34;&gt;&lt;code&gt;void SPLL_init_160MHz(void)&lt;/code&gt; :&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;循环，等 &lt;code&gt;SPLLCSR&lt;/code&gt; 状态寄存器解锁&lt;/li&gt;
&lt;li&gt;设置 &lt;code&gt;SPLLCSR&lt;/code&gt; 先关闭锁相环，&lt;code&gt;SPLLDIV&lt;/code&gt; 设置两路 DIV，&lt;code&gt;SPLLCFG&lt;/code&gt; 设置 MULT 和 PREDIV 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;img/2017-10-02-S32K144_3/SPLLCalculation.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;循环，等待 &lt;code&gt;SPLLCSR&lt;/code&gt; 状态寄存器 解锁&lt;/li&gt;
&lt;li&gt;使能&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;void-normalrunmode-80mhz-void-&#34;&gt;&lt;code&gt;void NormalRUNmode_80MHz (void)&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;这个其实就是设置 SCG_RCCR 的值，这个值在 RUN 模式下是用于设定一些分频器（&lt;code&gt;DIVSLOW&lt;/code&gt; &lt;code&gt;DIVBUS&lt;/code&gt; &lt;code&gt;DIVCORE&lt;/code&gt;） 和选择时钟源（&lt;code&gt;SCS&lt;/code&gt;）的。&lt;/p&gt;
&lt;h1 id=&#34;lpit&#34;&gt;低功率中断计时器（LPIT）设置&lt;/h1&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;S32K144中有一个 LPIT 模块 &lt;code&gt;LPIT0&lt;/code&gt; 和四个通道，低泄露模式和等待模式不被该芯片支持，修改 LPIT 在其功能时钟在关闭的时候会导致赋值错误。&lt;/li&gt;
&lt;li&gt;LPIT 每个通道会给 DMAMUX 周期性触发&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;LPIT 被设计为捕捉脉冲在其输入引脚，并不需要和其时钟频率有关，但是为了保证可靠性，连续的触发操作应该至少间隔 10 个 LPIT 总线时钟周期。&lt;/p&gt;
&lt;h3 id=&#34;tval-&#34;&gt;TVAL 是初值寄存器：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在 LPIT 比较模式中&lt;/strong&gt;：其中储存的值会逐渐减少到 0，之后会产生中断并且将初值恢复，写入一个新的值不会立刻修改初值，必须要到当前的值到零重装才能生效，如果想要立即生效请在 TCRTL 寄存器中关闭该模块再重新打开。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在 LPIT 捕捉模式中&lt;/strong&gt;：其中储存的值是计数值的相反值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tctrl-&#34;&gt;TCTRL 是控制寄存器：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;工作模式有：
&lt;ul&gt;
&lt;li&gt;32-bit 周期计数&lt;/li&gt;
&lt;li&gt;双 16-bit 周期计数&lt;/li&gt;
&lt;li&gt;32-bit 触发积累&lt;/li&gt;
&lt;li&gt;32-bit 输入捕捉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TSOT（Timer Start On Trigger），TROT（Timer Reset On Trigger） 和 TSOI（Timer Stop On Interrupt） ，CHAIN 设置请参考 Reference Manual，不难，根据名字就可以理解。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lpit-&#34;&gt;LPIT 使用的步骤：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;PCC 选择 LPIT 的时钟源，然后使用 &lt;code&gt;PCC_PCCn_CGC_MASK&lt;/code&gt; 取或打开 LPIT 。&lt;/li&gt;
&lt;li&gt;首先使用 LPIT0 指针赋值 MCR 寄存器，默认赋值 &lt;code&gt;0x00000001&lt;/code&gt; 即可，仅仅打开 &lt;code&gt;M_CEN&lt;/code&gt; 开关，此开关未打开前后续的寄存器处于锁定状态，赋值以及读取均会报错。&lt;/li&gt;
&lt;li&gt;LPIT0 指针赋值 &lt;code&gt;TMR[n].TVAL&lt;/code&gt; 和 &lt;code&gt;TMR[n].TCTRL&lt;/code&gt;, TVAL 控制 timeout 周期，TCTRL 控制开启对应的通道。并且确定工作模式。&lt;/li&gt;
&lt;li&gt;检测 MSR 寄存器中的 TIFn 是否产生 flag（1）。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title>S32K144EVB的学习历程（二）</title>
      <link>https://xiahualiu.github.io/posts/2017-9-29-s32k144_2/</link>
      <pubDate>Fri, 29 Sep 2017 00:30:30 +0000</pubDate>
      <guid>https://xiahualiu.github.io/posts/2017-9-29-s32k144_2/</guid>
      <description>&lt;h1 id=&#34;heading&#34;&gt;本文简介&lt;/h1&gt;
&lt;p&gt;本文主要详细叙述了 S32K144 的时钟模块相关内容。本文代码包含以下内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一般的时钟初始化流程&lt;/li&gt;
&lt;li&gt;LPIT 通道计数器设置&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;时钟结构图&lt;/h1&gt;
&lt;p&gt;在看代码之前，首先要熟悉时钟系统，下图为本程序所用到的时钟和模块示意图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiahualiu.github.io/img/2017-9-29-S32K144_2/hello_clock.png&#34; alt=&#34;hello_clock.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到外部晶振输入 &lt;strong&gt;XTAL(External Crystal Oscillator)&lt;/strong&gt; 和震荡器 &lt;strong&gt;OSC(System Oscillator)&lt;/strong&gt; 相连，产生了一个时钟信号为 &lt;strong&gt;SOSC_CLK&lt;/strong&gt; 该信号被 &lt;strong&gt;SCG_SOSCDIV&lt;/strong&gt; 分频成为两个 &lt;strong&gt;SOSC_DIV1_CLK&lt;/strong&gt; 和 &lt;strong&gt;SOSC_DIV2_CLK&lt;/strong&gt; 时钟信号。&lt;strong&gt;SOSC_CLK&lt;/strong&gt; 又被锁相环 &lt;strong&gt;PLL&lt;/strong&gt; 升频到 &lt;strong&gt;SPLL_CLK&lt;/strong&gt; 信号，&lt;strong&gt;SPLL_CLK&lt;/strong&gt; 被 &lt;strong&gt;SCG_SPLLDIV&lt;/strong&gt; 分频得到 &lt;strong&gt;SPLL_DIV1_CLK&lt;/strong&gt; 或者得到 &lt;strong&gt;SPLL_DIV2_CLK&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FIRC(Fast Internal Reference Clock)&lt;/strong&gt; 产生一个 48HMz 的时钟 &lt;strong&gt;FIRC_CLK&lt;/strong&gt;, &lt;strong&gt;SIRC(Slow Internal Reference Clock)&lt;/strong&gt; 产生一个 8MHz 的信号 &lt;strong&gt;SIRC_SLK&lt;/strong&gt;, &lt;strong&gt;FIRC_CLK&lt;/strong&gt; 和 &lt;strong&gt;SIRC_SLK&lt;/strong&gt; 和 &lt;strong&gt;SPLL_CLK&lt;/strong&gt; 和 &lt;strong&gt;SOSC_CLK&lt;/strong&gt; 被 &lt;strong&gt;SCG_RCCR[SCS]&lt;/strong&gt; 选择器选择信号，使用 &lt;strong&gt;DIVCORE&lt;/strong&gt; 分频得到 &lt;strong&gt;CORE_CLK&lt;/strong&gt;,&lt;strong&gt;SYSCLK&lt;/strong&gt; ；使用 &lt;strong&gt;DIVBUS&lt;/strong&gt; 分频得到 &lt;strong&gt;BUS_CLK&lt;/strong&gt; ，使用 &lt;strong&gt;DIVSLOW&lt;/strong&gt; 分频得到 &lt;strong&gt;FLASH_CLK&lt;/strong&gt; 和 &lt;strong&gt;SCG_SLOW_CLK&lt;/strong&gt; 在这个地方，分频器的倍率选择是有要求的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiahualiu.github.io/img/2017-9-29-S32K144_2/DIV_Requirement.png&#34; alt=&#34;DIV_Requirement.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;主要是由于结构限制导致的。注意在设置分频器的时候，请在时钟源开启前进行，否则无法改变，分频器在时钟开启后才会被改变其值。&lt;/p&gt;
&lt;p&gt;Manual上关于该芯片的时钟模块描述：&lt;/p&gt;
&lt;h3 id=&#34;1--system-clock-generator-scg&#34;&gt;1. 系统时钟发生器 System clock generator (SCG)&lt;/h3&gt;
&lt;p&gt;系统时钟发生器（下称 SCG ）给单片机提供了不同的时钟源，包含三个时钟分支：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SPLL(System Phase-locked Loop)&lt;/strong&gt; 系统锁相环，一个压控震荡器。在其他地方也被称作 &lt;strong&gt;PLL&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;电压控制振荡器 VCO(Voltage-controlled oscillator)&lt;/li&gt;
&lt;li&gt;外部参考时钟是锁相环的时钟源&lt;/li&gt;
&lt;li&gt;模数 VCO 分频器&lt;/li&gt;
&lt;li&gt;相位/频率探测器&lt;/li&gt;
&lt;li&gt;可以被选做单片机的系统时钟源&lt;/li&gt;
&lt;li&gt;双路可编程控制的时钟输出，可以提供给片内外围器件时钟源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FIRC/SIRC(Fast/Slow Internal Reference Clock)&lt;/strong&gt; 两个内部参考时钟 IRC 发生器：
&lt;ul&gt;
&lt;li&gt;快速内部参考时钟 FIRC 可以程序控制高/低频率范围, 高为 48Mhz。&lt;/li&gt;
&lt;li&gt;快速内部参考时钟 FIRC 和慢速内部参考时钟 SIRC 都可以被选做单片机的系统时钟源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SOSC(System Crystal Oscillator)&lt;/strong&gt; 系统晶振振荡器，在其他地方也被称作 &lt;strong&gt;OSC&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;被当做系统 PLL 的时钟源&lt;/li&gt;
&lt;li&gt;可以被当做单片机的时钟源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;heading-2&#34;&gt;注意：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;SPLL，SOSC 时钟可以被时钟监测器检测，提供重启和中断请求。&lt;/li&gt;
&lt;li&gt;SPLL 可以被锁定监测器检测，提供中断请求。&lt;/li&gt;
&lt;li&gt;每一个时钟源都有一个参考分频器，给片内模块和外围器件提供分频功能，故时钟名中都有 DIV ，譬如：
&lt;ul&gt;
&lt;li&gt;SPLLDIV1_CLK / SPLLDIV2_CLK&lt;/li&gt;
&lt;li&gt;FIRCDIV1_CLK / SCG_FIRCDIV2_CLK&lt;/li&gt;
&lt;li&gt;SIRCDIV1_CLK / SIRCDIV2_CLK&lt;/li&gt;
&lt;li&gt;SOSCDIV1_CLK / SOSCDIV2_CLK&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2--low-power-oscillator-lpo&#34;&gt;2. 低功率振荡器 Low Power Oscillator (LPO)&lt;/h3&gt;
&lt;p&gt;一个内部的低功率时钟，可以给工作在低功率模式下的器件提供时钟源。&lt;/p&gt;
&lt;h3 id=&#34;3--peripheral-clock-control-pcc&#34;&gt;3. 外围时钟控制器 Peripheral Clock Control (PCC)&lt;/h3&gt;
&lt;p&gt;在上一节详细介绍过这个控制器，用于控制大多数器件的时钟选择。&lt;/p&gt;
&lt;h1 id=&#34;heading-3&#34;&gt;代码&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; hello_clocks.c              Copyright NXP &lt;span style=&#34;color:#ae81ff&#34;&gt;2016&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Description: Example clock and LPIT channel initializations
 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2016&lt;/span&gt; Mar &lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt; S Mihalik &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Initial version
 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2016&lt;/span&gt; Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; SM &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Updated &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; new header files in S32DS v &lt;span style=&#34;color:#ae81ff&#34;&gt;1.3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;S32K144.h&amp;#34;            /* include peripheral declarations S32K144 */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;clocks_and_modes.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; lpit0_ch0_flag_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* LPIT0 timeout counter */&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PORT_init&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
  PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; PCCn[PCC_PORTD_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_CGC_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clock for PORT D */&lt;/span&gt;
  PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PDDR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;            &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D0:  Data Direction= output */&lt;/span&gt;
  PORTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCR[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000100&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D0:  MUX = ALT1, GPIO (to blue LED on EVB) */&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LPIT0_init&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
  PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCCn[PCC_LPIT_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_PCS(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;);    &lt;span style=&#34;color:#75715e&#34;&gt;/* Clock Src = 6 (SPLL2_DIV2_CLK)*/&lt;/span&gt;
  PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCCn[PCC_LPIT_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_CGC_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clk to LPIT0 regs */&lt;/span&gt;
  LPIT0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;MCR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000001&lt;/span&gt;;    &lt;span style=&#34;color:#75715e&#34;&gt;/* DBG_EN-0: Timer chans stop in Debug mode */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* DOZE_EN=0: Timer chans are stopped in DOZE mode */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* SW_RST=0: SW reset does not reset timer chans, regs */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* M_CEN=1: enable module clk (allows writing other LPIT0 regs) */&lt;/span&gt;
  LPIT0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TMR[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].TVAL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40000000&lt;/span&gt;;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Chan 0 Timeout period: 40M clocks */&lt;/span&gt;
  LPIT0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TMR[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].TCTRL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000001&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* T_EN=1: Timer channel is enabled */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* CHAIN=0: channel chaining is disabled */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* MODE=0: 32 periodic counter mode */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* TSOT=0: Timer decrements immediately based on restart */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* TSOI=0: Timer does not stop after timeout */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* TROT=0 Timer will not reload on trigger */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* TRG_SRC=0: External trigger soruce */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* TRG_SEL=0: Timer chan 0 trigger source is selected*/&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SOSC_init_8MHz&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
  SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SOSCDIV&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000101&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCDIV1 &amp;amp; SOSCDIV2 =1: divide by 1 */&lt;/span&gt;
  SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SOSCCFG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000024&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Range=2: Medium freq (SOSC betw 1MHz-8MHz)*/&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;/* HGO=0:   Config xtal osc for low power */&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;/* EREFS=1: Input is external XTAL */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SOSCCSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_SOSCCSR_LK_MASK); &lt;span style=&#34;color:#75715e&#34;&gt;/* Ensure SOSCCSR unlocked */&lt;/span&gt;
  SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SOSCCSR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000001&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/* LK=0:          SOSCCSR can be written */&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCCMRE=0:    OSC CLK monitor IRQ if enabled */&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCCM=0:      OSC CLK monitor disabled */&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCERCLKEN=0: Sys OSC 3V ERCLK output clk disabled */&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCLPEN=0:    Sys OSC disabled in VLP modes */&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCSTEN=0:    Sys OSC disabled in Stop modes */&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCEN=1:      Enable oscillator */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SOSCCSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_SOSCCSR_SOSCVLD_MASK)); &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for sys OSC clk valid */&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SPLL_init_160MHz&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_SPLLCSR_LK_MASK); &lt;span style=&#34;color:#75715e&#34;&gt;/* Ensure SPLLCSR unlocked */&lt;/span&gt;
  SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCSR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLEN=0: SPLL is disabled (default) */&lt;/span&gt;
  SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLDIV &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000302&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLDIV1 divide by 2; SPLLDIV2 divide by 4 */&lt;/span&gt;
  SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCFG &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00180000&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/* PREDIV=0: Divide SOSC_CLK by 0+1=1 */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* MULT=24:  Multiply sys pll by 4+24=40 */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* SPLL_CLK = 8MHz / 1 * 40 / 2 = 160 MHz */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_SPLLCSR_LK_MASK); &lt;span style=&#34;color:#75715e&#34;&gt;/* Ensure SPLLCSR unlocked */&lt;/span&gt;
  SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCSR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000001&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* LK=0:        SPLLCSR can be written */&lt;/span&gt;
                             &lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLCMRE=0:  SPLL CLK monitor IRQ if enabled */&lt;/span&gt;
                             &lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLCM=0:    SPLL CLK monitor disabled */&lt;/span&gt;
                             &lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLSTEN=0:  SPLL disabled in Stop modes */&lt;/span&gt;
                             &lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLEN=1:    Enable SPLL */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_SPLLCSR_SPLLVLD_MASK)); &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for SPLL valid */&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NormalRUNmode_80MHz&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {  &lt;span style=&#34;color:#75715e&#34;&gt;/* Change to normal RUN mode with 8MHz SOSC, 80 MHz PLL*/&lt;/span&gt;
  SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;RCCR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SCG_RCCR_SCS(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)      &lt;span style=&#34;color:#75715e&#34;&gt;/* PLL as clock source*/&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;SCG_RCCR_DIVCORE(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;b01)      &lt;span style=&#34;color:#75715e&#34;&gt;/* DIVCORE=1, div. by 2: Core clock = 160/2 MHz = 80 MHz*/&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;SCG_RCCR_DIVBUS(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;b01)       &lt;span style=&#34;color:#75715e&#34;&gt;/* DIVBUS=1, div. by 2: bus clock = 40 MHz*/&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;SCG_RCCR_DIVSLOW(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;b10);     &lt;span style=&#34;color:#75715e&#34;&gt;/* DIVSLOW=2, div. by 2: SCG slow, flash clock= 26 2/3 MHz*/&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (((SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_CSR_SCS_MASK) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; SCG_CSR_SCS_SHIFT ) &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) {}
                                 &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for sys clk src = SPLL */&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WDOG_disable&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;){
    WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CNT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xD928C520&lt;/span&gt;;   &lt;span style=&#34;color:#75715e&#34;&gt;/*Unlock watchdog*/&lt;/span&gt;
    WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TOVAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000FFFF&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/*Maximum timeout value*/&lt;/span&gt;
    WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002100&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/*Disable watchdog*/&lt;/span&gt;
}


&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
  WDOG_disable();
  PORT_init();            &lt;span style=&#34;color:#75715e&#34;&gt;/* Configure ports */&lt;/span&gt;
  SOSC_init_8MHz();       &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize system oscilator for 8 MHz xtal */&lt;/span&gt;
  SPLL_init_160MHz();     &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize SPLL to 160 MHz with 8 MHz SOSC */&lt;/span&gt;
  NormalRUNmode_80MHz();  &lt;span style=&#34;color:#75715e&#34;&gt;/* Init clocks: 80 MHz sysclk &amp;amp; core, 40 MHz bus, 20 MHz flash */&lt;/span&gt;
  LPIT0_init();           &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize PIT0 for 1 second timeout  */&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (;;) {                     &lt;span style=&#34;color:#75715e&#34;&gt;/* Toggle output to LED every LPIT0 timeout */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (LPIT0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;MSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; LPIT_MSR_TIF0_MASK)) {} &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for LPIT0 CH0 Flag */&lt;/span&gt;
    lpit0_ch0_flag_counter&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;;         &lt;span style=&#34;color:#75715e&#34;&gt;/* Increment LPIT0 timeout counter */&lt;/span&gt;
    PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PTOR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;                &lt;span style=&#34;color:#75715e&#34;&gt;/* Toggle output on port D0 (blue LED) */&lt;/span&gt;
    LPIT0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;MSR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LPIT_MSR_TIF0_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Clear LPIT0 timer flag 0 */&lt;/span&gt;
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading-4&#34;&gt;代码详解&lt;/h1&gt;
&lt;p&gt;老样子，还是从 &lt;code&gt;main()&lt;/code&gt; 内开始：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;PORT_init();    &lt;span style=&#34;color:#75715e&#34;&gt;/* Configure ports */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这一行用于初始化端口，函数内部打开 CGC，配置 GPIO ,设置 PCR MUX 和被动滤波。由于第一节已经有了详细介绍，在这里不做过多描述。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;SOSC_init_8MHz();   &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize system oscilator for 8 MHz xtal */&lt;/span&gt;
SPLL_init_160MHz(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize SPLL to 160 MHz with 8 MHz SOSC */&lt;/span&gt;
NormalRUNmode_80MHz();  &lt;span style=&#34;color:#75715e&#34;&gt;/* Init clocks: 80 MHz sysclk &amp;amp; core, 40 MHz bus, 20 MHz flash */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这三个放在一起，因为他们都用到了一个指针来进行修改，这个指针就是 &lt;code&gt;SCG&lt;/code&gt; , 在头文件中 &lt;code&gt;SCG&lt;/code&gt; 有以下的含义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** SCG - Register Layout Typedef */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
  __I  uint32_t VERID;                             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Version ID Register, offset: 0x0 */&lt;/span&gt;
  __I  uint32_t PARAM;                             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Parameter Register, offset: 0x4 */&lt;/span&gt;
       uint8_t RESERVED_0[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];
  __I  uint32_t CSR;                               &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Clock Status Register, offset: 0x10 */&lt;/span&gt;
  __IO uint32_t RCCR;                              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Run Clock Control Register, offset: 0x14 */&lt;/span&gt;
  __IO uint32_t VCCR;                              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; VLPR Clock Control Register, offset: 0x18 */&lt;/span&gt;
  __IO uint32_t HCCR;                              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; HSRUN Clock Control Register, offset: 0x1C */&lt;/span&gt;
  __IO uint32_t CLKOUTCNFG;                        &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; SCG CLKOUT Configuration Register, offset: 0x20 */&lt;/span&gt;
       uint8_t RESERVED_1[&lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt;];
  __IO uint32_t SOSCCSR;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; System OSC Control Status Register, offset: 0x100 */&lt;/span&gt;
  __IO uint32_t SOSCDIV;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; System OSC Divide Register, offset: 0x104 */&lt;/span&gt;
  __IO uint32_t SOSCCFG;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; System Oscillator Configuration Register, offset: 0x108 */&lt;/span&gt;
       uint8_t RESERVED_2[&lt;span style=&#34;color:#ae81ff&#34;&gt;244&lt;/span&gt;];
  __IO uint32_t SIRCCSR;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Slow IRC Control Status Register, offset: 0x200 */&lt;/span&gt;
  __IO uint32_t SIRCDIV;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Slow IRC Divide Register, offset: 0x204 */&lt;/span&gt;
  __IO uint32_t SIRCCFG;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Slow IRC Configuration Register, offset: 0x208 */&lt;/span&gt;
       uint8_t RESERVED_3[&lt;span style=&#34;color:#ae81ff&#34;&gt;244&lt;/span&gt;];
  __IO uint32_t FIRCCSR;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Fast IRC Control Status Register, offset: 0x300 */&lt;/span&gt;
  __IO uint32_t FIRCDIV;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Fast IRC Divide Register, offset: 0x304 */&lt;/span&gt;
  __IO uint32_t FIRCCFG;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Fast IRC Configuration Register, offset: 0x308 */&lt;/span&gt;
       uint8_t RESERVED_4[&lt;span style=&#34;color:#ae81ff&#34;&gt;756&lt;/span&gt;];
  __IO uint32_t SPLLCSR;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; System PLL Control Status Register, offset: 0x600 */&lt;/span&gt;
  __IO uint32_t SPLLDIV;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; System PLL Divide Register, offset: 0x604 */&lt;/span&gt;
  __IO uint32_t SPLLCFG;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; System PLL Configuration Register, offset: 0x608 */&lt;/span&gt;
} SCG_Type, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SCG_MemMapPtr;

&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral SCG base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define SCG_BASE    (0x40064000u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral SCG base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define SCG    ((SCG_Type *)SCG_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是一个相当庞大的结构，翻阅 Manual 瞅一瞅各个小寄存器吧。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Register name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Width&lt;!-- raw HTML omitted --&gt;(in bits)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Access&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Version ID Register (SCG_VERID)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Parameter Register (SCG_PARAM)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Clock Status Register (SCG_CSR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Run Clock Control Register (SCG_RCCR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;VLPR Clock Control Register (SCG_VCCR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;HSRUN Clock Control Register (SCG_HCCR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SCG CLKOUT Configuration Register (SCG_CLKOUTCNFG)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;System OSC Control Status Register (SCG_SOSCCSR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;System OSC Divide Register (SCG_SOSCDIV)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;System Oscillator Configuration Register (SCG_SOSCCFG)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Slow IRC Control Status Register (SCG_SIRCCSR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Slow IRC Divide Register (SCG_SIRCDIV)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Slow IRC Configuration Register (SCG_SIRCCFG)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Fast IRC Control Status Register (SCG_FIRCCSR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Fast IRC Divide Register (SCG_FIRCDIV)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Fast IRC Configuration Register (SCG_FIRCCFG)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;System PLL Control Status Register (SCG_SPLLCSR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;System PLL Divide Register (SCG_SPLLDIV)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;System PLL Configuration Register (SCG_SPLLCFG)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;version-id-register-scg-verid&#34;&gt;Version ID Register (SCG_VERID)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;VERSION&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SCG Version Number&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SCG 的版本号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;parameter-register-scg-param&#34;&gt;Parameter Register (SCG_PARAM)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;写入会导致错误。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;字面意思是参数寄存器，其中 32 位的定义如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;31-27&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DIVPRES&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;指示现在的 SCG 分频器使用状态&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;&lt;code&gt;DIVPRES[27]=1&lt;/code&gt; DIVSLOW 正在被使用&lt;!-- raw HTML omitted --&gt;&lt;code&gt;DIVPRES[28]=1&lt;/code&gt; DIVBUS 正在被使用&lt;!-- raw HTML omitted --&gt;&lt;code&gt;DIVPRES[31]=1&lt;/code&gt; DIVCORE 正在被使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7-0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CLKPRES&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;指示当前状态下哪个时钟正在被当做 SCG 时钟源&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;CLKPRES[0] Reserved&lt;!-- raw HTML omitted --&gt;CLKPRES&lt;a href=&#34;https://xiahualiu.github.io/img/2017-9-29-S32K144_2/hello_clock.png&#34;&gt;1&lt;/a&gt;=1 System OSC (SOSC) 正在被使用&lt;!-- raw HTML omitted --&gt;CLKPRES&lt;a href=&#34;https://xiahualiu.github.io/img/2017-9-29-S32K144_2/DIV_Requirement.png&#34;&gt;2&lt;/a&gt;=1 Slow IRC (SIRC) 正在被使用&lt;!-- raw HTML omitted --&gt;CLKPRES[3]=1 Fast IRC (FIRC) 正在被使用&lt;!-- raw HTML omitted --&gt;CLKPRES[6]=1 System PLL (SPLL) 正在被使用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;clock-status-register-scg-csr&#34;&gt;Clock Status Register (SCG_CSR)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;写入会导致错误。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个寄存器返回当前的系统时钟源和系统时钟分频器配置，镜像 SCG_RCCR, SCG_VCCR, SCG_HCCR 三个时钟控制器其中之一的配置。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;27-24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SCS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;返回当前配置的系统时钟发生器来源&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;0001 System OSC (SOSC_CLK)&lt;!-- raw HTML omitted --&gt;0010 Slow IRC (SIRC_CLK)&lt;!-- raw HTML omitted --&gt;0011 Fast IRC (FIRC_CLK)&lt;!-- raw HTML omitted --&gt;0110 System PLL (SPLL_CLK)&lt;!-- raw HTML omitted --&gt;其余的值无效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;19-16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DIVCORE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;指示现在的核心时钟分频比率&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;* 若 SPLL 被选做时钟源，则最大比率是 4&lt;!-- raw HTML omitted --&gt; 分频比率 = &lt;code&gt;DIVCORE+1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7-4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DIVBUS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;返回现在的总线（BUS）时钟分频比率&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;分频比率 = &lt;code&gt;DIVBUS+1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3-0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DIVSLOW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;返回现在的慢速时钟分频比率&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;分频比率 = &lt;code&gt;DIVSLOW+1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;run-clock-control-register-scg-rccr&#34;&gt;Run Clock Control Register (SCG_RCCR)&lt;/h3&gt;
&lt;p&gt;这个寄存器给核心，平台，外围，总线控制系统时钟源和系统时钟分频器，只在 Run 模式下起作用，这个寄存器写入的时候只能一次写入 32 位。在 Run 模式下选择一个不同的时钟源需要时钟源在系统时钟调整到时钟源前就要开启并且保证有效。如果系统时钟分频器比率改变的同时选择了一个不同的时钟模式，则新的分频器比率只有在新的时钟源有效后才会发生改变。&lt;/p&gt;
&lt;p&gt;寄存器见 &lt;code&gt;SCG_CSR&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;vlpr-clock-control-register-scg-vccr&#34;&gt;VLPR Clock Control Register (SCG_VCCR)&lt;/h3&gt;
&lt;p&gt;SCG_VCCR 控制的是 VLPR 模式下的，而不是 Run 模式下的，其他的寄存器地图什么的和 SCG_RCCR 一样。写入的时候只能一次写入 32 位。&lt;/p&gt;
&lt;p&gt;寄存器见 &lt;code&gt;SCG_CSR&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;hsrun-clock-control-register-scg-hccr&#34;&gt;HSRUN Clock Control Register (SCG_HCCR)&lt;/h3&gt;
&lt;p&gt;在 HSRUN 模式下的时钟控制寄存器，同上。&lt;/p&gt;
&lt;p&gt;寄存器见 &lt;code&gt;SCG_CSR&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;scg-clkout-configuration-register-scg-clkoutcnfg&#34;&gt;SCG CLKOUT Configuration Register (SCG_CLKOUTCNFG)&lt;/h3&gt;
&lt;p&gt;这个寄存器控制哪一个 SCG 时钟源被输出到 &lt;strong&gt;CLKOUT&lt;/strong&gt; 管脚。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;27-24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SCS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;选择 SCG 系统时钟作为 CLKOUT&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;0001 System OSC (SOSC_CLK)&lt;!-- raw HTML omitted --&gt;0010 Slow IRC (SIRC_CLK)&lt;!-- raw HTML omitted --&gt;0011 Fast IRC (FIRC_CLK)&lt;!-- raw HTML omitted --&gt;0110 System PLL (SPLL_CLK)&lt;!-- raw HTML omitted --&gt;其余的值无效&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;system-osc-control-status-register-scg-sosccsr&#34;&gt;System OSC Control Status Register (SCG_SOSCCSR)&lt;/h3&gt;
&lt;p&gt;这个寄存器控制 SCG 模块中的 SOSC 工作状态。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOSCERR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Clock Error&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;此位只能被单片机的上电复位重置，但是软件也可以通过向此位写入 1 清零&lt;!-- raw HTML omitted --&gt;0 SOSC 检测器被关闭或者没有检测到错误&lt;!-- raw HTML omitted --&gt;1 SOSC  检测器被开启并且检测到一个错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;25&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOSCSEL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Selected 此位不可写入&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;0 SOSC 不是系统时钟源&lt;!-- raw HTML omitted --&gt;1 SOSC 是系统时钟源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOSCVLD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Valid 此位不可写入&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;0 SOSC 无效或者没有启用&lt;!-- raw HTML omitted --&gt;1 SOSC 有效并且输出有效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;LK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Lock Register&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;此位可以在任何时候清零或者置 1 &lt;!-- raw HTML omitted --&gt;0 CSR 寄存器可以写入&lt;!-- raw HTML omitted --&gt;1 CSR 寄存器不可以写入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOSCCMRE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Clock Monitor Reset Enable&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;SOSC 监测器中断/重置开关&lt;!-- raw HTML omitted --&gt;0 当错误被检测，监测器产生中断&lt;!-- raw HTML omitted --&gt;1 当错误被检测，监测器产生重启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOSCCM&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Clock Monitor&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;SOSC 监测器开关&lt;!-- raw HTML omitted --&gt;0 SOSC 监测器关&lt;!-- raw HTML omitted --&gt;1 SOSC 监测器开&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOSCEN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Enable&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;SOSC 使能&lt;!-- raw HTML omitted --&gt;0 SOSC 关&lt;!-- raw HTML omitted --&gt;1 SOSC 开&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;system-osc-divide-register-scg-soscdiv&#34;&gt;System OSC Divide Register (SCG_SOSCDIV)&lt;/h3&gt;
&lt;p&gt;这个寄存器控制两个时钟输出，既可以用作外围器件的功能时钟，也可以作为时钟模块使用，每一路输出都有分频器提供分频，应该在 SOSC 被关闭的情况下更改该寄存器的值以避免输出的值出现错误。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;10-8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOSCDIV2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Clock Divide 2&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;设置 SOSC 第二路输出的分频比率&lt;!-- raw HTML omitted --&gt;分频比率 = &lt;code&gt;2^(SOSCDIV2-1)&lt;/code&gt; &lt;!-- raw HTML omitted --&gt; 0 时关闭时钟输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2-1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOSCDIV1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Clock Divide 1&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;设置 SOSC 第一路输出的分频比率&lt;!-- raw HTML omitted --&gt;分频比率 = &lt;code&gt;2^(SOSCDIV1-1)&lt;/code&gt; &lt;!-- raw HTML omitted --&gt; 0 时关闭时钟输出&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;system-oscillator-configuration-register-scg-sosccfg&#34;&gt;System Oscillator Configuration Register (SCG_SOSCCFG)&lt;/h3&gt;
&lt;p&gt;此寄存器控制振荡器的工作状态，在 SOSC 运行的时候无法被写入，强行写入会被忽略并不会报赋值错误。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;5-4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RANGE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Range Select&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;选择 SOSC 外接晶振的频率范围&lt;!-- raw HTML omitted --&gt;10 中频 (4 MHz to 8MHz)&lt;!-- raw HTML omitted --&gt;11 高频 (8 MHz to 40 MHz)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;HGO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;High Gain Oscillator Select&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;高增益振荡器选择&lt;!-- raw HTML omitted --&gt;0 低增益运行振荡器&lt;!-- raw HTML omitted --&gt;1 高增益运行振荡器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;EREFS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;External Reference Select&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;外部参考时钟选择&lt;!-- raw HTML omitted --&gt;0 外部参考时钟&lt;!-- raw HTML omitted --&gt;1 SOSC 内部晶体振荡器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;slow-irc-control-status-register-scg-sirccsr&#34;&gt;Slow IRC Control Status Register (SCG_SIRCCSR)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;25&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SIRCSEL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Slow IRC Selected&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;选择 SIRC 是否作为系统时钟源&lt;!-- raw HTML omitted --&gt;0 Slow IRC 是系统时钟源&lt;!-- raw HTML omitted --&gt;1 Slow IRC 不是系统时钟源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SIRCVLD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Slow IRC Valid&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Slow IRC 有效位&lt;!-- raw HTML omitted --&gt;0 Slow IRC 无效或者没有启动&lt;!-- raw HTML omitted --&gt;1 Slow IRC 启动并且有效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SIRCLPEN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Slow IRC Low Power Enable&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Slow IRC 低功率模式开关&lt;!-- raw HTML omitted --&gt;0 Slow IRC 在 VLP 模式不启动下&lt;!-- raw HTML omitted --&gt;1 Slow IRC 在 VLP 模式下启动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SIRCSTEN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Slow IRC Stop Enable&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Slow IRC 停止模式开关&lt;!-- raw HTML omitted --&gt;0 Slow IRC 在 Stop modes 下不工作&lt;!-- raw HTML omitted --&gt;1 Slow IRC 在 Stop modes 下工作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SIRCEN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Slow IRC Enable&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Slow IRC 使能&lt;!-- raw HTML omitted --&gt;0 Slow IRC 关闭&lt;!-- raw HTML omitted --&gt;1 Slow IRC 开启&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;slow-irc-divide-register-scg-sircdiv&#34;&gt;Slow IRC Divide Register (SCG_SIRCDIV)&lt;/h3&gt;
&lt;p&gt;该寄存器控制 SIRC 的分频器工作状态，请确保该寄存器在改变前，SIRC 是关闭着的，以防止出现错误。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;10-8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SIRCDIV2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Slow IRC Clock Divide 2&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;提供给需要异步时钟的模块的分频器 2&lt;!-- raw HTML omitted --&gt;分频比率 = &lt;code&gt;2^(SIRCDIV2-1)&lt;/code&gt; &lt;!-- raw HTML omitted --&gt; 0 时关闭时钟输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2-0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SIRCDIV1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Slow IRC Clock Divide 1&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;提供给需要异步时钟的模块的分频器 1&lt;!-- raw HTML omitted --&gt;分频比率 = &lt;code&gt;2^(SIRCDIV1-1)&lt;/code&gt; &lt;!-- raw HTML omitted --&gt; 0 时关闭时钟输出&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;slow-irc-configuration-register-scg-sirccfg&#34;&gt;Slow IRC Configuration Register (SCG_SIRCCFG)&lt;/h3&gt;
&lt;p&gt;此寄存器控制振荡器的工作状态，在 SIRC 运行的时候无法被写入，强行写入会被忽略并不会报赋值错误。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RANGE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Frequency Range&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;频率范围&lt;!-- raw HTML omitted --&gt;0 Slow IRC low range clock (2 MHz)&lt;!-- raw HTML omitted --&gt;1 Slow IRC high range clock (8 MHz)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;剩余的 FIRC 跟这个差不多，但是有一部分细微的变化，到用的时候请查询对应的用户手册。&lt;/p&gt;</description>
    </item>
    <item>
      <title>S32K144EVB的学习历程（一）</title>
      <link>https://xiahualiu.github.io/posts/2017-09-28-s32k144_1/</link>
      <pubDate>Thu, 28 Sep 2017 09:30:30 +0000</pubDate>
      <guid>https://xiahualiu.github.io/posts/2017-09-28-s32k144_1/</guid>
      <description>&lt;h1 id=&#34;heading&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;本文主要介绍了本人在学习使用 &lt;a href=&#34;https://www.nxp.com/cn/products/microcontrollers-and-processors/arm-processors/s32-arm-processors-microcontrollers/32-bit-automotive-general-purpose-microcontrollers:S32K#overviewExpand?cid=ps_cn_baidu_cpc_B_AUTO_S32K_Phrase_bd20170620002&#34;&gt;S32K144EVB&lt;/a&gt;中遇到的问题和解决办法，由于本芯片是 &lt;a href=&#34;https://www.nxp.com/&#34;&gt;NXP&lt;/a&gt;(原 freescale) 生产的基于 ARM M4F 内核的32位芯片，主要适用对象是汽车 。目前在网络上该芯片还没有相关的中文学习资料，到笔者写本文目前，网络上能够找到的资料只有开发板的电路图和 Reference Manual 和该芯片配套的 IDE 内置头文件以及给出的 cookbook 例程，笔者也是在一步步摸索学习，故本文为一个记录性质的文章。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;本文阅读需要 C 语言基础和一些简单的单片机知识，笔者在之前曾经开发过51单片机和 freescale 公司的 HC08GP32 单片机，故可能会跳过一些基础说明。&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;由于该芯片的 Manual 文件长达 1929 页，全读完肯定要浪费很多时间，为了节约时间，我就针对例程中给出的部分内容查询手册相关内容，进行分析。&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;本文针对 S32K144EVB-Q100X 开发板，但基本原理都是相同的。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;hello-world&#34;&gt;Hello World&lt;/h1&gt;
&lt;h2 id=&#34;1-&#34;&gt;1. 本例程主要包含以下部分的操作：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;配置 GPIO&lt;/li&gt;
&lt;li&gt;根据按键状态输出 LED 灯信号&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-&#34;&gt;2. 使用到的电路图：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://xiahualiu.github.io/img/2017-09-28-S32K144_1/helloworld1.png&#34; alt=&#34;Hello World block diagram&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-&#34;&gt;3. 第一个例程的代码如下：&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;S32K144.h&amp;#34; /* include peripheral declarations S32K144 */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTD0 0 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Port PTD0, bit 0: FRDM EVB output to blue LED */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTC12 12 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Port PTC12, bit 12: FRDM EVB input from BTN0 [SW2] */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WDOG_disable&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;){
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CNT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xD928C520&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/*Unlock watchdog*/&lt;/span&gt;
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TOVAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000FFFF&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/*Maximum timeout value*/&lt;/span&gt;
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002100&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/*Disable watchdog*/&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
WDOG_disable();
&lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clocks to peripherals (PORT modules) */&lt;/span&gt;
PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; PCCn[PCC_PORTC_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_CGC_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clock to PORT C */&lt;/span&gt;
PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; PCCn[PCC_PORTD_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_CGC_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clock to PORT D */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* Configure port C12 as GPIO input (BTN 0 [SW2] on EVB) */&lt;/span&gt;
PTC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PDDR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTC12); &lt;span style=&#34;color:#75715e&#34;&gt;/* Port C12: Data Direction= input (default) */&lt;/span&gt;
PORTC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCR[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000110&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port C12: MUX = GPIO, input filter enabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* Configure port D0 as GPIO output (LED on EVB) */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PDDR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD0; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D0: Data Direction= output */&lt;/span&gt;
PORTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCR[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000100&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D0: MUX = GPIO */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(;;) {
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (PTC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PDIR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTC12)) { &lt;span style=&#34;color:#75715e&#34;&gt;/* If Pad Data Input = 1 (BTN0 [SW2] pushed) */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; PCOR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD0; &lt;span style=&#34;color:#75715e&#34;&gt;/* Clear Output on port D0 (LED on) */&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;/* If BTN0 was not pushed */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; PSOR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD0; &lt;span style=&#34;color:#75715e&#34;&gt;/* Set Output on port D0 (LED off) */&lt;/span&gt;
}
counter&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-&#34;&gt;4. 代码详解&lt;/h2&gt;
&lt;p&gt;主要关注 main() 内部&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PCC-&amp;gt; PCCn[PCC_PORTC_INDEX] = PCC_PCCn_CGC_MASK; /* Enable clock to PORT C */
PCC-&amp;gt; PCCn[PCC_PORTD_INDEX] = PCC_PCCn_CGC_MASK; /* Enable clock to PORT D */
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这两句话使用的 &lt;code&gt;PCC&lt;/code&gt; 等变量名都是在头文件 &lt;code&gt;&amp;quot;S32K144.h&amp;quot;&lt;/code&gt; 中定义的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** PCC - Size of Registers Arrays */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PCCn_COUNT 116u&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/** PCC - Register Layout Typedef */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
  __IO uint32_t PCCn[PCC_PCCn_COUNT];   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; PCC Reserved Register 0..PCC CMP0 Register, array offset: 0x0, array step: 0x4 */&lt;/span&gt;
} PCC_Type, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PCC_MemMapPtr;

&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PCC base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_BASE (0x40065000u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PCC base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC ((PCC_Type *)PCC_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;PCC&lt;/code&gt; 是一个指向固定地址的 &lt;code&gt;PCC_Type&lt;/code&gt;结构体指针，他的固定地址是 &lt;code&gt;(0x40065000u)&lt;/code&gt; 它对应的 &lt;code&gt;PCC_Type&lt;/code&gt; 结构拥有一个116个无符号整型变量的数组 &lt;code&gt;PCCn&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;根据注释内容判断，这个指针的主要作用是用来改变 PCC (Peripheral Clock Controller)控制器内部寄存器的值（下称 PCC ），PCC 控制有关外部时钟频率相关的设置。&lt;br&gt;
查询了 Reference Manual 后得知，PCC 有三个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;时钟界面开闭控制 CGC (Clock Gating Controller)&lt;/li&gt;
&lt;li&gt;*功能性时钟源选择控制（如果对应模块有时钟源）&lt;/li&gt;
&lt;li&gt;*功能性时钟分频值控制（如果对应模块有分频器）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这个地方，我们仅仅用到第一个功能，也就是时钟界面开关功能。在本文文末，我将给出 PCC 的内存地图。
PCC 模块给芯片上面每一个外围模块都设置了独自的 PCC 内部寄存器地址，用于控制以上的三个功能，PCC 内的每一个寄存器都有一个时钟界面开闭位 (CGC)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在每一个模块使用前，必须打开该模块的CGC (CGC = 1)，才能使用该模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如何打开？首先是寻址，在头文件 &lt;code&gt;&amp;quot;S32K144.h&amp;quot;&lt;/code&gt; 中已经将 PCC 控制器的各个寄存器地址全部用宏定义了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* PCC index offsets */&lt;/span&gt;
...
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PORTA_INDEX 73&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PORTB_INDEX 74&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PORTC_INDEX 75&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PORTD_INDEX 76&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PORTE_INDEX 77&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 GPIO A/B/C/D/E 对应的地址。将其赋值为 &lt;code&gt;PCC_PCCn_CGC_MASK&lt;/code&gt; 即可打开 CGC。&lt;code&gt;PCC_PCCn_CGC_MASK&lt;/code&gt; 在头文件中定义为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PCCn_CGC_MASK 0x40000000u&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后面的 GPIO 端口方向控制类似 PCC 的控制，在这里使用了一个 PTC 和 PTD 指针，指向两个固定地址的结构体 &lt;code&gt;GPIO_Type&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** GPIO - Register Layout Typedef */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
  __IO uint32_t PDOR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Data Output Register, offset: 0x0 */&lt;/span&gt;
  __O  uint32_t PSOR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Set Output Register, offset: 0x4 */&lt;/span&gt;
  __O  uint32_t PCOR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Clear Output Register, offset: 0x8 */&lt;/span&gt;
  __O  uint32_t PTOR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Toggle Output Register, offset: 0xC */&lt;/span&gt;
  __I  uint32_t PDIR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Data Input Register, offset: 0x10 */&lt;/span&gt;
  __IO uint32_t PDDR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Data Direction Register, offset: 0x14 */&lt;/span&gt;
  __IO uint32_t PIDR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Input Disable Register, offset: 0x18 */&lt;/span&gt;
} GPIO_Type, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GPIO_MemMapPtr;

&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PTC base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTC_BASE (0x400FF080u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PTC base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTC ((GPIO_Type *)PTC_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PTD base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTD_BASE (0x400FF0C0u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PTD base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTD ((GPIO_Type *)PTD_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gpio-&#34;&gt;GPIO 的控制器：&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Width&lt;!-- raw HTML omitted --&gt;(in bits)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Access&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Data Output Register (PDOR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Set Output Register (PSOR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Clear Output Register (PCOR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Toggle Output Register (PTOR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Data Input Register (PDIR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Data Direction Register (PDDR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Input Disable Register (PIDR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-data-output-register-pdor&#34;&gt;Port Data Output Register (PDOR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PDO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Data Output&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;输出管脚的值，对应逻辑值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-set-output-register-psor&#34;&gt;Port Set Output Register (PSOR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PTSO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Set Output&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;将指定管脚的值置 1&lt;!-- raw HTML omitted --&gt;读取恒为零&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-clear-output-register-pcor&#34;&gt;Port Clear Output Register (PCOR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PTCO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Clear Output&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;将指定管脚的值置 0&lt;!-- raw HTML omitted --&gt;读取恒为零&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-toggle-output-register-ptor&#34;&gt;Port Toggle Output Register (PTOR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PTTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Toggle Output&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;将指定管脚的值反转&lt;!-- raw HTML omitted --&gt;读取恒为零&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-data-input-register-pdir&#34;&gt;Port Data Input Register (PDIR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PDI&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Data Input&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;读取指定管脚的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-data-direction-register-pddr&#34;&gt;Port Data Direction Register (PDDR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PDD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Data Direction&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;0 Input&lt;!-- raw HTML omitted --&gt;1 Output&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-input-disable-register-pidr&#34;&gt;Port Input Disable Register (PIDR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PID&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Input Disable&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;0 管脚正常输入&lt;!-- raw HTML omitted --&gt;1 管脚不能输入&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-port-controller-register&#34;&gt;端口功能控制 PORT Controller Register&lt;/h3&gt;
&lt;p&gt;我做个比喻，在 ARM 中，各个管脚就像是一个个等待工作的银行柜台窗口，可以存钱，也可以取钱，也可以借贷款，也可以办理理财业务，银行不能一个业务开一个窗口，所以每个窗口必须可以做很多事情，ARM 也是这样，在有限的管脚上，需要进行中断，PWM，GPIO，UART串口，SPI，I2C，CAN 信息交流功能，所以&lt;strong&gt;有些&lt;/strong&gt;管脚有很多功能可以选择，我们要使用某个功能就要自己进行设置，设置的地方呢就在 &lt;strong&gt;PCR(Pin Controller Register)&lt;/strong&gt; 这个寄存器里面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** PORT - Register Layout Typedef */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
  __IO uint32_t PCR[PORT_PCR_COUNT];    &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Pin Control Register n, array offset: 0x0, array step: 0x4 */&lt;/span&gt;
  __O  uint32_t GPCLR;  &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Global Pin Control Low Register, offset: 0x80 */&lt;/span&gt;
  __O  uint32_t GPCHR;  &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Global Pin Control High Register, offset: 0x84 */&lt;/span&gt;
       uint8_t RESERVED_0[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
  __IO uint32_t ISFR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Interrupt Status Flag Register, offset: 0xA0 */&lt;/span&gt;
       uint8_t RESERVED_1[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;];
  __IO uint32_t DFER;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Digital Filter Enable Register, offset: 0xC0 */&lt;/span&gt;
  __IO uint32_t DFCR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Digital Filter Clock Register, offset: 0xC4 */&lt;/span&gt;
  __IO uint32_t DFWR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Digital Filter Width Register, offset: 0xC8 */&lt;/span&gt;
} PORT_Type, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PORT_MemMapPtr;

&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PORTC base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PORTC_BASE (0x4004B000u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PORTC base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PORTC ((PORT_Type *)PORTC_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PORTD base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PORTD_BASE (0x4004C000u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PORTD base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PORTD ((PORT_Type *)PORTD_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样每个 PCR 都有 32 位，与之前不同的是，这 32 位仅仅设置了一个管脚，而不是 32 个个，这 32 位的功能如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ISF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Interrupt Status Flag&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; 管脚未检测中断&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 管脚检测到中断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;19-16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;IRQC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Interrupt Configuration&lt;/strong&gt; 对应管脚的设置如下&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0000&lt;!-- raw HTML omitted --&gt; ISF 关闭&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0001&lt;!-- raw HTML omitted --&gt; ISF标志 和 DMA 请求，产生在上升沿&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0010&lt;!-- raw HTML omitted --&gt; ISF标志 和 DMA 请求，产生在下降沿&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0011&lt;!-- raw HTML omitted --&gt; ISF标志 和 DMA 请求，既在上升沿也在下降沿产生&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0100&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0101&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0110&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0111&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1000&lt;!-- raw HTML omitted --&gt; ISF 标志和中断，产生于逻辑 0&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1001&lt;!-- raw HTML omitted --&gt; ISF 标志和中断，产生于上升沿&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1010&lt;!-- raw HTML omitted --&gt; ISF 标志和中断，产生于下降沿&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1100&lt;!-- raw HTML omitted --&gt; ISF 标志和中断，产生于两个沿&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1100&lt;!-- raw HTML omitted --&gt; ISF 标志和中断，产生于逻辑 1&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1101&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1110&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1111&lt;!-- raw HTML omitted --&gt; 保留&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;LK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Lock Register&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; PCR 寄存器 0 到 15 位值不锁定&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; PCR 寄存器 0 - 15 位值锁定，直到下次重新启动才能够更改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;10-8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;MUX&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Pin Mux Control&lt;/strong&gt; 管脚复用控制&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;不是所有的管脚都支持管脚复用，若支持，则可以有以下的设置：&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;000&lt;!-- raw HTML omitted --&gt; 关闭管脚复用&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;001&lt;!-- raw HTML omitted --&gt; 功能 1 ，GPIO&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;010&lt;!-- raw HTML omitted --&gt; 功能 2 ，芯片特定功能&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;011&lt;!-- raw HTML omitted --&gt; 功能 3 ，芯片特定功能&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;100&lt;!-- raw HTML omitted --&gt; 功能 4 ，芯片特定功能&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;101&lt;!-- raw HTML omitted --&gt; 功能 5 ，芯片特定功能&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;110&lt;!-- raw HTML omitted --&gt; 功能 6 ，芯片特定功能&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;111&lt;!-- raw HTML omitted --&gt; 功能 7 ，芯片特定功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Drive Strength Enable&lt;/strong&gt; DSE 驱动力加强设置，此位在各种复用模式下都有效&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; 低驱动力模式，如果管脚处于输出模式&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 高驱动力模式，如果管脚处于输出模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PFE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Passive Filter Enable&lt;/strong&gt; 被动滤波功能，此位在各复用状态下都有效&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; 关闭被动滤波&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 开启被动滤波，工作在输入状态下，详情参考滤波说明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Pull Enable&lt;/strong&gt; PE 使能上下拉电阻&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; 无内部上下拉电阻&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 有上下拉电阻&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Pull Select&lt;/strong&gt; PE 选择上下拉电阻&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; 有上拉电阻&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 有下拉电阻&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;如果要使用某个 GPIO 端口，需要的准备工作是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 PCC 指针打开对应的 PCCn[] 对应的CGC ，PCCn是 PCC 所指向的结构体内部的数组，固定地址，包含一共有116个 uint32 类型寄存器，将对应的寄存器赋值为 &lt;code&gt;PCC_PCCn_CGC_MASK&lt;/code&gt; 即可打开 CGC = 1 。&lt;/li&gt;
&lt;li&gt;设置 GPIO 的控制器中的 PDDR 寄存器，用于调整输入/输出方向。此寄存器在一个类型为 &lt;code&gt;GPIO_Type&lt;/code&gt; 的结构中，一共有 5 个固定地址的结构，使用 PTA/PTB/PTC/PTD/PTE 访问。&lt;/li&gt;
&lt;li&gt;设置 PORT.PCR 控制器，关闭中断，MUX 设置成为 &lt;strong&gt;001&lt;/strong&gt;，是否开启被动滤波。使用 PORTA/PORTB/PORTC/PORTD/PORTE 访问。&lt;/li&gt;
&lt;li&gt;读取对应的 PDIR （输入），或者给 PDOR 赋值 （输出）。使用 PTA/PTB/PTC/PTD/PTE 访问。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;pcc-&#34;&gt;附录：PCC 各个寄存器地图&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;偏移地址&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;寄存器名称&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;长度/位 (bit)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;权限&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;重启默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;80h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTFC Register (PCC_FTFC)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;84h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC DMAMUX Register (PCC_DMAMUX)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;90h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FlexCAN0 Register (PCC_FlexCAN0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;94h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FlexCAN1 Register (PCC_FlexCAN1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;98h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM3 Register (PCC_FTM3)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;9Ch&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC ADC1 Register (PCC_ADC1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ACh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FlexCAN2 Register (PCC_FlexCAN2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B0h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPSPI0 Register (PCC_LPSPI0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPSPI1 Register (PCC_LPSPI1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPSPI2 Register (PCC_LPSPI2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;C4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PDB1 Register (PCC_PDB1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;C8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC CRC Register (PCC_CRC)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PDB0 Register (PCC_PDB0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;DCh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPIT Register (PCC_LPIT)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;E0h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM0 Register (PCC_FTM0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;E4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM1 Register (PCC_FTM1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;E8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM2 Register (PCC_FTM2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ECh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC ADC0 Register (PCC_ADC0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;F4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC RTC Register (PCC_RTC)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;100h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPTMR0 Register (PCC_LPTMR0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;124h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PORTA Register (PCC_PORTA)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;128h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PORTB Register (PCC_PORTB)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;12Ch&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PORTC Register (PCC_PORTC)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;130h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PORTD Register (PCC_PORTD)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;134h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PORTE Register (PCC_PORTE)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;150h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC SAI0 Register (PCC_SAI0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;154h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC SAI1 Register (PCC_SAI1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;168h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FlexIO Register (PCC_FlexIO)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;184h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC EWM Register (PCC_EWM)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;198h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPI2C0 Register (PCC_LPI2C0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;19Ch&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPI2C1 Register (PCC_LPI2C1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1A8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPUART0 Register (PCC_LPUART0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1ACh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPUART1 Register (PCC_LPUART1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1B0h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPUART2 Register (PCC_LPUART2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1B8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM4 Register (PCC_FTM4)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1BCh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM5 Register (PCC_FTM5)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1C0h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM6 Register (PCC_FTM6)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1C4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM7 Register (PCC_FTM7)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1CCh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC CMP0 Register (PCC_CMP0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1D8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC QSPI Register (PCC_QSPI)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1E4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC ENET Register (PCC_ENET)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
  </channel>
</rss>
