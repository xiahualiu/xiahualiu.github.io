<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type="text/xsl" href="https://xiahualiu.github.io/xml/base.min.xml" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xiahua</title>
    <link>https://xiahualiu.github.io/</link>
    <description>Recent content on Xiahua</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Dec 2019 15:02:54 -0500</lastBuildDate>
    <atom:link href="https://xiahualiu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello World</title>
      <link>https://xiahualiu.github.io/posts/hello-world/</link>
      <pubDate>Sat, 21 Dec 2019 15:02:54 -0500</pubDate>
      <guid>https://xiahualiu.github.io/posts/hello-world/</guid>
      <description>&lt;p&gt;This is the test post for hugo.&lt;/p&gt;
&lt;p&gt;Equation:&lt;/p&gt;
&lt;p&gt;$$ x=a^2+b^2 $$&lt;/p&gt;
&lt;p&gt;Chinese test:&lt;/p&gt;
&lt;p&gt;先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。&lt;/p&gt;</description>
    </item>
    <item>
      <title>S32K144EVB的学习历程（一）</title>
      <link>https://xiahualiu.github.io/posts/2017-09-28-s32k144_1/</link>
      <pubDate>Thu, 28 Sep 2017 09:30:30 +0000</pubDate>
      <guid>https://xiahualiu.github.io/posts/2017-09-28-s32k144_1/</guid>
      <description>&lt;h1 id=&#34;heading&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;本文主要介绍了本人在学习使用 &lt;a href=&#34;https://www.nxp.com/cn/products/microcontrollers-and-processors/arm-processors/s32-arm-processors-microcontrollers/32-bit-automotive-general-purpose-microcontrollers:S32K#overviewExpand?cid=ps_cn_baidu_cpc_B_AUTO_S32K_Phrase_bd20170620002&#34;&gt;S32K144EVB&lt;/a&gt;中遇到的问题和解决办法，由于本芯片是 &lt;a href=&#34;https://www.nxp.com/&#34;&gt;NXP&lt;/a&gt;(原 freescale) 生产的基于 ARM M4F 内核的32位芯片，主要适用对象是汽车 。目前在网络上该芯片还没有相关的中文学习资料，到笔者写本文目前，网络上能够找到的资料只有开发板的电路图和 Reference Manual 和该芯片配套的 IDE 内置头文件以及给出的 cookbook 例程，笔者也是在一步步摸索学习，故本文为一个记录性质的文章。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;本文阅读需要 C 语言基础和一些简单的单片机知识，笔者在之前曾经开发过51单片机和 freescale 公司的 HC08GP32 单片机，故可能会跳过一些基础说明。&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;由于该芯片的 Manual 文件长达 1929 页，全读完肯定要浪费很多时间，为了节约时间，我就针对例程中给出的部分内容查询手册相关内容，进行分析。&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;本文针对 S32K144EVB-Q100X 开发板，但基本原理都是相同的。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;hello-world&#34;&gt;Hello World&lt;/h1&gt;
&lt;h2 id=&#34;1-&#34;&gt;1. 本例程主要包含以下部分的操作：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;配置 GPIO&lt;/li&gt;
&lt;li&gt;根据按键状态输出 LED 灯信号&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-&#34;&gt;2. 使用到的电路图：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://xiahualiu.github.io/2017-09-28-S32K144_1/helloworld1.png&#34; alt=&#34;Hello World block diagram&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-&#34;&gt;3. 第一个例程的代码如下：&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;S32K144.h&amp;#34; /* include peripheral declarations S32K144 */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTD0 0 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Port PTD0, bit 0: FRDM EVB output to blue LED */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTC12 12 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Port PTC12, bit 12: FRDM EVB input from BTN0 [SW2] */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WDOG_disable&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;){
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CNT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xD928C520&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/*Unlock watchdog*/&lt;/span&gt;
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TOVAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000FFFF&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/*Maximum timeout value*/&lt;/span&gt;
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002100&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/*Disable watchdog*/&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
WDOG_disable();
&lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clocks to peripherals (PORT modules) */&lt;/span&gt;
PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; PCCn[PCC_PORTC_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_CGC_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clock to PORT C */&lt;/span&gt;
PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; PCCn[PCC_PORTD_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_CGC_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clock to PORT D */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* Configure port C12 as GPIO input (BTN 0 [SW2] on EVB) */&lt;/span&gt;
PTC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PDDR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTC12); &lt;span style=&#34;color:#75715e&#34;&gt;/* Port C12: Data Direction= input (default) */&lt;/span&gt;
PORTC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCR[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000110&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port C12: MUX = GPIO, input filter enabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* Configure port D0 as GPIO output (LED on EVB) */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PDDR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD0; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D0: Data Direction= output */&lt;/span&gt;
PORTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCR[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000100&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D0: MUX = GPIO */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(;;) {
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (PTC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PDIR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTC12)) { &lt;span style=&#34;color:#75715e&#34;&gt;/* If Pad Data Input = 1 (BTN0 [SW2] pushed) */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; PCOR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD0; &lt;span style=&#34;color:#75715e&#34;&gt;/* Clear Output on port D0 (LED on) */&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;/* If BTN0 was not pushed */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; PSOR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD0; &lt;span style=&#34;color:#75715e&#34;&gt;/* Set Output on port D0 (LED off) */&lt;/span&gt;
}
counter&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-&#34;&gt;4. 代码详解&lt;/h2&gt;
&lt;p&gt;主要关注 main() 内部&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PCC-&amp;gt; PCCn[PCC_PORTC_INDEX] = PCC_PCCn_CGC_MASK; /* Enable clock to PORT C */
PCC-&amp;gt; PCCn[PCC_PORTD_INDEX] = PCC_PCCn_CGC_MASK; /* Enable clock to PORT D */
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这两句话使用的 &lt;code&gt;PCC&lt;/code&gt; 等变量名都是在头文件 &lt;code&gt;&amp;quot;S32K144.h&amp;quot;&lt;/code&gt; 中定义的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** PCC - Size of Registers Arrays */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PCCn_COUNT 116u&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/** PCC - Register Layout Typedef */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
  __IO uint32_t PCCn[PCC_PCCn_COUNT];   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; PCC Reserved Register 0..PCC CMP0 Register, array offset: 0x0, array step: 0x4 */&lt;/span&gt;
} PCC_Type, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PCC_MemMapPtr;

&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PCC base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_BASE (0x40065000u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PCC base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC ((PCC_Type *)PCC_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;PCC&lt;/code&gt; 是一个指向固定地址的 &lt;code&gt;PCC_Type&lt;/code&gt;结构体指针，他的固定地址是 &lt;code&gt;(0x40065000u)&lt;/code&gt; 它对应的 &lt;code&gt;PCC_Type&lt;/code&gt; 结构拥有一个116个无符号整型变量的数组 &lt;code&gt;PCCn&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;根据注释内容判断，这个指针的主要作用是用来改变 PCC (Peripheral Clock Controller)控制器内部寄存器的值（下称 PCC ），PCC 控制有关外部时钟频率相关的设置。&lt;br&gt;
查询了 Reference Manual 后得知，PCC 有三个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;时钟界面开闭控制 CGC (Clock Gating Controller)&lt;/li&gt;
&lt;li&gt;*功能性时钟源选择控制（如果对应模块有时钟源）&lt;/li&gt;
&lt;li&gt;*功能性时钟分频值控制（如果对应模块有分频器）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这个地方，我们仅仅用到第一个功能，也就是时钟界面开关功能。在本文文末，我将给出 PCC 的内存地图。
PCC 模块给芯片上面每一个外围模块都设置了独自的 PCC 内部寄存器地址，用于控制以上的三个功能，PCC 内的每一个寄存器都有一个时钟界面开闭位 (CGC)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在每一个模块使用前，必须打开该模块的CGC (CGC = 1)，才能使用该模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如何打开？首先是寻址，在头文件 &lt;code&gt;&amp;quot;S32K144.h&amp;quot;&lt;/code&gt; 中已经将 PCC 控制器的各个寄存器地址全部用宏定义了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* PCC index offsets */&lt;/span&gt;
...
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PORTA_INDEX 73&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PORTB_INDEX 74&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PORTC_INDEX 75&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PORTD_INDEX 76&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PORTE_INDEX 77&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 GPIO A/B/C/D/E 对应的地址。将其赋值为 &lt;code&gt;PCC_PCCn_CGC_MASK&lt;/code&gt; 即可打开 CGC。&lt;code&gt;PCC_PCCn_CGC_MASK&lt;/code&gt; 在头文件中定义为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PCCn_CGC_MASK 0x40000000u&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后面的 GPIO 端口方向控制类似 PCC 的控制，在这里使用了一个 PTC 和 PTD 指针，指向两个固定地址的结构体 &lt;code&gt;GPIO_Type&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** GPIO - Register Layout Typedef */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
  __IO uint32_t PDOR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Data Output Register, offset: 0x0 */&lt;/span&gt;
  __O  uint32_t PSOR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Set Output Register, offset: 0x4 */&lt;/span&gt;
  __O  uint32_t PCOR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Clear Output Register, offset: 0x8 */&lt;/span&gt;
  __O  uint32_t PTOR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Toggle Output Register, offset: 0xC */&lt;/span&gt;
  __I  uint32_t PDIR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Data Input Register, offset: 0x10 */&lt;/span&gt;
  __IO uint32_t PDDR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Data Direction Register, offset: 0x14 */&lt;/span&gt;
  __IO uint32_t PIDR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Input Disable Register, offset: 0x18 */&lt;/span&gt;
} GPIO_Type, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GPIO_MemMapPtr;

&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PTC base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTC_BASE (0x400FF080u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PTC base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTC ((GPIO_Type *)PTC_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PTD base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTD_BASE (0x400FF0C0u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PTD base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTD ((GPIO_Type *)PTD_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gpio-&#34;&gt;GPIO 的控制器：&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Width&lt;!-- raw HTML omitted --&gt;(in bits)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Access&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Data Output Register (PDOR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Set Output Register (PSOR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Clear Output Register (PCOR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Toggle Output Register (PTOR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Data Input Register (PDIR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Data Direction Register (PDDR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Input Disable Register (PIDR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-data-output-register-pdor&#34;&gt;Port Data Output Register (PDOR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PDO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Data Output&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;输出管脚的值，对应逻辑值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-set-output-register-psor&#34;&gt;Port Set Output Register (PSOR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PTSO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Set Output&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;将指定管脚的值置 1&lt;!-- raw HTML omitted --&gt;读取恒为零&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-clear-output-register-pcor&#34;&gt;Port Clear Output Register (PCOR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PTCO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Clear Output&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;将指定管脚的值置 0&lt;!-- raw HTML omitted --&gt;读取恒为零&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-toggle-output-register-ptor&#34;&gt;Port Toggle Output Register (PTOR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PTTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Toggle Output&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;将指定管脚的值反转&lt;!-- raw HTML omitted --&gt;读取恒为零&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-data-input-register-pdir&#34;&gt;Port Data Input Register (PDIR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PDI&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Data Input&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;读取指定管脚的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-data-direction-register-pddr&#34;&gt;Port Data Direction Register (PDDR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PDD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Data Direction&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;0 Input&lt;!-- raw HTML omitted --&gt;1 Output&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-input-disable-register-pidr&#34;&gt;Port Input Disable Register (PIDR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PID&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Input Disable&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;0 管脚正常输入&lt;!-- raw HTML omitted --&gt;1 管脚不能输入&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-port-controller-register&#34;&gt;端口功能控制 PORT Controller Register&lt;/h3&gt;
&lt;p&gt;我做个比喻，在 ARM 中，各个管脚就像是一个个等待工作的银行柜台窗口，可以存钱，也可以取钱，也可以借贷款，也可以办理理财业务，银行不能一个业务开一个窗口，所以每个窗口必须可以做很多事情，ARM 也是这样，在有限的管脚上，需要进行中断，PWM，GPIO，UART串口，SPI，I2C，CAN 信息交流功能，所以&lt;strong&gt;有些&lt;/strong&gt;管脚有很多功能可以选择，我们要使用某个功能就要自己进行设置，设置的地方呢就在 &lt;strong&gt;PCR(Pin Controller Register)&lt;/strong&gt; 这个寄存器里面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** PORT - Register Layout Typedef */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
  __IO uint32_t PCR[PORT_PCR_COUNT];    &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Pin Control Register n, array offset: 0x0, array step: 0x4 */&lt;/span&gt;
  __O  uint32_t GPCLR;  &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Global Pin Control Low Register, offset: 0x80 */&lt;/span&gt;
  __O  uint32_t GPCHR;  &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Global Pin Control High Register, offset: 0x84 */&lt;/span&gt;
       uint8_t RESERVED_0[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
  __IO uint32_t ISFR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Interrupt Status Flag Register, offset: 0xA0 */&lt;/span&gt;
       uint8_t RESERVED_1[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;];
  __IO uint32_t DFER;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Digital Filter Enable Register, offset: 0xC0 */&lt;/span&gt;
  __IO uint32_t DFCR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Digital Filter Clock Register, offset: 0xC4 */&lt;/span&gt;
  __IO uint32_t DFWR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Digital Filter Width Register, offset: 0xC8 */&lt;/span&gt;
} PORT_Type, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PORT_MemMapPtr;

&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PORTC base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PORTC_BASE (0x4004B000u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PORTC base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PORTC ((PORT_Type *)PORTC_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PORTD base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PORTD_BASE (0x4004C000u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PORTD base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PORTD ((PORT_Type *)PORTD_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样每个 PCR 都有 32 位，与之前不同的是，这 32 位仅仅设置了一个管脚，而不是 32 个个，这 32 位的功能如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ISF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Interrupt Status Flag&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; 管脚未检测中断&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 管脚检测到中断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;19-16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;IRQC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Interrupt Configuration&lt;/strong&gt; 对应管脚的设置如下&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0000&lt;!-- raw HTML omitted --&gt; ISF 关闭&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0001&lt;!-- raw HTML omitted --&gt; ISF标志 和 DMA 请求，产生在上升沿&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0010&lt;!-- raw HTML omitted --&gt; ISF标志 和 DMA 请求，产生在下降沿&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0011&lt;!-- raw HTML omitted --&gt; ISF标志 和 DMA 请求，既在上升沿也在下降沿产生&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0100&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0101&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0110&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0111&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1000&lt;!-- raw HTML omitted --&gt; ISF 标志和中断，产生于逻辑 0&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1001&lt;!-- raw HTML omitted --&gt; ISF 标志和中断，产生于上升沿&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1010&lt;!-- raw HTML omitted --&gt; ISF 标志和中断，产生于下降沿&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1100&lt;!-- raw HTML omitted --&gt; ISF 标志和中断，产生于两个沿&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1100&lt;!-- raw HTML omitted --&gt; ISF 标志和中断，产生于逻辑 1&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1101&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1110&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1111&lt;!-- raw HTML omitted --&gt; 保留&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;LK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Lock Register&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; PCR 寄存器 0 到 15 位值不锁定&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; PCR 寄存器 0 - 15 位值锁定，直到下次重新启动才能够更改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;10-8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;MUX&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Pin Mux Control&lt;/strong&gt; 管脚复用控制&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;不是所有的管脚都支持管脚复用，若支持，则可以有以下的设置：&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;000&lt;!-- raw HTML omitted --&gt; 关闭管脚复用&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;001&lt;!-- raw HTML omitted --&gt; 功能 1 ，GPIO&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;010&lt;!-- raw HTML omitted --&gt; 功能 2 ，芯片特定功能&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;011&lt;!-- raw HTML omitted --&gt; 功能 3 ，芯片特定功能&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;100&lt;!-- raw HTML omitted --&gt; 功能 4 ，芯片特定功能&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;101&lt;!-- raw HTML omitted --&gt; 功能 5 ，芯片特定功能&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;110&lt;!-- raw HTML omitted --&gt; 功能 6 ，芯片特定功能&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;111&lt;!-- raw HTML omitted --&gt; 功能 7 ，芯片特定功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Drive Strength Enable&lt;/strong&gt; DSE 驱动力加强设置，此位在各种复用模式下都有效&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; 低驱动力模式，如果管脚处于输出模式&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 高驱动力模式，如果管脚处于输出模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PFE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Passive Filter Enable&lt;/strong&gt; 被动滤波功能，此位在各复用状态下都有效&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; 关闭被动滤波&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 开启被动滤波，工作在输入状态下，详情参考滤波说明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Pull Enable&lt;/strong&gt; PE 使能上下拉电阻&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; 无内部上下拉电阻&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 有上下拉电阻&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Pull Select&lt;/strong&gt; PE 选择上下拉电阻&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; 有上拉电阻&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 有下拉电阻&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;如果要使用某个 GPIO 端口，需要的准备工作是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 PCC 指针打开对应的 PCCn[] 对应的CGC ，PCCn是 PCC 所指向的结构体内部的数组，固定地址，包含一共有116个 uint32 类型寄存器，将对应的寄存器赋值为 &lt;code&gt;PCC_PCCn_CGC_MASK&lt;/code&gt; 即可打开 CGC = 1 。&lt;/li&gt;
&lt;li&gt;设置 GPIO 的控制器中的 PDDR 寄存器，用于调整输入/输出方向。此寄存器在一个类型为 &lt;code&gt;GPIO_Type&lt;/code&gt; 的结构中，一共有 5 个固定地址的结构，使用 PTA/PTB/PTC/PTD/PTE 访问。&lt;/li&gt;
&lt;li&gt;设置 PORT.PCR 控制器，关闭中断，MUX 设置成为 &lt;strong&gt;001&lt;/strong&gt;，是否开启被动滤波。使用 PORTA/PORTB/PORTC/PORTD/PORTE 访问。&lt;/li&gt;
&lt;li&gt;读取对应的 PDIR （输入），或者给 PDOR 赋值 （输出）。使用 PTA/PTB/PTC/PTD/PTE 访问。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;pcc-&#34;&gt;附录：PCC 各个寄存器地图&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;偏移地址&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;寄存器名称&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;长度/位 (bit)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;权限&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;重启默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;80h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTFC Register (PCC_FTFC)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;84h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC DMAMUX Register (PCC_DMAMUX)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;90h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FlexCAN0 Register (PCC_FlexCAN0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;94h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FlexCAN1 Register (PCC_FlexCAN1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;98h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM3 Register (PCC_FTM3)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;9Ch&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC ADC1 Register (PCC_ADC1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ACh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FlexCAN2 Register (PCC_FlexCAN2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B0h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPSPI0 Register (PCC_LPSPI0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPSPI1 Register (PCC_LPSPI1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPSPI2 Register (PCC_LPSPI2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;C4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PDB1 Register (PCC_PDB1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;C8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC CRC Register (PCC_CRC)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PDB0 Register (PCC_PDB0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;DCh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPIT Register (PCC_LPIT)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;E0h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM0 Register (PCC_FTM0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;E4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM1 Register (PCC_FTM1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;E8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM2 Register (PCC_FTM2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ECh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC ADC0 Register (PCC_ADC0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;F4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC RTC Register (PCC_RTC)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;100h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPTMR0 Register (PCC_LPTMR0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;124h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PORTA Register (PCC_PORTA)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;128h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PORTB Register (PCC_PORTB)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;12Ch&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PORTC Register (PCC_PORTC)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;130h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PORTD Register (PCC_PORTD)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;134h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PORTE Register (PCC_PORTE)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;150h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC SAI0 Register (PCC_SAI0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;154h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC SAI1 Register (PCC_SAI1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;168h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FlexIO Register (PCC_FlexIO)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;184h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC EWM Register (PCC_EWM)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;198h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPI2C0 Register (PCC_LPI2C0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;19Ch&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPI2C1 Register (PCC_LPI2C1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1A8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPUART0 Register (PCC_LPUART0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1ACh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPUART1 Register (PCC_LPUART1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1B0h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPUART2 Register (PCC_LPUART2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1B8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM4 Register (PCC_FTM4)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1BCh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM5 Register (PCC_FTM5)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1C0h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM6 Register (PCC_FTM6)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1C4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM7 Register (PCC_FTM7)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1CCh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC CMP0 Register (PCC_CMP0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1D8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC QSPI Register (PCC_QSPI)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1E4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC ENET Register (PCC_ENET)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
  </channel>
</rss>
