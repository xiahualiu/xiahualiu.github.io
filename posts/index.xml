<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type="text/xsl" href="https://xiahualiu.github.io/xml/base.min.xml" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Xiahua</title>
    <link>https://xiahualiu.github.io/posts/</link>
    <description>Recent content in Posts on Xiahua</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Dec 2019 15:02:54 -0500</lastBuildDate>
    <atom:link href="https://xiahualiu.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello World</title>
      <link>https://xiahualiu.github.io/posts/hello-world/</link>
      <pubDate>Sat, 21 Dec 2019 15:02:54 -0500</pubDate>
      <guid>https://xiahualiu.github.io/posts/hello-world/</guid>
      <description>&lt;p&gt;This is the test post for hugo.&lt;/p&gt;
&lt;p&gt;Equation:&lt;/p&gt;
&lt;p&gt;$$ x=a^2+b^2 $$&lt;/p&gt;
&lt;p&gt;Chinese test:&lt;/p&gt;
&lt;p&gt;先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。&lt;/p&gt;</description>
    </item>
    <item>
      <title>S32K144EVB的学习历程（七）SPI</title>
      <link>https://xiahualiu.github.io/posts/2017-10-20-s32k144_7/</link>
      <pubDate>Fri, 20 Oct 2017 10:48:30 +0000</pubDate>
      <guid>https://xiahualiu.github.io/posts/2017-10-20-s32k144_7/</guid>
      <description>&lt;p&gt;本节针对了我在工程上需要亟待着手解决的一个方面也就是使用外接 SPI 网卡进行高速传输的一个问题，在这里打算进行仔细的解读一下有关 SPI 协议使用的部分。但是还是老样子，我们根据例程进行分析相关的寄存器和使用方法。&lt;/p&gt;
&lt;p&gt;本例程来自 NXP 官方给出的 AN5413 Cookbook 上面的程序。&lt;/p&gt;
&lt;h3 id=&#34;heading&#34;&gt;介绍&lt;/h3&gt;
&lt;p&gt;这是一个简单的 LPSPI 程序在执行过程中使用了 FIFO 可以有效提高吞吐量。经过初始化，一个 16-bit 的帧将会以 1Mbps 的速度进行传输。在这里使用了软件上下拉标志位进行读取，而不是使用中断和 DMA。&lt;/p&gt;
&lt;p&gt;S32K144 评估板使用 LPSPI 的说明：在例程中使用了 LPSPI1 和外部芯片选择 3，链接在 MC33903 或者是 UGA1169TK/F 这两个 SBC(System Basis Chip) 芯片上面(默认是使用前者)，如果这个芯片收到数据被激活后，会返回一个 Reading Status Register 的值，我们就可以知道我们在 LPSPI 上的数据是否被发送到。为了给这个 SBC 供电，必须要连接一个 12V 的电源供应到 EVB 并且连接 1-2 管脚在 J107 跳线部分。在这个时候仍旧可以使用一个 USB 连接在 EVB 上面以允许 EVB 调试功能开启。如果 SBC 没有被供电的话，所有的 LPSPI 收到的数据都会是 0。&lt;/p&gt;
&lt;p&gt;使用 LPSPI1 要首先在 PCC 中选择时钟，然后根据 择的时钟进行分频，波特率计算，在 LPSPI1 中有两个 FIFO 寄存器，分别管理输入和输出队列。LPSPI 下方有一个 SBC 芯片，用作 Slave 器件，接收来自 LPSPI1 的数据。&lt;/p&gt;
&lt;h3 id=&#34;heading-1&#34;&gt;设计流程：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;关狗&lt;/li&gt;
&lt;li&gt;系统时钟设置：初始化 SOSC 为 8MHz，系统时钟为 80MHz，RUN 模式为 80MHz&lt;/li&gt;
&lt;li&gt;初始化 LPSPI1：
&lt;ul&gt;
&lt;li&gt;模块控制：
&lt;ul&gt;
&lt;li&gt;关闭模块以允许设置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设置 LPSPI1 为主机(Master)：&lt;/li&gt;
&lt;li&gt;初始化时钟所需要的配置为 10MHz 为预分频功能时钟(100 微秒周期)
&lt;ul&gt;
&lt;li&gt;预分频功能时钟的频率 = 功能性时钟 / 预分频因子 = 40MHz/4 = 10MHz&lt;/li&gt;
&lt;li&gt;SCK 波特率 = (Functional clock / PRESCALE) / (SCKDIV+2) = (40 MHz / 4) / (8 + 2) = 10 MHz / 10 = 1 MHz&lt;/li&gt;
&lt;li&gt;SCK 和 PCS 间隔 = 5 prescaled functional clocks = 50 nesc&lt;/li&gt;
&lt;li&gt;PCS 和 CSK 间隔 = 10 prescaled functional clocks = 1 usec&lt;/li&gt;
&lt;li&gt;相邻两次传输的时间间隔 = 10 prescaled functional clocks = 1 usec&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FIFO 控制
&lt;ul&gt;
&lt;li&gt;RxFIFO: Receive Data Flag (RDF) 接收数据标志位 置位，当 FIFO&amp;gt;0&lt;/li&gt;
&lt;li&gt;TxFIFO: Transmit Data Flag (TDF) 发送数据标志位 置位，当 FIFO&amp;lt;=3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设置发送命令（可以使用一些其他的设置在这里，例如使用不同的片选信号和每帧字节）
&lt;ul&gt;
&lt;li&gt;预分频因子为 8，(80 MHz / 8 = 10 MHz 预分频时钟)&lt;/li&gt;
&lt;li&gt;帧长度 = 16 bits&lt;/li&gt;
&lt;li&gt;PCS3 被用作片选信号&lt;/li&gt;
&lt;li&gt;SCK 极性为 Active Low&lt;/li&gt;
&lt;li&gt;相位：数据在 SCK 前沿改变，在后沿捕获&lt;/li&gt;
&lt;li&gt;MSB 首先（最高位先发），字节交换关闭，连续传输关闭&lt;/li&gt;
&lt;li&gt;单位宽度传送&lt;/li&gt;
&lt;li&gt;正常的 FIFO 配置：收到的数据在 Rx FIFO，发送的数据在 Tx FIFO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块使能
&lt;ul&gt;
&lt;li&gt;使能模块，包括在调试模式和 DOZE 模式中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初始化 PORT 管脚给 LPSPI1&lt;/li&gt;
&lt;li&gt;循环：
&lt;ul&gt;
&lt;li&gt;等待 TDF 置位（示意 Tx FIFO 可用），然后写入一帧到 Tx FIFO 并且清除 TDF&lt;/li&gt;
&lt;li&gt;等待 RDF 置位（示意接收到数据），然后读取一帧并且清楚 RDF&lt;/li&gt;
&lt;li&gt;减少 counter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;heading-2&#34;&gt;代码&lt;/h3&gt;
&lt;p&gt;为了减少大家的阅读疲劳，这次仅仅挑出几个与本此 LPSPI 配置较为密切的寄存器以供大家学习。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PORT_init&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCCn[PCC_PORTB_INDEX ]&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;PCC_PCCn_CGC_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clock for PORTB */&lt;/span&gt;
PORTB&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCR[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;PORT_PCR_MUX(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* Port B14: MUX = ALT3, LPSPI1_SCK */&lt;/span&gt;
PORTB&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCR[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;PORT_PCR_MUX(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* Port B15: MUX = ALT3, LPSPI1_SIN */&lt;/span&gt;
PORTB&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCR[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;PORT_PCR_MUX(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* Port B16: MUX = ALT3, LPSPI1_SOUT */&lt;/span&gt;
PORTB&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCR[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;PORT_PCR_MUX(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* Port B17: MUX = ALT3, LPSPI1_PCS3 */&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个是设置 PORT MUX 的，如果这个看不懂的话可以从我的 S32K 第一节的 hello world 例程开始看起。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LPSPI1_init_master&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCCn[PCC_LPSPI1_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Disable clocks to modify PCS ( default) */&lt;/span&gt;
PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCCn[PCC_LPSPI1_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC6000000&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable PCS=SPLL_DIV2 (40 MHz func&amp;#39;l clock) */&lt;/span&gt;
LPSPI1&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Disable module for configuration */&lt;/span&gt;
LPSPI1&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;IER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Interrupts not used */&lt;/span&gt;
LPSPI1&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;DER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* DMA not used */&lt;/span&gt;
LPSPI1&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CFGR0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Defaults: */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* RDM0=0: rec&amp;#39;d data to FIFO as normal */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* CIRFIFO=0; Circular FIFO is disabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* HRSEL, HRPOL, HREN=0: Host request disabled */&lt;/span&gt;
LPSPI1&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CFGR1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000001&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Configurations: master mode*/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* PCSCFG=0: PCS[3:2] are enabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* OUTCFG=0: Output data retains last value when CS negated */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* PINCFG=0: SIN is input, SOUT is output */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* MATCFG=0: Match disabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* PCSPOL=0: PCS is active low */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* NOSTALL=0: Stall if Tx FIFO empty or Rx FIFO full */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* AUTOPCS=0: does not apply for master mode */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* SAMPLE=0: input data sampled on SCK edge */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* MASTER=1: Master mode */&lt;/span&gt;
LPSPI1&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5300000F&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Transmit cmd: PCS3, 16bits, prescale func&amp;#39;l clk by 4. */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* CPOL=0: SCK inactive state is low */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* CPHA=1: Change data on SCK lead&amp;#39;g, capture on trail&amp;#39;g edge*/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* PRESCALE=2: Functional clock divided by 2**2 = 4 */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* PCS=3: Transfer using PCS3 */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* LSBF=0: Data is transferred MSB first */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* BYSW=0: Byte swap disabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* CONT, CONTC=0: Continuous transfer disabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* RXMSK=0: Normal transfer: rx data stored in rx FIFO */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* TXMSK=0: Normal transfer: data loaded from tx FIFO */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* WIDTH=0: Single bit transfer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* FRAMESZ=15: # bits in frame = 15+1=16 */&lt;/span&gt;
LPSPI1&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CCR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04090808&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Clk dividers based on prescaled func&amp;#39;l clk of 100 nsec */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* SCKPCS=4: SCK to PCS delay = 4+1 = 5 (500 nsec) */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* PCSSCK=4: PCS to SCK delay = 9+1 = 10 (1 usec) */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* DBT=8: Delay between Transfers = 8+2 = 10 (1 usec) */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* SCKDIV=8: SCK divider =8+2 = 10 (1 usec: 1 MHz baud rate) */&lt;/span&gt;
LPSPI1&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;FCR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000003&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* RXWATER=0: Rx flags set when Rx FIFO &amp;gt;0 */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* TXWATER=3: Tx flags set when Tx FIFO &amp;lt;= 3 */&lt;/span&gt;
LPSPI1&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000009&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable module for operation */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* DBGEN=1: module enabled in debug mode */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* DOZEN=0: module enabled in Doze mode */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* RST=0: Master logic not reset */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* MEN=1: Module is enabled */&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个就是 LPSPI 的主要设置内容了，里面的东西虽然繁杂，但是都需要一点点全部啃透了才能算理解，因为在工程中遇到的 SPI 协议有很多不同的设置，包括数据的捕获方式和片选方式，如果到时候还要查数据手册会大大降低效率。&lt;/p&gt;
&lt;p&gt;我们就详细的从最开始的 S32K144 LPSPI 模块的基本特性开始介绍：&lt;/p&gt;
&lt;h3 id=&#34;lpspi-&#34;&gt;LPSPI 特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Command/transmit FIFO 长度为 4 个 dwords (1 dword = 32 bits)&lt;/li&gt;
&lt;li&gt;Receive FIFO 为 4 个 words (1 dword = 32 bits)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;主机输出请求 (Host request input)&amp;rdquo; 可以被用于控制 SPI 总线传输起始时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lpspi--1&#34;&gt;LPSPI 结构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://xiahualiu.github.io/img/2017-10-20-S32K144_7/LPSPI.png&#34; alt=&#34;LPSPI.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;lpspi--2&#34;&gt;LPSPI 工作模式&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Chip Mode&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;LPSPI Operation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Run&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;正常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Stop/Wait&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;能够继续运行如果 &lt;code&gt;Doze Enable&lt;/code&gt; 置 0 &lt;!-- raw HTML omitted --&gt;并且 LPSPI 使用一个能够保持运行的时钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Low Leakage Stop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Doze Enable&lt;/code&gt; 被忽视，LPSPI 等待当前的传送任务完成&lt;!-- raw HTML omitted --&gt; 然后进入该模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Debug&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;能够继续运行如果 &lt;code&gt;Debug Enable&lt;/code&gt; 位被置位&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;heading-3&#34;&gt;用到的寄存器&lt;/h3&gt;
&lt;p&gt;由于实在太多了，大部分寄存器都是状态寄存器，所以就直接介绍一下设置寄存器，对于状态寄存器我们一概而过。&lt;/p&gt;
&lt;h3 id=&#34;control-register-lpspix-cr&#34;&gt;Control Register (LPSPIx_CR)&lt;/h3&gt;
&lt;p&gt;包含一些基本的寄存器操作。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RRF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Reset Receive FIFO&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;0 没有作用&lt;!-- raw HTML omitted --&gt;1 Rx FIFO 被清空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RTF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Reset Transmit FIFO&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;0 没有作用&lt;!-- raw HTML omitted --&gt;1 Tx FIFO 被清空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DBGEN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Debug Enable&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;0 模块在 Debug 模式下关闭&lt;!-- raw HTML omitted --&gt;1 模块在 Debug 模式下开启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DOZEN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Doze mode enable&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;0 模块在 Doze 模式下关闭&lt;!-- raw HTML omitted --&gt;1 模块在 Doze 模式下开启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RST&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Software Reset&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;重置所有的 SPI 内部寄存器（除了 CR）&lt;!-- raw HTML omitted --&gt;保持置位直到被软件清零&lt;!-- raw HTML omitted --&gt;0 不重置&lt;!-- raw HTML omitted --&gt;1 重置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;MEN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Module Enable&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;0 不使能&lt;!-- raw HTML omitted --&gt;1 使能模块&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;status-register-lpspix-sr&#34;&gt;Status Register (LPSPIx_SR)&lt;/h3&gt;
&lt;p&gt;状态显示寄存器。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;MBF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Module Busy Flag&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;0 LPSPI 空闲&lt;!-- raw HTML omitted --&gt;1 LPSPI 忙碌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DMF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Data Match Flag&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;指示接收的数据是否有和 MATCFG 寄存器中设置的一致&lt;!-- raw HTML omitted --&gt;0 LPSPI 未接收到匹配数据&lt;!-- raw HTML omitted --&gt;1 LPSPI 已经接收到匹配数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;REF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Receive Error Flag&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;指示 Rx FIFO overflow&lt;!-- raw HTML omitted --&gt;0 Rx FIFO 没有溢出&lt;!-- raw HTML omitted --&gt;1 Rx FIFO 溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TEF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Transmit Error Flag&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;指示 Tx FIFO underrun&lt;!-- raw HTML omitted --&gt;0 Tx FIFO 没有 underrun&lt;!-- raw HTML omitted --&gt;1 Rx FIFO 发生 underrun&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TCF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Transfer Complete Flag&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;0 所有传输完成&lt;!-- raw HTML omitted --&gt;1 传输未完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FCF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Frame Complete Flag&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;0 当前接收/发送帧未传送完&lt;!-- raw HTML omitted --&gt;1 当前接收/发送帧已传送完&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;WCF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Word Complete Flag&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;0 当前接收/发送字未传送完&lt;!-- raw HTML omitted --&gt;1 当前接收/发送字已传送完&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RDF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Receive Data Flag&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;当 Rx FIFO中字多于 RXWATER 时置位&lt;!-- raw HTML omitted --&gt;0 接收数据准备好&lt;!-- raw HTML omitted --&gt;1 接收数据未准备好&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TDF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Transmit Data Flag&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;当 Tx FIFO中字少于 TXWATER 时置位&lt;!-- raw HTML omitted --&gt;0 发送数据未准备好&lt;!-- raw HTML omitted --&gt;1 请求发送数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;interrupt-enable-register-lpspix-ier&#34;&gt;Interrupt Enable Register (LPSPIx_IER)&lt;/h3&gt;
&lt;p&gt;中断使能寄存器。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DMIE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Data Match Interrupt Enable&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DMIE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Receive Error Interrupt Enable&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TEIE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Transmit Error Interrupt Enable&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TCIE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Transfer Complete Interrupt Enable&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TEIE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Transmit Error Interrupt Enable&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;WCIE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Word Complete Interrupt Enable&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RDIE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Receive Data Interrupt Enable&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TDIE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Transmit Data Interrupt Enable&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;dma-enable-register-lpspix-der&#34;&gt;DMA Enable Register (LPSPIx_DER)&lt;/h3&gt;
&lt;p&gt;DMA 使能寄存器。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RDDE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Receive Data DMA Enable&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TDDE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Transmit Data DMA Enable&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;configuration-register-0-lpspix-cfgr0&#34;&gt;Configuration Register 0 (LPSPIx_CFGR0)&lt;/h3&gt;
&lt;p&gt;这个是一些基本的 SPI 设置，看到 0 了么，说明后面还有很多&amp;hellip;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RDMO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Receive Data Match Only&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;0 正常存取接收的数据到 FIFO &lt;!-- raw HTML omitted --&gt;1 如果接收的数据不是匹配数据就丢弃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CIRFIFO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Circular FIFO Enable&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;开启后当 Tx FIFO 清空后会回复原状循环发送&lt;!-- raw HTML omitted --&gt;0 关闭循环发送&lt;!-- raw HTML omitted --&gt;1 开启循环发送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;HRSEL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Host Request Select&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;0 Host request 输入是 LPSPI_HREQ 管脚&lt;!-- raw HTML omitted --&gt;1 Host request 输入是触发器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;HRPOL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Host Request Polarity&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;0 Active low&lt;!-- raw HTML omitted --&gt;1 Active high&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;HREN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Host Request Enable&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;当在主机模式下的时候&lt;!-- raw HTML omitted --&gt;LPSPI 只会当收到 host request 后发送数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;configuration-register-1-lpspix-cfgr1&#34;&gt;Configuration Register 1 (LPSPIx_CFGR1)&lt;/h3&gt;
&lt;p&gt;这个寄存器应当在 LPSPI 关闭的时候进行写入。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;27&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PCSCFG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Peripheral Chip Select Configuration&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;如果在使用 4-bit 传输，此位必须置位&lt;!-- raw HTML omitted --&gt;0 PCS[3:2] 启用 &lt;!-- raw HTML omitted --&gt;1 PCS[3:2] 禁用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;OUTCFG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Output Config&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;设置如果片选为无效态的话输出数据 &lt;!-- raw HTML omitted --&gt;0 输出的数据保留最后&lt;!-- raw HTML omitted --&gt;1 输出的数据是三态的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;25-24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PINCFG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Pin Configuration&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;00 SIN 输入数据 SOUT 输出数据&lt;!-- raw HTML omitted --&gt;01 SOUT 既输入也输出&lt;!-- raw HTML omitted --&gt;10 SDI 既输入也输出&lt;!-- raw HTML omitted --&gt;11 SIN 输出数据 SOUT 输入数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;18-16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;MATCFG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Match Configuration&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;设置能够引起 DMF 置位的情况&lt;!-- raw HTML omitted --&gt;000 Match disabled&lt;!-- raw HTML omitted --&gt;010 Match 启用 (第一个数据字和 MATCH0 或者 MATCH1 一致)&lt;!-- raw HTML omitted --&gt;011 Match 启用 (任何数据字和 MATCH0 或者 MATCH1 一致)&lt;!-- raw HTML omitted --&gt;100 Match 启用 (第一个数据字和 MATCH0 且 第二个和 MATCH1 一致)&lt;!-- raw HTML omitted --&gt;101 Match 启用 (任何数据字和 MATCH0 且 下一个和 MATCH1 一致)&lt;!-- raw HTML omitted --&gt;110 Match 启用 (第一个数据字和 MATCH0 按位与 和 MATCH0 和 MATCH1 按位与一致)&lt;!-- raw HTML omitted --&gt;111 Match 启用 (任何数据字和 MATCH0 按位与 和 MATCH0 和 MATCH1 按位与一致)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;11-8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PCSPOL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Peripheral Chip Select Polarity&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;0 PCSx active low&lt;!-- raw HTML omitted --&gt;1 PCSx active high&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NOSTALL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;NO STALL&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;当 Tx FIFO 为空或者 Rx FIFO 为满时通常会停止&lt;!-- raw HTML omitted --&gt;0 停止&lt;!-- raw HTML omitted --&gt;1 不停止&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;AUTOPCS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Automatic PCS&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;自动被片选，主机模式下无效&lt;!-- raw HTML omitted --&gt;0 禁用&lt;!-- raw HTML omitted --&gt;1 启用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SAMPLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Sample Point&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;0 Input data sampled on SCK edge.&lt;!-- raw HTML omitted --&gt;0 禁用&lt;!-- raw HTML omitted --&gt;1 Input data sampled on delayed SCK edge&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;MASTER&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Master Mode&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;0 Slave mode&lt;!-- raw HTML omitted --&gt;1 Master mode&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;data-match-register-01-lpspix-dmr01&#34;&gt;Data Match Register 0/1 (LPSPIx_DMR0/1)&lt;/h3&gt;
&lt;p&gt;之前说的 匹配值 寄存器，有两个分别是 0/1。&lt;/p&gt;
&lt;h3 id=&#34;clock-configuration-register-lpspix-ccr&#34;&gt;Clock Configuration Register (LPSPIx_CCR)&lt;/h3&gt;
&lt;p&gt;一些与时序有关的设置。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;31-24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SCKPCS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;SCK to PCS Delay&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;主机模式下的最后一个 SCK 沿和 PCS 无效态的延时&lt;!-- raw HTML omitted --&gt;Delay=(SCKPCS+1)*波特率时钟周期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;23-16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PCSSCK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;PCS to SCK Delay&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;主机模式下的 PCS 有效态和 第一个 SCK 沿的延时&lt;!-- raw HTML omitted --&gt;Delay=(PCSSCK+1)*波特率时钟周期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;15-8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DBT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Delay Between Transfers&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;PCS 无效态到下个有效态的间隔&lt;!-- raw HTML omitted --&gt;Delay=(DBT+2)*波特率时钟周期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7-0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SCKDIV&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;SCK Divider&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;设置 SCK 的分频时钟&lt;!-- raw HTML omitted --&gt;Divider=(SCKDIV+2)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;fifo-control-register-lpspix-fcr&#34;&gt;FIFO Control Register (LPSPIx_FCR)&lt;/h3&gt;
&lt;p&gt;控制 FIFO 的准备标志位。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;23-16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RXWATER&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Receive FIFO Watermark&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;当 Rx FIFO 中装的字多于这个值就会使 RDF(Receive Data Flag) 置位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7-0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TXWATER&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Transmit FIFO Watermark&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;当 Tx FIFO 中装的字少于这个值就会使 TDF(Transmit Data Flag) 置位&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;transmit-command-register-lpspix-tcr&#34;&gt;Transmit Command Register (LPSPIx_TCR)&lt;/h3&gt;
&lt;p&gt;重头戏，这个寄存器控制发送数据的过程。这个叫做发送命令寄存器，好玩的是里面存的都是命令，当你写入命令的时候，这个命令会像数据一样被存入 Tx FIFO，当它被顶置到 FIFO 顶的时候，一般的数据帧会被发送出去，但它不会发送，相反的是，它会改变后续的发送数据的属性，这个特性使 LPSPI 可以在保持发送不断的情况下改变发送的属性（譬如片选和长度）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;31&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CPOL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Clock Polarity&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;0 不活跃 SCK 为 low&lt;!-- raw HTML omitted --&gt;1 不活跃 SCK 为 high&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;30&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CPHA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Clock Phase&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;0 数据在前沿捕获在后沿改变&lt;!-- raw HTML omitted --&gt;1 数据在后沿捕获在前沿改变&lt;!-- raw HTML omitted --&gt;&lt;em&gt;前沿是指从不活跃到活跃的跳变沿&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;29-27&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PRESCALE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Prescaler Value&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;预分频时钟&lt;!-- raw HTML omitted --&gt;分频因子=2^(&lt;code&gt;PRESCALE&lt;/code&gt;+1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;25-24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PCS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Peripheral Chip Select&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;片选&lt;!-- raw HTML omitted --&gt;使用 PCS[&lt;code&gt;PCS&lt;/code&gt;]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;LSBF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;LSB First&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;定义发送数据的排序方式&lt;!-- raw HTML omitted --&gt;0 MSB 高字节优先&lt;!-- raw HTML omitted --&gt;1 LSB 低字节优先&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;22&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;BYSW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Byte Swap&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;内容置换，开启后将[31:24]和[7:0]互换，[23:16]与[15:8]互换&lt;!-- raw HTML omitted --&gt;0 内容置换关闭&lt;!-- raw HTML omitted --&gt;1 内容置换开启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CONT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Continuous Transfer&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;开启后一直保持 PCS 有效&lt;!-- raw HTML omitted --&gt;0 开启&lt;!-- raw HTML omitted --&gt;1 关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;20&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CONTC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Continuing Command&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;这个是开启了 &lt;code&gt;CONT=1&lt;/code&gt; 后如果想要改变属性用的&lt;!-- raw HTML omitted --&gt;下一个命令必须和上一个命令规定的数据帧长度一样，并且将此位置 1&lt;!-- raw HTML omitted --&gt;0 开启一个新的传输过程&lt;!-- raw HTML omitted --&gt;1 继续不间断传输&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;19&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RXMSK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Receive Data Mask&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;开启后不将接收到的数据存入FIFO&lt;!-- raw HTML omitted --&gt;0 禁用&lt;!-- raw HTML omitted --&gt;1 开启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TXMSK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Transmit Data Mask&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;开启后不能发送数据&lt;!-- raw HTML omitted --&gt;0 禁用&lt;!-- raw HTML omitted --&gt;1 开启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;17-16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;WIDTH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Transfer Width&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;传输的位宽&lt;!-- raw HTML omitted --&gt;00 单位传输&lt;!-- raw HTML omitted --&gt;01 两位传输&lt;!-- raw HTML omitted --&gt;10 四位传输&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;11-0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FRAMESZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Frame Size&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;帧的长度&lt;!-- raw HTML omitted --&gt;帧的长度=(&lt;code&gt;FRAMESZ&lt;/code&gt;+1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;transmit-data-register-lpspix-tdr&#34;&gt;Transmit Data Register (LPSPIx_TDR)&lt;/h3&gt;
&lt;p&gt;32-bit 发送寄存器，当发送的数据不够 32 位时用 0 补齐。&lt;/p&gt;
&lt;p&gt;还有一些乱七八糟的寄存器像是 RDR 什么的，都和上面的类似，很好理解，就没有再给出了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>S32K144EVB的学习历程（六）DMA</title>
      <link>https://xiahualiu.github.io/posts/2017-10-19-s32k144_6/</link>
      <pubDate>Thu, 19 Oct 2017 16:20:30 +0000</pubDate>
      <guid>https://xiahualiu.github.io/posts/2017-10-19-s32k144_6/</guid>
      <description>&lt;p&gt;这一节的内容是根据对于例程的探索，了解 S32K 上的 DMA 功能的使用方法。&lt;/p&gt;
&lt;h3 id=&#34;heading&#34;&gt;本章的代码涉及的内容:&lt;/h3&gt;
&lt;p&gt;首先介绍一下，DMA 的主要结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiahualiu.github.io/img/2017-10-19-S32K144_6/DMA_layout.png&#34; alt=&#34;DMA_layout.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;本程序将初始化一个 eDMA 通道的 Transfer Control Descriptor (TCD) 传输一个字符串 &lt;code&gt;“Hello world”&lt;/code&gt; 从向量 SRAM 空间到特定的 RAM 地址。这个过程仿真了一个常见的 DMA 使用过程，将一串数据或者命令写入外围的寄存器，这个例程的目的是说明如何创建一个 DMA 传输过程。&lt;/p&gt;
&lt;p&gt;当使用外围元件和 DMA 进行交流的时候，需要设置 DMA MUX，对应的外围元件号在 RM 附录中可以查询到，当然在软件触发的传输过程中，不需要 DMA MUX 的设置。&lt;/p&gt;
&lt;p&gt;中断过程在这个例子中并没有使用，但是在常见的传输过程中，是非常有用的特别是当传输结束后或者进行中进行操作。其中的一个使用例子就是使用 ADC 之类的外围元件，在转换完成后产生于一个 DMA 请求，DMA 控制器就可以自动将转换结果传输至 SRAM。当经过了一段时间的传输之后，DMA 会产生中断通知 CPU 对于传输的数据进行操作。&lt;/p&gt;
&lt;p&gt;当然还有更高级的使用方法，例如 Channel linking 和 Scatter-Gather (SGA)，能够使一个 DMA 请求完成不同的传输任务，或者是使用不同的 TCD 针对每一个 DMA 请求，这些强大的特性可以使外围实现类似状态机器类型的子系统，一个输入的信号可以传输不同的数据，用于同时初始化多个外围元件。Minor loop mapping 一般不在 MCU 的层面上进行使用，但是在图像的 45° 旋转中非常有用。下面会介绍到这个功能。&lt;/p&gt;
&lt;p&gt;因为没有外围的元件参与这个例子，自动的 DMA 握手不会发生。相反的，这里使用的软件握手需要一些额外的设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发起一个 DMA 服务请求（将需要传输通道的 START 位置位）&lt;/li&gt;
&lt;li&gt;等待局部传输完毕&lt;/li&gt;
&lt;li&gt;重复以上的两个步骤直到主环循环结束&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个步骤比较麻烦，因为一次就传输一个字节，但是在使用外部元件的时候，软件并不需要完成以上的步骤，他们是被硬件自动完成的。&lt;/p&gt;
&lt;p&gt;START 位在一般情况下是被外围的元件请求服务置位的。只要 DMA 处理引擎在通道激活，ACTIVE 位就会被置位，如果 DMA 在忙碌的时候，清零 START 可以终止传输过程，再检查一遍 ACTIVE 确认没有服务正在执行。&lt;/p&gt;
&lt;p&gt;作为一个小的练习，TCD 可以被修改，所以如果想让目标地址是一个向量而不是一个字节地址。可以声明目标地址是一个数组并且修改 &lt;code&gt;DOFF=1&lt;/code&gt; 目标地址偏移量达到。&lt;/p&gt;
&lt;p&gt;再来说一下 TCD(DMA Transfer Control Descriptor) 是什么，TCD 就像是一个 DMA 任务说明，他控制被传输的数据和传输的过程，每一个 TCD 占据 8 个 32-bit 的位置在内存里面，并且具有以下的结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiahualiu.github.io/img/2017-10-19-S32K144_6/TCD.png&#34; alt=&#34;TCD.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;他的初始化方法有：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiahualiu.github.io/img/2017-10-19-S32K144_6/TCD_init.png&#34; alt=&#34;TCD_init.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;可见使用 DMA 是多么的复杂。:sweat_smile:
不要觉得沮丧，其实上面这个图根本就不用详细了解。看完本篇文章你就知道了所有的 TCD 和 DMA 寄存器的设置，等到那个时候再看这个图就觉得简单了。&lt;/p&gt;
&lt;h3 id=&#34;heading-1&#34;&gt;步骤：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;关狗&lt;/li&gt;
&lt;li&gt;系统时钟设置， SOSC 8MHz，SYSCLK 80MHz，RUN mode&lt;/li&gt;
&lt;li&gt;初始化 DMA 控制器：
&lt;ul&gt;
&lt;li&gt;开启时钟到 DMA MUX 模块（其实在软件模拟中并不需要因为我们手动写入了 START 位）&lt;/li&gt;
&lt;li&gt;开启需要的通道（软件模拟中并不需要，因为我们手动写入了 START 位）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初始化 DMA TCD（在这里只用到了 TCD0 也就是通道 0 对应的 TCD）：
&lt;ul&gt;
&lt;li&gt;数据来源
&lt;ul&gt;
&lt;li&gt;Source address (SADDR): Use address of a string “Hello World”&lt;/li&gt;
&lt;li&gt;Source offset (SOFF): Increment source address by 1 byte for each transfer&lt;/li&gt;
&lt;li&gt;Source modulo (SMOD): Feature not used here&lt;/li&gt;
&lt;li&gt;Source size (SSIZE): Read 1 byte at a time&lt;/li&gt;
&lt;li&gt;Source last address adjustment (SLAST): Decrement source address by 11 after major loop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目标
&lt;ul&gt;
&lt;li&gt;Destination address (DADDR): Use address of a single byte&lt;/li&gt;
&lt;li&gt;Destination offset (DOFF): Do not add offset to destination address after minor loop&lt;/li&gt;
&lt;li&gt;Destination modulo (DMOD): Feature not used here&lt;/li&gt;
&lt;li&gt;Destination size (DSIZE): Write 1 byte at a time&lt;/li&gt;
&lt;li&gt;Destination last address adjustment (DLAST): Do not adjust address after major loop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每个 DMA 请求的传送字节数（minor lopps）
&lt;ul&gt;
&lt;li&gt;Number of bytes to be transferred per DMA request (NBYTES): One byte&lt;/li&gt;
&lt;li&gt;Number of iterations/minor loops in major loop (CITER and BITER): 11&lt;/li&gt;
&lt;li&gt;Channel to channel linking for additional iterations after minor loop (BITER ELINK and CITER ELINK): Disabled&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制与状态
&lt;ul&gt;
&lt;li&gt;Disable channel after major loop completes (DREQ): Disable channel&lt;/li&gt;
&lt;li&gt;Generate interrupt request half way through major loop (INTHALF): Disabled&lt;/li&gt;
&lt;li&gt;Generate interrupt request after completing major loop (INTMAJOR): Disabled&lt;/li&gt;
&lt;li&gt;Enable Scatter-Gather (ESG): Disabled. No other TCDs loaded to channel&lt;/li&gt;
&lt;li&gt;Enable channel link after major loop (MAJORLINK): Disabled&lt;/li&gt;
&lt;li&gt;Channel link number after major loop (MAJORLINKCH): Null - feature disabled&lt;/li&gt;
&lt;li&gt;Band Width Control (BWC): Set to 0 so there are no stalls after R/W&lt;/li&gt;
&lt;li&gt;Clear initial values of status flags (START, ACTIVE, DONE): Set to zero&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开启第一个传输过程（置 START 为 1），等待传输完成（START=0，ACTIVE=0）&lt;/li&gt;
&lt;li&gt;循环：当通道的 DONE 未置位：
&lt;ul&gt;
&lt;li&gt;开始下一个传输（置 START 为 1），等待传输完成（START=0，ACTIVE=0）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;清空频道的 DONE 状态位&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;heading-2&#34;&gt;代码&lt;/h3&gt;
&lt;h5 id=&#34;mainc&#34;&gt;main.c&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;S32K144.h&amp;#34; /* Include peripheral declarations S32K144 */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;dma.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;clocks_and_modes.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WDOG_disable&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;){
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CNT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xD928C520&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Unlock watchdog */&lt;/span&gt;
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TOVAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000FFFF&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Maximum timeout value */&lt;/span&gt;
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002100&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Disable watchdog */&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
WDOG_disable();
SOSC_init_8MHz(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize system oscillator for 8 MHz xtal */&lt;/span&gt;
SPLL_init_160MHz(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize SPLL to 160 MHz with 8 MHz SOSC */&lt;/span&gt;
NormalRUNmode_80MHz(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Init clocks: 80 MHz SPLL &amp;amp; core, 40 MHz bus, 20 MHz flash */&lt;/span&gt;
DMA_init(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Init DMA controller */&lt;/span&gt;
DMA_TCD_init(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Init DMA Transfer Control Descriptor(s) */&lt;/span&gt;
DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SSRT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Set chan 0 START bit to initiate first minor loop */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (((DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].CSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; DMA_TCD_CSR_START_SHIFT) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for START = 0 */&lt;/span&gt;
((DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].CSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; DMA_TCD_CSR_ACTIVE_SHIFT) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) {} &lt;span style=&#34;color:#75715e&#34;&gt;/* and ACTIVE = 0 */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* Now minor loop has completed */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;((DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].CSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; DMA_TCD_CSR_DONE_SHIFT) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) ) { &lt;span style=&#34;color:#75715e&#34;&gt;/* Loop till DONE = 1 */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* Place breakpoint at next instruction &amp;amp; observe expressions TCD0_Source, TCD0_Dest */&lt;/span&gt;
DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SSRT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Set chan 0 START bit to initiate next minor loop */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (((DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].CSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; DMA_TCD_CSR_START_SHIFT) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for START = 0 */&lt;/span&gt;
((DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].CSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; DMA_TCD_CSR_ACTIVE_SHIFT) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) {} &lt;span style=&#34;color:#75715e&#34;&gt;/* and ACTIVE = 0 */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* Now minor loop has completed */&lt;/span&gt;
}
DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].CSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(DMA_TCD_CSR_DONE_MASK); &lt;span style=&#34;color:#75715e&#34;&gt;/* Clear DONE bit */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {} &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait forever */&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;dmac&#34;&gt;DMA.c&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;S32K144.h&amp;#34; /* include peripheral declarations S32K144 */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;dma.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;uint8_t TCD0_Source[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Hello World&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;}; &lt;span style=&#34;color:#75715e&#34;&gt;/* TCD 0 source (11 byte string) */&lt;/span&gt;
uint8_t &lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; TCD0_Dest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* TCD 0 destination (1 byte) */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DMA_init&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
&lt;span style=&#34;color:#75715e&#34;&gt;/* This is an initialization place holder for: */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* 1. Enabling DMA MUX clock PCC_PCCn[PCC_DMAMUX_INDEX] (not needed when START bit used) */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* 2. Enabling desired channels by setting ERQ bit (not needed when START bit used) */&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DMA_TCD_init&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
&lt;span style=&#34;color:#75715e&#34;&gt;/* TCD0: Transfers string to a single memory location */&lt;/span&gt;
DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].SADDR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DMA_TCD_SADDR_SADDR((uint32_t &lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;TCD0_Source); &lt;span style=&#34;color:#75715e&#34;&gt;/* Src */&lt;/span&gt;
DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].SOFF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DMA_TCD_SOFF_SOFF(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* Src addr add 1 byte after transfer*/&lt;/span&gt;
DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].ATTR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DMA_TCD_ATTR_SMOD(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* Src modulo feature not used */&lt;/span&gt;
DMA_TCD_ATTR_SSIZE(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* Src read 2**0 =1 byte per transfer*/&lt;/span&gt;
DMA_TCD_ATTR_DMOD(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* Dest modulo feature not used */&lt;/span&gt;
DMA_TCD_ATTR_DSIZE(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* Dest write 2**0 =1 byte per trans.*/&lt;/span&gt;
DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].NBYTES.MLNO &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DMA_TCD_NBYTES_MLNO_NBYTES(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* Transfer 1 byte /minor loop*/&lt;/span&gt;
DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].SLAST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DMA_TCD_SLAST_SLAST(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* Src addr change after major loop*/&lt;/span&gt;
DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].DADDR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DMA_TCD_DADDR_DADDR((uint32_t &lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;TCD0_Dest);&lt;span style=&#34;color:#75715e&#34;&gt;/* Dest. */&lt;/span&gt;
DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].DOFF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DMA_TCD_DOFF_DOFF(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* No dest adr offset after transfer*/&lt;/span&gt;
DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].CITER.ELINKNO&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DMA_TCD_CITER_ELINKNO_CITER(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* 11 minor loop iterations*/&lt;/span&gt;
DMA_TCD_CITER_ELINKNO_ELINK(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* No minor loop chan link */&lt;/span&gt;
DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].DLASTSGA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DMA_TCD_DLASTSGA_DLASTSGA(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* No dest chg after major loop*/&lt;/span&gt;
DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].CSR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DMA_TCD_CSR_START(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* Clear START status flag */&lt;/span&gt;
DMA_TCD_CSR_INTMAJOR(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* No IRQ after major loop */&lt;/span&gt;
DMA_TCD_CSR_INTHALF(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* No IRQ after 1/2 major loop */&lt;/span&gt;
DMA_TCD_CSR_DREQ(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* Disable chan after major loop*/&lt;/span&gt;
DMA_TCD_CSR_ESG(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* Disable Scatter Gather */&lt;/span&gt;
DMA_TCD_CSR_MAJORELINK(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* No major loop chan link */&lt;/span&gt;
DMA_TCD_CSR_ACTIVE(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* Clear ACTIVE status flag */&lt;/span&gt;
DMA_TCD_CSR_DONE(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* Clear DONE status flag */&lt;/span&gt;
DMA_TCD_CSR_MAJORLINKCH(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* Chan # if major loop ch link */&lt;/span&gt;
DMA_TCD_CSR_BWC(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* No eDMA stalls after R/W */&lt;/span&gt;
DMA&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCD[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].BITER.ELINKNO&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DMA_TCD_BITER_ELINKNO_BITER(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* Initial iteration count*/&lt;/span&gt;
DMA_TCD_BITER_ELINKNO_ELINK(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* No minor loop chan link */&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;哇，这个大家自己对照那个表来看吧，太麻烦了。
DMA 只要发出指令后，CPU 是不需要任何操作的，可以看到在主函数里面有几个空循环等待 DMA 完成。&lt;/p&gt;
&lt;p&gt;DMA 是个大工程，要是想理解的话需要一定的时间，一开始的时候我看这一节很头大，因为需要理解的东西太多了。&lt;/p&gt;
&lt;p&gt;首先先从硬件上的 DMA MUX 开始讲起，DMA MUX 是一个模块，它的作用就是用来路由一共 64 个 DMA 源，也叫做槽，到 16 个 DMA 通道的任意一个位置上面。在进行硬件 DMA 请求的时候，其实请求源是先经过 DMAMUX ，并被映射到 16 个 DMA 通道上面，所以我们要进行 DMA 操作的时候要首先设置 DMAMUX，不然 DMA 请求根本就无法到达 DMA。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiahualiu.github.io/img/2017-10-19-S32K144_6/DMAMUX.png&#34; alt=&#34;DMAMUX.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;dmamux-&#34;&gt;DMAMUX 的工作模式：&lt;/h3&gt;
&lt;h4 id=&#34;heading-3&#34;&gt;关闭模式&lt;/h4&gt;
&lt;p&gt;在这个模式下，DMA 通道是关闭的。因为关闭或者开启 DMA 通道是在修改 DMA 相关寄存器需要首先操作的，所以这个模式主要是用于将一个 DMA 通道的状态修改为默认状态。还有一个用途就是，当你重新设置系统设置时候用于暂时挂起一个 DMA 通道，如你要修改 DMA 触发器周期。&lt;/p&gt;
&lt;h4 id=&#34;heading-4&#34;&gt;正常模式&lt;/h4&gt;
&lt;p&gt;在这种状态下，DMA 源是被路由到特定的 DMA 通道上。在这个模式下的 DMA MUX 的路由功能是自动的，可以视作一个不存在的模块。&lt;/p&gt;
&lt;h4 id=&#34;heading-5&#34;&gt;周期触发模式&lt;/h4&gt;
&lt;p&gt;在这种状态下，DMA 源将会周期性请求一个 DMA 请求，例如是一个接收 Buffer 装满或者是发送 Buffer 已经被清空。&lt;/p&gt;
&lt;p&gt;设置周期是通过修改 LPIT 的寄存器数据进行修改的。这个模式仅仅能够在 0-3 这四个通道进行的。&lt;/p&gt;
&lt;h3 id=&#34;-dmamux&#34;&gt;设置 DMAMUX：&lt;/h3&gt;
&lt;h4 id=&#34;channel-configuration-register-dmamux-chcfgnn0-15&#34;&gt;Channel Configuration register (DMAMUX_CHCFGn)(n=0-15)&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;每一个 DMA 通道都只能单独的对应一个源&lt;/strong&gt;。如果设置多个 CHCFG 寄存器的值对应同一个源的话会导致不可预料的错误，甚至是你将其中相同映射通道关闭还是会导致错误的出现。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ENBL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;DMA Channel Enable&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;通道是能开关&lt;!-- raw HTML omitted --&gt;0 是关闭通道，1 是开启通道&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;TRIG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;DMA Channel Trigger Enable&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;开启周期性开关&lt;!-- raw HTML omitted --&gt;0 关闭周期性开关，通道将会正常开&lt;!-- raw HTML omitted --&gt;1 是开启触发模式，只有当接收到出发的时候，DMA MUX 才会正常工作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;5-0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOURCE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;此位用于设置对应源的序号&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;heading-6&#34;&gt;功能的描述：&lt;/h3&gt;
&lt;p&gt;DMAMUX 的功能是为了提供给系统灵活的 DMA 使用权，通过 DMA 通道。&lt;/p&gt;
&lt;p&gt;DMAMUX 的通道可以划分成为一下的几个类别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通道可以正常的在路由配置下进行路由&lt;/li&gt;
&lt;li&gt;通道只有在触发信号和路由配置下进行路由&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而且 DMAMUX 有两个源地址是常开的，它的作用是一直允许数据传输，这个特性在读写 GPIO 数据，或者是为了保证数据传输速的情况下非常有用。（也可以使用软件激活 DMA 传输，不需要频繁的开关 DMA 通道）&lt;/p&gt;
&lt;h3 id=&#34;-dma-&#34;&gt;使用，控制 DMA 源的过程&lt;/h3&gt;
&lt;h4 id=&#34;heading-7&#34;&gt;使用一个周期性触发的源：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;决定使用哪一个 DMA 源，在这个时候应当注意只有前 4 个通道是周期性通道。&lt;/li&gt;
&lt;li&gt;清空对应通道的 &lt;code&gt;CHCFG[ENBL]&lt;/code&gt; 和 &lt;code&gt;CHCFG[TRIG]&lt;/code&gt;  。&lt;/li&gt;
&lt;li&gt;确定在 DMA 中，相应的通道已经被设置完成，这个时候可以控制开启 DMA 通道。&lt;/li&gt;
&lt;li&gt;设置对应的时钟。&lt;/li&gt;
&lt;li&gt;选择合适的源到 DMA 通道上面去，写入相对应的 &lt;code&gt;CHCFG[ENBL]&lt;/code&gt; 和 &lt;code&gt;CHCFG[TRIG]&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;heading-8&#34;&gt;举个例子以便于大家理解：&lt;/h5&gt;
&lt;p&gt;我们现在要设置 5# 源使用 DMA 通道 1，并且使用周期性触发的功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向 &lt;code&gt;CHCFG1&lt;/code&gt; 写入 0x00&lt;/li&gt;
&lt;li&gt;设置通道 1 在 DMA 设置中，包括开启该通道&lt;/li&gt;
&lt;li&gt;设置一个时钟给所需要的触发间隔&lt;/li&gt;
&lt;li&gt;向 &lt;code&gt;CHCFG1&lt;/code&gt; 写入相应的值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后一步设置 DMAMUX 的代码可以写成如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DMAMUX_Init&lt;/span&gt; (uint8_t DMA_CH, uint8_t DMAMUX_SOURCE)
{
    DMAMUX_0.CHCFG[DMA_CH].B.SOURCE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DMAMUX_SOURCE;
    DMAMUX_0.CHCFG[DMA_CH].B.ENBL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    DMAMUX_0.CHCGF[DMA_CH].B.TRIG &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;heading-9&#34;&gt;使用一个不是周期性触发的通道：&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;决定使用哪一个 DMA 源，在这个时候应当注意只有前 4 个通道是周期性通道。&lt;/li&gt;
&lt;li&gt;清空对应通道的 &lt;code&gt;CHCFG[ENBL]&lt;/code&gt; 和 &lt;code&gt;CHCFG[TRIG]&lt;/code&gt;  。&lt;/li&gt;
&lt;li&gt;确定在 DMA 中，相应的通道已经被设置完成，这个时候可以控制开启 DMA 通道。&lt;/li&gt;
&lt;li&gt;选择合适的源到 DMA 通道上面去，写入相对应的 &lt;code&gt;CHCFG[ENBL]&lt;/code&gt; 和 &lt;code&gt;CHCFG[TRIG]&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;少了一个配置时钟的环节。&lt;/p&gt;
&lt;p&gt;以上是 DMAMUX 也即是 DMA 多路复用器的设置方法，下面我们介绍一下 eDMA(Enhanced Direct Memory Access) 模块，结构功能和使用方法。&lt;/p&gt;
&lt;h3 id=&#34;edma-&#34;&gt;eDMA 组件&lt;/h3&gt;
&lt;p&gt;eDMA 分为两个主要的模块，一个是 eDMA 引擎和 TCD。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiahualiu.github.io/img/2017-10-19-S32K144_6/DMA_module.png&#34; alt=&#34;DMA_module.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;edma--1&#34;&gt;eDMA 工作特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据移动过程涉及到两个地址：从源地址读取数据，写入目标地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可控制的源地址和目标地址和传输数据大小&lt;/li&gt;
&lt;li&gt;支持加强的地址模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;16 通道执行器，可以实现复杂的数据传输&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部数据缓存器，可以暂时储存 16 或者 32 字节的传输&lt;/li&gt;
&lt;li&gt;连接在纵横开关（多端口选择开关）连接在占据总线和数据移动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transfer control descriptor (TCD) 被升级成为支持两种内嵌的深度传输操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一个通道都对应一个 32-byte TCD 储存在内存中&lt;/li&gt;
&lt;li&gt;内部数据传输副循环被定义&lt;/li&gt;
&lt;li&gt;外部数据传输主循环被定义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通道激活通过以下三种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接软件初始化&lt;/li&gt;
&lt;li&gt;通过通道连接机制激活&lt;/li&gt;
&lt;li&gt;外部步进请求硬件激活&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;固定优先级和轮询仲裁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通道数据传输完成后可产生中断请求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个通道一个中断源，可以实现在主循环完成后发起中断&lt;/li&gt;
&lt;li&gt;可编程错误终止，并且产生相应的中断给中断控制器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;dma-&#34;&gt;DMA 工作流程&lt;/h1&gt;
&lt;p&gt;首先，外围设备发出 DMA 请求要求通道 n 提供 DMA 服务。首先是通道激活阶段。 eDMA
请求的输入信号先做 DMA 的内部登记，然后被传送到 eDMA 引擎：首先通过控制模块，然
后进入编程模块进行裁决。下一步，开始根据固定优先级或轮流的方法对 DMA 请求裁决。
裁决完毕，被激活的通道号通过地址路径并被转换成访问内存的地址。下一步， TCD 存储器
被访问，对应的 TCD 描述符被读取并载入到 eDMA 引擎中。&lt;/p&gt;
&lt;h3 id=&#34;edma--2&#34;&gt;eDMA 相关的寄存器！重中之重&lt;/h3&gt;
&lt;p&gt;这个是 eDMA 的一个典型的工作流程，请先保证自己对于副循环和主循环有一个了解在进行寄存器方面的设置
&lt;img src=&#34;https://xiahualiu.github.io/img/2017-10-19-S32K144_6/DMA_process.png&#34; alt=&#34;DMA_process.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;control-register-dma-cr&#34;&gt;Control Register (DMA_CR)&lt;/h4&gt;
&lt;p&gt;这个寄存器定义了一些基本的设置。当写入这个寄存器的时候，请保证 DMA 通道不处于活跃状态。&lt;/p&gt;
&lt;p&gt;在此寄存器可以进行仲裁机制的设置，仲裁机制可以被设置成为使用一个固定的优先级的或者是轮询的方式。当时用轮询方式进行 DMA 仲裁的时候，优先级将会被忽略，按照通道的序号从高到低进行。&lt;/p&gt;
&lt;p&gt;副循环偏移量是指当副循环完成的时候，源地址或者是目标地址的偏移量，这个偏移量如果被开启的状态下，当一次副循环结束，TCD 内目标源地址 &lt;code&gt;TCDn_SADDR&lt;/code&gt; 或者是目标地址 &lt;code&gt;TCDn_DADDR&lt;/code&gt; 亦或是两者，都会在加上一个 minor loop offset (MLOFF) 后被送回内存。&lt;/p&gt;
&lt;p&gt;主循环偏移量，和副循环偏移量基本一致，但是要注意，主循环最后完成的副循环，其设置的副循环偏移量将会被忽视，取而代之的是主循环偏移量。&lt;/p&gt;
&lt;p&gt;其中副循环量就是在该寄存器的 7-EMLM 其中设置 1 开启 Mapping 功能。在一般的操作中，这个功能基本上用不到，但是必须知道，不然没法设置寄存器。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CX&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Cancel Transfer&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;此位写入 1 后将会强行停止通道并且强制副循环结束&lt;!-- raw HTML omitted --&gt;结束后，将会自动清零&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ECX&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Error Cancel Transfer&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;这位的功能和 CX 一致&lt;!-- raw HTML omitted --&gt;DMA 将会视作终止是由于错误产生的&lt;!-- raw HTML omitted --&gt;&lt;code&gt;Error Status register (DMAx_ES)&lt;/code&gt; 将会被置 1 并且可以产生一个中断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;EMLM&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Enable Minor Loop Mapping&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;副循环偏移量使能位&lt;!-- raw HTML omitted --&gt;副循环偏移量使能位，当为 1 的时候，TCDn.word2 会有不同的内容，具体在下边&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CLM&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Continuous Link Mode&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;&lt;strong&gt;注意&lt;/strong&gt;：请不要设置主循环内只有一个副循环的通道成为连续模式&lt;!-- raw HTML omitted --&gt;如果置 1，则副循环结束后，可以不经过通道仲裁再次被激活 &lt;!-- raw HTML omitted --&gt;如果置 0，则副循环结束后，必须在经过一个通道仲裁才可以继续运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;HALT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Halt DMA Operations&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;置 1 后暂停所有新的通道&lt;!-- raw HTML omitted --&gt;执行中的通道将会继续运行至结束 &lt;!-- raw HTML omitted --&gt;再次置 0 可以恢复正常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;HOE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Halt On Error&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;和上边的 HALT 寄存器一致，但是拥有错误属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ERCA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Enable Round Robin Channel Arbitration&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;置 1 允许通道的轮询模式进行仲裁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;EDBG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Enable Debug&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;置 1 后，新的通道请求将会被暂停，直到退出 Debug 模式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;error-status-register-dma-es&#34;&gt;Error Status Register (DMA_ES)&lt;/h4&gt;
&lt;p&gt;错误寄存器，储存各种 DMA 通道错误。我们可以用 OpenSDA 调试查看这个寄存器的值，平时用不到，先不介绍。错误类型一般有 非法 TCD，错误的优先级寄存器，总线读写错误。&lt;/p&gt;
&lt;h4 id=&#34;enable-request-register-dma-erq&#34;&gt;Enable Request Register (DMA_ERQ)&lt;/h4&gt;
&lt;p&gt;这个寄存器控制 16 个通道的请求信号是否被接收。写入这个寄存器中相应的位可以直接控制，也可以通过后续的 &lt;code&gt;DMA_SERQ&lt;/code&gt; 和 &lt;code&gt;DMA_CERQ&lt;/code&gt; 操作寄存器间接影响这个寄存器的值。&lt;/p&gt;
&lt;p&gt;但是如果没有 DMA 请求产生的 DMA 服务（譬如软件控制 DMA）则此位的状态无论如何都可以产生 DMA 服务。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ERQn&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Enable DMA Request n&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;置 1 开启相对应的通道请求接收&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;enable-error-interrupt-register-dma-eei&#34;&gt;Enable Error Interrupt Register (DMA_EEI)&lt;/h4&gt;
&lt;p&gt;这个寄存器控制 16 个通道是否产生错误中断。写入这个寄存器中相应的位可以直接控制，也可以通过后续的 &lt;code&gt;DMA_SEEI&lt;/code&gt; 和 &lt;code&gt;DMA_CEEI&lt;/code&gt; 操作寄存器间接影响这个寄存器的值。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;EEIn&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Enable Error Interrupt n&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;置 1 开启相对应的通道错误中断&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;interrupt-request-register-dma-int&#34;&gt;Interrupt Request Register (DMA_INT)&lt;/h5&gt;
&lt;p&gt;这个寄存器控制各个通道的中断请求是否产生，中断的产生条件是写在对应的通道的 TCD 中，然而在中断产生后，我们需要及时的关闭它，常常在 &lt;code&gt;CINT&lt;/code&gt; 操作寄存器中进行清零操作，在下面我们会介绍很多操作寄存器。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;n&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;INTn&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Interrupt Request n&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;1 目前通道的中断被激活&lt;!-- raw HTML omitted --&gt;0 目前通道中断未激活&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;channel-n-priority-register-dma-dchprin&#34;&gt;Channel n Priority Register (DMA_DCHPRIn)&lt;/h4&gt;
&lt;p&gt;DMA 通道优先级寄存器&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ECP&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Enable Channel Preemption&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;这个是被抢占的开关，也就是置 1 后，该通道会被更高优先级的通道抢断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DPA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Disable Preempt Ability&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;这个是不能抢占的开关，也就是置 1 后，该通道被剥夺抢占低优先级通道的权利&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CHPRI&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Channel n Arbitration Priority&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;这个就是传统意义上的通道优先级了&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;-dma--1&#34;&gt;下面是 DMA 操作寄存器&lt;/h1&gt;
&lt;p&gt;这个寄存器有很多类似的，基本的功能不是 Clear 就是 Set，为什么我称之为操作寄存器就是修改里面的值，带来的结果是对应的配置寄存器的值的改变，其本身不对应配置。&lt;/p&gt;
&lt;h4 id=&#34;clear-enable-error-interrupt-register-dma-ceei&#34;&gt;Clear Enable Error Interrupt Register (DMA_CEEI)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NOP&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;No Op enable&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;置 1 后，该寄存器所有操作均被忽视&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CAFE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Clear All Enable Error Interrupt&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;置 1 后，&lt;code&gt;DMA_EEI&lt;/code&gt; 所有 EEI 位均被清零&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3-0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CEEI&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Clear Enable Error Interrupt&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;在这个域内填写（0-15）将会导致对应的 EEIn 清零&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;set-enable-error-interrupt-register-dma-seei&#34;&gt;Set Enable Error Interrupt Register (DMA_SEEI)&lt;/h4&gt;
&lt;p&gt;和上面的一样，只不过是清零改成置位。&lt;/p&gt;
&lt;h4 id=&#34;clear-enable-request-register-dma-cerq&#34;&gt;Clear Enable Request Register (DMA_CERQ)&lt;/h4&gt;
&lt;p&gt;清零 ERQ 位。&lt;/p&gt;
&lt;h4 id=&#34;set-enable-request-register-dma-serq&#34;&gt;Set Enable Request Register (DMA_SERQ)&lt;/h4&gt;
&lt;p&gt;置位 ERQ 位。&lt;/p&gt;
&lt;h4 id=&#34;clear-done-status-bit-register-dma-cdne&#34;&gt;Clear DONE Status Bit Register (DMA_CDNE)&lt;/h4&gt;
&lt;p&gt;清零通道的 TCD 中的 DONE 位。&lt;/p&gt;
&lt;h4 id=&#34;set-start-bit-register-dma-ssrt&#34;&gt;Set START Bit Register (DMA_SSRT)&lt;/h4&gt;
&lt;p&gt;将通道 TCD 中的 START 位置位。&lt;/p&gt;
&lt;h4 id=&#34;clear-error-register-dma-cerr&#34;&gt;Clear Error Register (DMA_CERR)&lt;/h4&gt;
&lt;p&gt;将通道中的错误寄存器清零。&lt;/p&gt;
&lt;h4 id=&#34;clear-interrupt-request-register-dma-cint&#34;&gt;Clear Interrupt Request Register (DMA_CINT)&lt;/h4&gt;
&lt;p&gt;将通道中的中断请求清零。&lt;/p&gt;
&lt;h2 id=&#34;tcd&#34;&gt;TCD相关寄存器&lt;/h2&gt;
&lt;p&gt;注意，以下寄存器均有 16 个，对应 16 个通道。&lt;/p&gt;
&lt;h3 id=&#34;tcd-source-address-dma-tcdn-saddr&#34;&gt;TCD Source Address (DMA_TCDn_SADDR)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SADDR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Source Address&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;存放指向源数据的地址&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;tcd-signed-source-address-offset-dma-tcdn-soff&#34;&gt;TCD Signed Source Address Offset (DMA_TCDn_SOFF)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOFF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Source address signed offset&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;每次读取源地址后产生的偏移量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;tcd-transfer-attributes-dma-tcdn-attr&#34;&gt;TCD Transfer Attributes (DMA_TCDn_ATTR)&lt;/h3&gt;
&lt;p&gt;这个寄存器只有 16-bit，目的是确认一次性的 DMA 传输多少数据，应该和副循环中的 &lt;code&gt;NBYTES&lt;/code&gt; 区分开，一个副循环内部可能需要多次的读写过程。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;15-11&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SMOD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Source Address Modulo&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;源地址模值 &lt;!-- raw HTML omitted --&gt;SMOD 定义了一个地址范围，该范围可用 2^SMOD 来表示 &lt;!-- raw HTML omitted --&gt;每次传送，也就是内部完成一次读/写 &lt;!-- raw HTML omitted --&gt;下一次读取源地址将从 SADDR+SOFF 开始&lt;!-- raw HTML omitted --&gt;如果这个地址到达了 SMOD 指定的范围，则将从头开始&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;10-8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SSIZE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Source data transfer size&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;源数据读取大小设置 &lt;!-- raw HTML omitted --&gt;000 - 8-bit&lt;!-- raw HTML omitted --&gt;001 - 16-bit&lt;!-- raw HTML omitted --&gt;010 - 32-bit &lt;!-- raw HTML omitted --&gt;011 - Reserved&lt;!-- raw HTML omitted --&gt;100 - 16-byte burst&lt;!-- raw HTML omitted --&gt;101 - 32-byte burst&lt;!-- raw HTML omitted --&gt;110 - Reserved&lt;!-- raw HTML omitted --&gt;111 - Reserved &lt;!-- raw HTML omitted --&gt;（请不要使用保留的值，会导致配置错误）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7-3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DMOD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Destination Address Modulo&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;看上面的 SMOD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2-0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DSIZE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Destination data transfer size&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;看上面的 SSIZE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;tcd-minor-byte-count-minor-loop-mapping-disabled-dma-tcdn-nbytes-mlno&#34;&gt;TCD Minor Byte Count (Minor Loop Mapping Disabled) (DMA_TCDn_NBYTES_MLNO)&lt;/h3&gt;
&lt;p&gt;之前我写了一个有关的，在 &lt;code&gt;DMA_CR.MLME=1&lt;/code&gt; 会改变 TCDn.word2 的改变，这个就是当 &lt;code&gt;DMA_CR.MLME=0&lt;/code&gt;，也即是 Minor Loop Mapping 处于关闭状态下的 NBYTES 寄存器。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NBYTES&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Minor Byte Transfer Count&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 这个寄存器里面的值就是一次副循环的 &lt;strong&gt;字节数&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 在 DMA 传输过程中，副循环是 &lt;strong&gt;最小&lt;/strong&gt; 的数据传输单位&lt;!-- raw HTML omitted --&gt;在主循环传输过程中不可打断&lt;!-- raw HTML omitted --&gt;当一个 DMA 通道被激活后，相关的 TCD 内容将会被加载进 eDMA 引擎中&lt;!-- raw HTML omitted --&gt;经过一段时间的读/写数据，直到传输了 NBYTES 个字节&lt;!-- raw HTML omitted --&gt;此时 一次副循环完成，主循环计数器减一存入 TCD&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;tcd-signed-minor-loop-offset-minor-loop-mapping-enabled-and-offset-disabled-dma-tcdn-nbytes-mloffno&#34;&gt;TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled) (DMA_TCDn_NBYTES_MLOFFNO)&lt;/h3&gt;
&lt;p&gt;这个寄存器的形态条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minor loop mapping 开启 (&lt;code&gt;CR[EMLM] = 1&lt;/code&gt;) 并且&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SMLOE = 0&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;DMLOE = 0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;31&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SMLOE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Source Minor Loop Offset Enable&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 选择是否进行源地址副循环偏移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;30&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DMLOE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Destination Minor Loop Offset enable&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 选择是否进行目标地址副循环偏移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;29-0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NBYTES&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Minor Byte Transfer Count&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 这个寄存器里面的值就是一次主循环的 &lt;strong&gt;字节数&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;tcd-signed-minor-loop-offset-minor-loop-mapping-and-offset-enabled-dma-tcdn-nbytes-mloffyes&#34;&gt;TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled) (DMA_TCDn_NBYTES_MLOFFYES)&lt;/h3&gt;
&lt;p&gt;这个寄存器的形态条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minor loop mapping 开启 (&lt;code&gt;CR[EMLM] = 1&lt;/code&gt;) 并且&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SMLOE = 1&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; &lt;code&gt;DMLOE = 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;31&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SMLOE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Source Minor Loop Offset Enable&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 选择是否进行源地址副循环偏移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;30&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DMLOE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Destination Minor Loop Offset enable&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 选择是否进行目标地址副循环偏移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;29-10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;MLOFF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;拓展副循环偏移量设置&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 这个偏移量是同时作用在源地址和目标地址上的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;9-0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NBYTES&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Minor Byte Transfer Count&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 这个寄存器里面的值就是一次主循环的 &lt;strong&gt;字节数&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意 MLOFF 和 SOFF DOFF 其实是一样功能的，只是 MLOFF 设置后会在副循环完成的时候叠在在地址上。&lt;/p&gt;
&lt;h3 id=&#34;tcd-last-source-address-adjustment-dma-tcdn-slast&#34;&gt;TCD Last Source Address Adjustment (DMA_TCDn_SLAST)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SLAST&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Last Source Address Adjustment&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 最后源地址调整量 &lt;!-- raw HTML omitted --&gt; 当主循环结束后，将会在旧源地址上加入此调整量 &lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;tcd-tcd-destination-address-dma-tcdn-daddr&#34;&gt;TCD TCD Destination Address (DMA_TCDn_DADDR)&lt;/h3&gt;
&lt;p&gt;这个跟上边那个 SADDR 一样，不详细写了。&lt;/p&gt;
&lt;h3 id=&#34;tcd-signed-destination-address-offset-dma-tcdn-doff&#34;&gt;TCD Signed Destination Address Offset (DMA_TCDn_DOFF)&lt;/h3&gt;
&lt;p&gt;决定当每个主循环结束后，目标地址的偏移量。16-bit&lt;/p&gt;
&lt;h3 id=&#34;tcd-current-minor-loop-link-major-loop-count-dma-tcdn-citer-elinkyes&#34;&gt;TCD Current Minor Loop Link, Major Loop Count (DMA_TCDn_CITER_ELINKYES)&lt;/h3&gt;
&lt;p&gt;该寄存器为 16-bit。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ELINK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Enable channel-to-channel linking on minor-loop complete&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 开启后即是开启通道连接功能，当副循环完成的时候 &lt;!-- raw HTML omitted --&gt; 该位置 1 将会导致 &lt;code&gt;LINKCH&lt;/code&gt; 对应通道内的 &lt;code&gt;TCDn_CSR[START]=1&lt;/code&gt; 激活该通道&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;12-9&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;LINKCH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Minor Loop Link Channel Number&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; &lt;code&gt;ELINK=1&lt;/code&gt; 的情况下，此寄存器才会存在 &lt;!-- raw HTML omitted --&gt; &lt;code&gt;ELINK=0&lt;/code&gt; 此寄存器的位置被 &lt;code&gt;CITER&lt;/code&gt; 占据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;(14-0) or (8-0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CITER&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Current Major Iteration Count&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 主循环计数器 &lt;!-- raw HTML omitted --&gt; 15-bit —— &lt;code&gt;ELINK=0&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;  9-bit —— &lt;code&gt;ELINK=1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;tcd-last-destination-address-adjustmentscatter-gather&#34;&gt;TCD Last Destination Address Adjustment/Scatter Gather&lt;/h3&gt;
&lt;p&gt;Address (DMA_TCDn_DLASTSGA)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DLASTSGA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;这个寄存其有两个含义&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 在 &lt;code&gt;TCDn_CSR[ESG] = 0&lt;/code&gt; 情况下，当做主循环目标地址偏移量 &lt;!-- raw HTML omitted --&gt;如果 &lt;code&gt;TCDn_CSR[ESG] != 0&lt;/code&gt; 则寄存器指向一个 TCD&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;tcd-control-and-status-dma-tcdn-csr&#34;&gt;TCD Control and Status (DMA_TCDn_CSR)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;15-14&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;BWC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;带宽控制&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 00 无 eDMA 引擎停止 &lt;!-- raw HTML omitted --&gt;01 Reserved&lt;!-- raw HTML omitted --&gt;10 eDMA 引擎每 4 次读写停止&lt;!-- raw HTML omitted --&gt;11 eDMA 引擎每 8 次读写停止&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;11-8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;MAJORLINKCH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;主循环通道连接序号&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 设置当主循环结束后，触发的另一个通道号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DONE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;通道完成位&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 当 CITER 计数器完成时自动置位&lt;!-- raw HTML omitted --&gt;软件清零或者当下一次激活通道的时候自动清零&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ACTIVE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;通道激活位&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 指示当前通道的执行状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;MAJORELINK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;使能主循环通道连接位&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 0 关闭 &lt;!-- raw HTML omitted --&gt; 1 开启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ESG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;聚散处理使能位&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 0 关闭 TCD 正常 &lt;!-- raw HTML omitted --&gt; 1 开启 TCD.DLASTSGA 将会指向下一个 TCD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DREQ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;关闭请求位&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 1 通道 ERQ 位会在主循环后自动清零 &lt;!-- raw HTML omitted --&gt; 0 通道 ERQ 位不会自动清零&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;INTHALF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;允许当主循环一半时发起中断&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 0 关闭 &lt;!-- raw HTML omitted --&gt; 1 开启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;INTMAJOR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;允许当主循环完成时发起中断&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 0 关闭 &lt;!-- raw HTML omitted --&gt; 1 开启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;START&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;通道开启位&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt; 0 关闭 &lt;!-- raw HTML omitted --&gt; 1 开启 &lt;!-- raw HTML omitted --&gt; 开启后硬件自动清零&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;最后，还有一个 BITER 寄存器，其结构和 CITER 平行，直接将 BITER 设置成为和 CITER 一样就可以了，但是要注意一定要设置 BITER 哦，不然会发生 DMA 设置错误。&lt;/p&gt;
&lt;p&gt;到这个时候，再看看例程，是不是觉得十分简单呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>S32K144EVB的学习历程（五）NVIC 中断</title>
      <link>https://xiahualiu.github.io/posts/2017-10-02-s32k144_5/</link>
      <pubDate>Tue, 17 Oct 2017 16:20:30 +0000</pubDate>
      <guid>https://xiahualiu.github.io/posts/2017-10-02-s32k144_5/</guid>
      <description>&lt;p&gt;这一节的内容是根据对于例程的探索，了解 S32K 上的 ADC 模块的使用方法&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;本节程序包含的步骤：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;SOSC 8MHz，SPLL 160Mhz，系统时钟 80MHz，开启 RUN 模式。&lt;/li&gt;
&lt;li&gt;初始化管脚：
&lt;ul&gt;
&lt;li&gt;在 PCC 使能 Port D&lt;/li&gt;
&lt;li&gt;PTD0: GPIO output - connects to blue LED&lt;/li&gt;
&lt;li&gt;PTD15: GPIO output - connects to red LED&lt;/li&gt;
&lt;li&gt;PTD16: GPIO output - connects to green LED&lt;/li&gt;
&lt;li&gt;（因为重启后，模拟管脚不需要初始化）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初始化 ADC：
&lt;ul&gt;
&lt;li&gt;选择 SOSCDIV2_CLK 作为功能始终并且在模块中启用它&lt;/li&gt;
&lt;li&gt;关闭模块并且关闭中断请求&lt;/li&gt;
&lt;li&gt;设置 ADC 模块为 12 位转换使用 SOSCDIV_CLK, 分频因子是 1&lt;/li&gt;
&lt;li&gt;设置取样时间是 13 ADCK 时钟周期&lt;/li&gt;
&lt;li&gt;设置软件触发转换，不适用比较功能，不使用 DMA 并且使用默认的电压值参考管脚 - 也就是 $V_{REFH}$ 和 $V_{REFL}$&lt;/li&gt;
&lt;li&gt;关闭连续转换（也就是一次转换使用一次软件触发），关闭硬件平均功能，关闭初始状态矫正。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;循环体：
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;发出 ADC 转换指令给 通道 12（使用 &lt;code&gt;ADC_SC1[0]&lt;/code&gt; 作为软件触发）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等待转换完成标志&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取结果并且将其转换成为 0-5000mv 的范围（对于所有的软件触发带来的结果都在 &lt;code&gt;ADC_R[0]&lt;/code&gt; 内）&lt;/li&gt;
&lt;li&gt;根据电压范围点亮 LED&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发出 ADC 转换指令读取 ADC 高参考电压（使用 &lt;code&gt;ADC_SC1[0]&lt;/code&gt; 作为软件触发）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等待转换完成标志，当转换完成的时候&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取结果并且将其转换成为 0-5000mv 的范围（对于所有的软件触发带来的结果都在 &lt;code&gt;ADC_R[0]&lt;/code&gt; 内）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;代码：&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;S32K144.h&amp;#34; /* include peripheral declarations S32K144 */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;clocks_and_modes.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;ADC.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTD15 15 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* RED LED*/&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTD16 16 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* GREEN LED*/&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTD0 0 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* BLUE LED */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PORT_init&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCCn[PCC_PORTD_INDEX ]&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;PCC_PCCn_CGC_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clock for PORTD */&lt;/span&gt;
PORTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCR[PTD0] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000100&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D0: MUX = GPIO */&lt;/span&gt;
PORTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCR[PTD15] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000100&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D15: MUX = GPIO */&lt;/span&gt;
PORTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCR[PTD16] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000100&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D16: MUX = GPIO */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PDDR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD0; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D0: Data Direction= output */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PDDR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD15; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D15: Data Direction= output */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PDDR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD16; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D16: Data Direction= output */&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WDOG_disable&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;){
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CNT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xD928C520&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Unlock watchdog */&lt;/span&gt;
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TOVAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000FFFF&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Maximum timeout value */&lt;/span&gt;
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002100&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Disable watchdog */&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
{
uint32_t adcResultInMv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
WDOG_disable(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Disable WDOG*/&lt;/span&gt;
SOSC_init_8MHz(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize system oscillator for 8 MHz xtal */&lt;/span&gt;
SPLL_init_160MHz(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize SPLL to 160 MHz with 8 MHz SOSC */&lt;/span&gt;
NormalRUNmode_80MHz(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Init clocks: 80 MHz sysclk &amp;amp; core, 40 MHz bus, 20 MHz flash */&lt;/span&gt;
PORT_init(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Init port clocks and gpio outputs */&lt;/span&gt;
ADC_init(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Init ADC resolution 12 bit*/&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(;;) {
convertAdcChan(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* Convert Channel AD12 to pot on EVB */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(adc_complete()&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){} &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for conversion complete flag */&lt;/span&gt;
adcResultInMv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_adc_chx(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Get channel&amp;#39;s conversion results in mv */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (adcResultInMv &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3750&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;/* If result &amp;gt; 3.75V */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PSOR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD0 &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD16; &lt;span style=&#34;color:#75715e&#34;&gt;/* turn off blue, green LEDs */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCOR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD15; &lt;span style=&#34;color:#75715e&#34;&gt;/* turn on red LED */&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (adcResultInMv &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2500&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;/* If result &amp;gt; 3.75V */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PSOR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD0 &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD15; &lt;span style=&#34;color:#75715e&#34;&gt;/* turn off blue, red LEDs */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCOR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD16; &lt;span style=&#34;color:#75715e&#34;&gt;/* turn on green LED */&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (adcResultInMv &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1250&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;/* If result &amp;gt; 3.75V */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PSOR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD15 &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD16; &lt;span style=&#34;color:#75715e&#34;&gt;/* turn off red, green LEDs */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCOR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD0; &lt;span style=&#34;color:#75715e&#34;&gt;/* turn on blue LED */&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PSOR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD0 &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; PTD15 &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD16; &lt;span style=&#34;color:#75715e&#34;&gt;/* Turn off all LEDs */&lt;/span&gt;
}
convertAdcChan(&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* Convert chan 29, Vrefsh */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(adc_complete()&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){} &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for conversion complete flag */&lt;/span&gt;
adcResultInMv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_adc_chx(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Get channel&amp;#39;s conversion results in mv */&lt;/span&gt;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ADC 子函数部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;ADC.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ADC_init&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCCn[PCC_ADC0_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; PCC_PCCn_CGC_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Disable clock to change PCS */&lt;/span&gt;
PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCCn[PCC_ADC0_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_PCS(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* PCS=1: Select SOSCDIV2 */&lt;/span&gt;
PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCCn[PCC_ADC0_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_CGC_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable bus clock in ADC */&lt;/span&gt;
ADC0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SC1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00001F&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* ADCH=1F: Module is disabled for conversions*/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* AIEN=0: Interrupts are disabled */&lt;/span&gt;
ADC0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CFG1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000000004&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* ADICLK=0: Input clk=ALTCLK1=SOSCDIV2 */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* ADIV=0: Prescaler=1 */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* MODE=1: 12-bit conversion */&lt;/span&gt;
ADC0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CFG2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000C&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* SMPLTS=12(default): sample time is 13 ADC clks */&lt;/span&gt;
ADC0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SC2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* ADTRG=0: SW trigger */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* ACFE,ACFGT,ACREN=0: Compare func disabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* DMAEN=0: DMA disabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* REFSEL=0: Voltage reference pins= VREFH, VREEFL */&lt;/span&gt;
ADC0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SC3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* CAL=0: Do not start calibration sequence */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* ADCO=0: One conversion performed */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* AVGE,AVGS=0: HW average function disabled */&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;convertAdcChan&lt;/span&gt;(uint16_t adcChan) { &lt;span style=&#34;color:#75715e&#34;&gt;/* For SW trigger mode, SC1[0] is used */&lt;/span&gt;
ADC0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SC1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;ADC_SC1_ADCH_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Clear prior ADCH bits */&lt;/span&gt;
ADC0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SC1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ADC_SC1_ADCH(adcChan); &lt;span style=&#34;color:#75715e&#34;&gt;/* Initiate Conversion*/&lt;/span&gt;
}
uint8_t &lt;span style=&#34;color:#a6e22e&#34;&gt;adc_complete&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ((ADC0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SC1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; ADC_SC1_COCO_MASK)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;ADC_SC1_COCO_SHIFT); &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for completion */&lt;/span&gt;
}
uint32_t &lt;span style=&#34;color:#a6e22e&#34;&gt;read_adc_chx&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
uint16_t adc_result&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
adc_result&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ADC0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;R[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;/* For SW trigger mode, R[0] is used */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (uint32_t) ((&lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;adc_result)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFF&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* Convert result to mv for 0-5V range */&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于程序部分，需要注意的就是 ADC 初始化过程中使用的一系列寄存器，比较多比较复杂，我在这里简单介绍一下本程序涉及的寄存器。&lt;/p&gt;
&lt;h3 id=&#34;adc-status-and-control-registers-1-adc1-sc1n&#34;&gt;ADC Status and Control Registers 1 (ADC1_SC1n)&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;ADC0-&amp;gt;SC1[n]&lt;/code&gt; 访问，n 数字对应字母 ABCDEFG&amp;hellip;P。&lt;/p&gt;
&lt;p&gt;这个寄存器一共有 16 个，在参考手册上面分别叫做 ADC1_SC1(A-P), 我刚开始看的时候对于这一点非常困惑，因为这 16 个寄存器的定义一模一样，而且只能有一个寄存器内部的配置是在工作的，最后在网上另外一款的飞思卡尔单片机中找的了为什么有平行的寄存器。这 16 个寄存器对应 16 个配置，就像是存档一样，我们知道该款 ADC 一共有 16 个通道，而由于模块的硬件因素，ADC 在同一时间只能处理一个通道中断，如果想要切换通道就要频繁切换配置，所以这里我们可以提前直接写好各个要使用到的通道的采样配置，这样在使用触发命令（trigger 和 pre-trigger）时，只要指定是按照 ADC 哪一个配置采样就可以了。&lt;/p&gt;
&lt;p&gt;这个也提醒了我，这个配置和对应的结果寄存器，也是相互对应的，也就是说这，一共有 16 个结果寄存器，也是按照 A-P 排列的，哪一个配置产生的结果就放在哪一个寄存器里面，这也就解释了为什么软件触发的结果都在 0 号寄存器里面的了，因为软件只能触发 A 配置。
（下列标题中的数字为对应的寄存器地址段，未注明的地址段为 Reserved 地址段）&lt;/p&gt;
&lt;h5 id=&#34;7---cococonversion-complete-flag&#34;&gt;7 - COCO(Conversion Complete Flag):&lt;/h5&gt;
&lt;p&gt;这是一个只能读取的寄存器，这个寄存器在转换完成的时候会置 1，当下列的某一个或者多个条件成立的时候：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比较功能已经关闭&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SC2[ACFE]=0&lt;/code&gt; 并且硬件平均功能已经关闭&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SC3[AVGE]=0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果比较结果是真的情况下，COCO 寄存器在转换完成的时候会置 1，当下列的某一个或者多个条件成立的时候：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比较功能已经开启&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SC2[ACFE]=1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;COCO 也可以进行在选定的转换完成的时候进行置位（由 &lt;code&gt;AVGS&lt;/code&gt; 决定）如果下列的一个或者多个条件成立的时候:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件的平均功能已经开启&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SC3[AVGE]=1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 &lt;code&gt;SC1A&lt;/code&gt; 中的 COCO 还会在校准序列结束后置位&lt;/p&gt;
&lt;p&gt;COCO 寄存器会在以下条件达成的时候被复位：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对应的 &lt;code&gt;SC1n&lt;/code&gt; 寄存器被写入&lt;/li&gt;
&lt;li&gt;对应的 &lt;code&gt;Rn&lt;/code&gt; 寄存器被读取&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;6---aieninterrupt-enable&#34;&gt;6 - AIEN(Interrupt Enable)&lt;/h5&gt;
&lt;p&gt;使能位，允许转换完成的时候发起中断，当此位被置 1，且当 COCO 置 1 的时候，一个中断就会被生成。&lt;/p&gt;
&lt;h5 id=&#34;4-0---adchinput-channel-select&#34;&gt;(4-0) - ADCH(Input channel select)&lt;/h5&gt;
&lt;p&gt;输入通道选择，在新的参考手册中这个一共有 6 位。在老版本的 RM 中，这个位只有 5 位，但是老版本的该寄存器地址段只有 4 位，不知道编这个 RM 的作者是想表达什么意思。&lt;br&gt;
最后我参考了一下头文件里面的声明：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define ADC_SC1_ADCH_WIDTH    5u&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以应该是 5 位的宽度，我们就按照老的 RM 的数据来进行解读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;00000 AD0 is selected as input.&lt;/li&gt;
&lt;li&gt;00001 AD1 is selected as input.&lt;/li&gt;
&lt;li&gt;00010 AD2 is selected as input.&lt;/li&gt;
&lt;li&gt;00011 AD3 is selected as input.&lt;/li&gt;
&lt;li&gt;00100 AD4 is selected as input.&lt;/li&gt;
&lt;li&gt;00101 AD5 is selected as input.&lt;/li&gt;
&lt;li&gt;00110 AD6 is selected as input.&lt;/li&gt;
&lt;li&gt;00111 AD7 is selected as input.&lt;/li&gt;
&lt;li&gt;01000 AD8 is selected as input.&lt;/li&gt;
&lt;li&gt;01001 AD9 is selected as input.&lt;/li&gt;
&lt;li&gt;01010 AD10 is selected as input.&lt;/li&gt;
&lt;li&gt;01011 AD11 is selected as input.&lt;/li&gt;
&lt;li&gt;01100 AD12 is selected as input.&lt;/li&gt;
&lt;li&gt;01101 AD13 is selected as input.&lt;/li&gt;
&lt;li&gt;01110 AD14 is selected as input.&lt;/li&gt;
&lt;li&gt;01111 AD15 is selected as input.&lt;/li&gt;
&lt;li&gt;10000 Reserved.&lt;/li&gt;
&lt;li&gt;10001 Reserved.&lt;/li&gt;
&lt;li&gt;10010 AD18 is selected as input.&lt;/li&gt;
&lt;li&gt;10011 AD19 is selected as input.&lt;/li&gt;
&lt;li&gt;10100 Reserved.&lt;/li&gt;
&lt;li&gt;10101 AD21 is selected as input.&lt;/li&gt;
&lt;li&gt;10110 AD22 is selected as input.&lt;/li&gt;
&lt;li&gt;10111 AD23 is selected as input.&lt;/li&gt;
&lt;li&gt;11000 ATX Force&lt;/li&gt;
&lt;li&gt;11001 ATX Sense&lt;/li&gt;
&lt;li&gt;11010 Temp Sensor&lt;/li&gt;
&lt;li&gt;11011 Band Gap&lt;/li&gt;
&lt;li&gt;11100 AD28 is selected as input.&lt;/li&gt;
&lt;li&gt;11101 VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL].&lt;/li&gt;
&lt;li&gt;11110 VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL].&lt;/li&gt;
&lt;li&gt;11111 Module is disabled.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要牢记一件事就是这个寄存器如果全部取 1 的时候，相当于关闭 ADC 模块。其他的选择通道时使用 &lt;code&gt;ADC_SC1_ADCH(x)&lt;/code&gt; 这个定义在头文件的函数可以直接将通道改为对应的 ADCH 值。&lt;/p&gt;
&lt;h3 id=&#34;adc-configuration-register-1-adcx-cfg1&#34;&gt;ADC Configuration Register 1 (ADCx_CFG1)&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;ADC0-&amp;gt;CFG1&lt;/code&gt; 访问。主要涉及的内容有，ADC 工作模式，时钟源，时钟分频。&lt;/p&gt;
&lt;p&gt;（下列标题中的数字为对应的寄存器地址段，未注明的地址段为保留 0 段）&lt;/p&gt;
&lt;h5 id=&#34;6-5---adivclock-divide-select&#34;&gt;(6-5) - ADIV(Clock Divide Select)&lt;/h5&gt;
&lt;p&gt;选择 ADC 的时钟分频，用于产生 ADCK 内部时钟。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;00 时钟分频为 1 ，时钟速度就是输入时钟的速度&lt;/li&gt;
&lt;li&gt;01 时钟分频为 2 ，时钟速度就是输入时钟的 1/2&lt;/li&gt;
&lt;li&gt;10 时钟分频为 4 ，时钟速度就是输入时钟的 1/4&lt;/li&gt;
&lt;li&gt;11 时钟分频为 8 ，时钟速度就是输入时钟的 1/8&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;3-2---modeconversion-mode-selection&#34;&gt;(3-2) - MODE(Conversion mode selection)&lt;/h5&gt;
&lt;p&gt;选择 ADC 的分辨率。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;00 8-bit 转换&lt;/li&gt;
&lt;li&gt;01 12-bit 转换&lt;/li&gt;
&lt;li&gt;10 10-bit 转换&lt;/li&gt;
&lt;li&gt;11 Reserved&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;1-0---adiclkinput-clock-select&#34;&gt;(1-0) - ADICLK(Input Clock Select)&lt;/h5&gt;
&lt;p&gt;选择输入时钟源来产生内部时钟 ADCK。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;00 Alternate clock 1 (ADC_ALTCLK1)&lt;/li&gt;
&lt;li&gt;01 Alternate clock 2 (ADC_ALTCLK2)&lt;/li&gt;
&lt;li&gt;10 Alternate clock 3 (ADC_ALTCLK3)&lt;/li&gt;
&lt;li&gt;11 Alternate clock 4 (ADC_ALTCLK4)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;adc-configuration-register-2-adcx-cfg2&#34;&gt;ADC Configuration Register 2 (ADCx_CFG2)&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;ADC0-&amp;gt;CFG2&lt;/code&gt; 访问。 主要涉及的内容有，在“长取样模式”下选择取样时长。&lt;/p&gt;
&lt;h5 id=&#34;7-0-smpltssample-time-select&#34;&gt;(7-0) SMPLTS(Sample Time Select)&lt;/h5&gt;
&lt;p&gt;选其一系列从 2-256 个 ADCK 周期的取样时长，在这个 8 位的寄存器中写的值加一就是相应的取样时长，长的取样时间可以有效提高精确性，但是短的取样时间可以加快取样速度并且减少取样消耗的功率。在单次采样的时候，建议采用长时间采样，如果是连续采样，建议选择一个较短的采样时间。&lt;/p&gt;
&lt;h3 id=&#34;adc-data-result-register-adcx-rn&#34;&gt;ADC Data Result Register (ADCx_Rn)&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;ADC0-&amp;gt;R[n]&lt;/code&gt; 访问。
这个就是 ADC 结果寄存器了，跟配置寄存器对应，使用哪一个配置的 &lt;code&gt;SC[n]&lt;/code&gt;, 结果就保存在 对应的 &lt;code&gt;R[n]&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&#34;11-0-data-result-d&#34;&gt;(11-0) Data result (D)&lt;/h5&gt;
&lt;p&gt;一共有 12 位，在使用 12-bit 转换的时候就是全部使用，在使用 10-bit 或者 8-bit 转换的时候只使用到了最低的 10,8 位。&lt;/p&gt;
&lt;h3 id=&#34;compare-value-registers-adcx-cvn&#34;&gt;Compare Value Registers (ADCx_CVn)&lt;/h3&gt;
&lt;p&gt;这个的寄存器配置和 Rn 一样，唯一的区别就是里面存放的是一个需要比较的数值。使用这个寄存器需要打开 ADC 的比较功能，也即是 &lt;code&gt;SC2[ACREN]=1&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;status-and-control-register-2-adcx-sc2&#34;&gt;Status and Control Register 2 (ADCx_SC2)&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;ADC0-&amp;gt;SC2&lt;/code&gt; 访问。
这个寄存器虽然叫 SC2，但是和 SC1 完全不一样，每个 ADC 只有 1 个配置。它涉及的内容有：转换状态显示，软/硬转换触发选择，以及比较功能的开关，还有超级比较功能开关（可以比较范围之外的电压），比较模式的电压范围，DMA 功能开启，参考电压的选择。&lt;/p&gt;
&lt;p&gt;具体寄存器内容请查阅 RM。太多了不好写。&lt;/p&gt;
&lt;h3 id=&#34;status-and-control-register-3-adcx-sc3&#34;&gt;Status and Control Register 3 (ADCx_SC3)&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;ADC0-&amp;gt;SC3&lt;/code&gt; 访问。
本寄存器主要涉及，校准序列的开启，连续转换开关的开启，硬件平均功能的开启，硬件平均采取的被平均取样量选择。&lt;/p&gt;
&lt;p&gt;其他的寄存器都和校准有关系，但是我感觉校准现在也用不太到，所以准备到时候使用到的时候在进行研究。&lt;/p&gt;
&lt;p&gt;使用过程，如果使用软件出发的时候就只能使用 &lt;code&gt;SC1A&lt;/code&gt; 配置，因为软件触发源是向 &lt;code&gt;SC1A&lt;/code&gt; 写入的时候自动触发 ADC 转换。&lt;/p&gt;
&lt;p&gt;读取 ADC ，如果没有中断的话就是等待对应的配置 COCO 位变成 1 之后再读取对应的 &lt;code&gt;R[n]&lt;/code&gt; 里面的数值，如果有中断的话就可以直接在中断服务程序中取下对应的 &lt;code&gt;R[n]&lt;/code&gt; 值。&lt;/p&gt;</description>
    </item>
    <item>
      <title>S32K144EVB的学习历程（四）</title>
      <link>https://xiahualiu.github.io/posts/2017-10-02-s32k144_4/</link>
      <pubDate>Mon, 16 Oct 2017 12:05:30 +0000</pubDate>
      <guid>https://xiahualiu.github.io/posts/2017-10-02-s32k144_4/</guid>
      <description>&lt;p&gt;这一节的主要内容是在（三）的基础上实现 NVIC 中断控制和处理&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;本节程序包含的步骤：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;初始化 NVIC 需要写入三次：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清楚所有的悬置中断（以防有）, 写 1 到 ICPR(Interrupt Clear Pending Register)&lt;/li&gt;
&lt;li&gt;开启需要的中断位, 写 1 到需要的 ISER(Interrupt Set Enable Register) 位&lt;/li&gt;
&lt;li&gt;设置中断优先级, 在 IP(Interrupt Priority register) 中写 0 - 15 优先级，该芯片的IP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化 PORT D 使之成为 GPIO output 状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化 SOSC 为 8MHz：
-初始化需要的 SOSC 分频器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置范围，低增益，参考晶振为内部输入&lt;/li&gt;
&lt;li&gt;确认 SOSC 状态寄存器解锁&lt;/li&gt;
&lt;li&gt;在 SOSCCSR 中使能&lt;/li&gt;
&lt;li&gt;等待 SOSCCSR_SOSCVLD 有效位等于 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化 SPLL 到 160MHz 使用 8MHz 的 SOSC&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确认 SPLL 处于关闭状态&lt;/li&gt;
&lt;li&gt;初始化 SPLL 的分频器&lt;/li&gt;
&lt;li&gt;初始化 SPLL Pef 分频器和 SPLL 倍率&lt;/li&gt;
&lt;li&gt;确认 SPLLCSR 解锁&lt;/li&gt;
&lt;li&gt;使能 SPLL&lt;/li&gt;
&lt;li&gt;等待 SPLL 有效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化 LPIT0 通道 0:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 PCC 中选择时钟为 SPLL_DIV2_CLK&lt;/li&gt;
&lt;li&gt;在 PCC 中开启 LPIT0 Gate&lt;/li&gt;
&lt;li&gt;在 MCR 中开启 M_EN 开启 LPIT0 模块&lt;/li&gt;
&lt;li&gt;在 MIER 寄存器中开启中断功能&lt;/li&gt;
&lt;li&gt;在 TMR[n].TVAL 和 TMR[n].TCTRL (也可以在 TVAL0 或者 TCTRL0) 中设置初值和工作模式并开启T_EN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开启 RUN 模式给 SPLL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化 COREDIV, BUSDIV, SLOWDIV 给目标频率&lt;/li&gt;
&lt;li&gt;将系统时钟源输出至 SPLL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LPIT_0 通道 0 NVIC 中断处理程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加中断计数器&lt;/li&gt;
&lt;li&gt;翻转 GPIO PTD0 输出&lt;/li&gt;
&lt;li&gt;清空通道中断标志位 MSR 中的 TIF0 位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;代码:&lt;/h1&gt;
&lt;h3 id=&#34;heading-2&#34;&gt;主体：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;S32K144.h&amp;#34; /* include peripheral declarations S32K144 */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;clocks_and_modes.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; idle_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* main loop idle counter */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; lpit0_ch0_flag_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* LPIT0 chan 0 timeout counter */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NVIC_init_IRQs&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
FSL_NVIC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;ICPR[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* IRQ48-LPIT0 ch0: clr any pending IRQ*/&lt;/span&gt;
FSL_NVIC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;ISER[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* IRQ48-LPIT0 ch0: enable IRQ */&lt;/span&gt;
FSL_NVIC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;IP[&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* IRQ48-LPIT0 ch0: priority 10 of 0-15*/&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PORT_init&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; PCCn[PCC_PORTD_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_CGC_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clock for PORT D */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PDDR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D0: Data Direction= output */&lt;/span&gt;
PORTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCR[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000100&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D0: MUX = ALT1, GPIO (to blue LED on EVB) */&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LPIT0_init&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCCn[PCC_LPIT0_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_PCS(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* Clock Src = 6 (SPLL2_DIV2_CLK)*/&lt;/span&gt;
PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCCn[PCC_LPIT0_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_CGC_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clk to LPIT0 regs */&lt;/span&gt;
LPIT0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;MCR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000001&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* DBG_EN-0: Timer chans stop in Debug mode */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* DOZE_EN=0: Timer chans are stopped in DOZE mode */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* SW_RST=0: SW reset does not reset timer chans, regs */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* M_CEN=1: enable module clk (allow writing other LPIT0 regs) */&lt;/span&gt;
LPIT0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;MIER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000001&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* TIE0=1: Timer Interrupt Enabled fot Chan 0 */&lt;/span&gt;
LPIT0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TVAL0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80000000&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Chan 0 Timeout period: 80M clocks */&lt;/span&gt;
LPIT0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TCTRL0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000001&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* T_EN=1: Timer channel is enabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* CHAIN=0: channel chaining is disabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* MODE=0: 32 periodic counter mode */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* TSOT=0: Timer decrements immediately based on restart */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* TSOI=0: Timer does not stop after timeout */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* TROT=0 Timer will not reload on trigger */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* TRG_SRC=0: External trigger source */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* TRG_SEL=0: Timer chan 0 trigger source is selected*/&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WDOG_disable&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;){
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CNT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xD928C520&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/*Unlock watchdog*/&lt;/span&gt;
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TOVAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000FFFF&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/*Maximum timeout value*/&lt;/span&gt;
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002100&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/*Disable watchdog*/&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
WDOG_disable();
PORT_init(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Configure ports */&lt;/span&gt;
SOSC_init_8MHz(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize system oscillator for 8 MHz xtal */&lt;/span&gt;
SPLL_init_160MHz(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize SPLL to 160 MHz with 8 MHz SOSC */&lt;/span&gt;
NormalRUNmode_80MHz(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Init clocks: 80 MHz sysclk &amp;amp; core, 40 MHz bus, 20 MHz flash */&lt;/span&gt;
NVIC_init_IRQs(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable desired interrupts and priorities */&lt;/span&gt;
LPIT0_init(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize PIT0 for 1 second timeout */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (;;) {
idle_counter&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;;
}
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LPIT0_Ch0_IRQHandler&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
lpit0_ch0_flag_counter&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Increment LPIT0 timeout counter */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PTOR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Toggle output on port D0 (blue LED) */&lt;/span&gt;
LPIT0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;MSR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LPIT_MSR_TIF0_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Clear LPIT0 timer flag 0 */&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;heading-3&#34;&gt;使用的子函数文件：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;S32K144.h&amp;#34; /* include peripheral declarations S32K144 */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;clocks_and_modes.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SOSC_init_8MHz&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SOSCDIV&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000101&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCDIV1 &amp;amp; SOSCDIV2 =1: divide by 1 */&lt;/span&gt;
SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SOSCCFG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000024&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Range=2: Medium freq (SOSC between 1MHz-8MHz)*/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* HGO=0: Config xtal osc for low power */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* EREFS=1: Input is external XTAL */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SOSCCSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_SOSCCSR_LK_MASK); &lt;span style=&#34;color:#75715e&#34;&gt;/* Ensure SOSCCSR unlocked */&lt;/span&gt;
SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SOSCCSR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000001&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* LK=0: SOSCCSR can be written */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCCMRE=0: OSC CLK monitor IRQ if enabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCCM=0: OSC CLK monitor disabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCERCLKEN=0: Sys OSC 3V ERCLK output clk disabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCLPEN=0: Sys OSC disabled in VLP modes */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCSTEN=0: Sys OSC disabled in Stop modes */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCEN=1: Enable oscillator */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SOSCCSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_SOSCCSR_SOSCVLD_MASK)); &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for sys OSC clk valid */&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SPLL_init_160MHz&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_SPLLCSR_LK_MASK); &lt;span style=&#34;color:#75715e&#34;&gt;/* Ensure SPLLCSR unlocked */&lt;/span&gt;
SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCSR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLEN=0: SPLL is disabled (default) */&lt;/span&gt;
SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLDIV &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000302&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLDIV1 divide by 2; SPLLDIV2 divide by 4 */&lt;/span&gt;
SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCFG &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00180000&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* PREDIV=0: Divide SOSC_CLK by 0+1=1 */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* MULT=24: Multiply sys pll by 4+24=40 */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* SPLL_CLK = 8MHz / 1 * 40 / 2 = 160 MHz */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_SPLLCSR_LK_MASK); &lt;span style=&#34;color:#75715e&#34;&gt;/* Ensure SPLLCSR unlocked */&lt;/span&gt;
SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCSR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000001&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* LK=0: SPLLCSR can be written */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLCMRE=0: SPLL CLK monitor IRQ if enabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLCM=0: SPLL CLK monitor disabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLSTEN=0: SPLL disabled in Stop modes */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLEN=1: Enable SPLL */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_SPLLCSR_SPLLVLD_MASK)); &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for SPLL valid */&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NormalRUNmode_80MHz&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;/* Change to normal RUN mode with 8MHz SOSC, 80 MHz PLL*/&lt;/span&gt;
SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;RCCR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SCG_RCCR_SCS(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* PLL as clock source*/&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;SCG_RCCR_DIVCORE(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;b01) &lt;span style=&#34;color:#75715e&#34;&gt;/* DIVCORE=1, div. by 2: Core clock = 160/2 MHz = 80 MHz*/&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;SCG_RCCR_DIVBUS(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;b01) &lt;span style=&#34;color:#75715e&#34;&gt;/* DIVBUS=1, div. by 2: bus clock = 40 MHz*/&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;SCG_RCCR_DIVSLOW(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;b10); &lt;span style=&#34;color:#75715e&#34;&gt;/* DIVSLOW=2, div. by 3: SCG slow, flash clock= 26 2/3 MHz*/&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (((SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_CSR_SCS_MASK) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; SCG_CSR_SCS_SHIFT ) &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) {}
&lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for sys clk src = SPLL */&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;heading-4&#34;&gt;代码详解：&lt;/h3&gt;
&lt;p&gt;这个程序代码和上一个例程给出的代码非常类似，只增加了 LPIT0 模块中的 MIER 寄存器修改和 NVIC 的一个初始化和 IRQ Handler 函数。&lt;/p&gt;
&lt;p&gt;在这里我想详细介绍一下本款芯片内置的 &lt;strong&gt;NVIC&lt;/strong&gt;(Nested Vectored Interrupt Controller) 的工作原理，该模块被内置于内核之中，在 S32K 的参考手册中，而且在最新的参考手册中，这部分内容被删去了，不知道是为什么，导致我根本无法找到相关资料，浪费了我好几个小时的时间，最后还是在老版本的参考手册中找到了相关的内容。&lt;/p&gt;
&lt;p&gt;NVIC 全名是&lt;strong&gt;中断向量嵌套控制器&lt;/strong&gt;，从这个名字上我们可以看出来，这是个控制中断的优先级的模块，它的主要功能是接收其他中断请求，判断各个中断的优先级，然后向内核发起中断服务。在 ARM Cortex M4 这个芯片中，NVIC 一共有 256 路，支持外接 256 个中断源，但是在 S32K 中，仅仅用到了 123 个中断通道，而每一个中断发生端口，都对应着一个 IRQ 值，这个值是固定的，就像是 IP 地址一样，用于区分各个中断请求的来源，而每一个 IRQ 值呢，又对应一个中断的优先级，但是优先级对应的 IPR 寄存器，只有高四位对应优先级，也就是优先级只有 16 个等级（0 - 15），优先级数值越低优先级越高，高优先级的中断可以打断低的优先级中断，从而实现中断嵌套，而优先级相等的两个中断请求，则无法打断中断。&lt;/p&gt;
&lt;p&gt;这个地方有点意思啊，在 S32K 中的 IPR 只有高四位对应优先级，那低四位是干嘛的呢，这里就要谈一谈优先级组别的问题了。以下内容仅供想要深入理解的人查看，在 S32 IDE 中，修改 IPR 只能给其赋值 0 - 15。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其实在 IPR 寄存器中，每个中断对应 &lt;strong&gt;8&lt;/strong&gt; 个位，这 8 个位可以分割成为&lt;strong&gt;两个&lt;/strong&gt;位段（[1;7]或者[2;6]或者[3;5]或者[4;4]一直到[7;1]）其中，高的位段，被称之为&lt;strong&gt;组优先级&lt;/strong&gt;，低的位段，被称之为&lt;strong&gt;子优先级&lt;/strong&gt;。最常见的做法就是如 S32K 这样，4 位对应组优先级，4 位对应子优先级，这样会获得 &lt;strong&gt;16 个组中断等级和 16 个子中断等级&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://xiahualiu.github.io/img/2017-10-02-S32K144_4/ipr.png&#34; alt=&#34;ipr.png&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;heading-5&#34;&gt;组优先级和子优先级的作用：&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;即高的组优先级中断（数值低）可以中断低的组优先级（数值高）中断的，实现中断嵌套。&lt;/li&gt;
&lt;li&gt;组优先级一样的中断，子优先级高的不能中断低的组优先级中断，新中断等待。&lt;/li&gt;
&lt;li&gt;两个中断同时发生，组优先级高的可以优先进行；组优先级相同的中断同时发生，根据子优先级的高低排队进行中断。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;nvic-&#34;&gt;NVIC 中断向量表：&lt;/h5&gt;
&lt;p&gt;NVIC 的每个中断都有一个向量值，和 IRQ 一样，一个中断的 IRQ 值加 16 就是该中断的向量值。在 IDE 中，中断有关的 &lt;code&gt;ICPR&lt;/code&gt; &lt;code&gt;ISER&lt;/code&gt; 寄存器都是一个数组，每个元素都是 32 位的无符号整形，数组有 4 个，一共是 128 位，也就是说，要打开 IRQ 值为 48 的 LPIT Channel 0 中断通道，要 &lt;code&gt;FSL_NVIC-&amp;gt;ISER[1] |= 1&amp;lt;&amp;lt; (48 % 32);&lt;/code&gt; 很反人类的设定，要注意。&lt;/p&gt;
&lt;p&gt;内核中断的 IRQ，在表中并没有给出，但是在实际运用中要使用内核中断该怎么办呢，这时候我们可以按照 向量值减去 16 的法则进行计算 IRQ，最后的实际 IRQ 值都是负的，譬如 Systick 中断，对应的 IRQ 值为 -1。在配置的时候，对应的数组下标为负。&lt;/p&gt;
&lt;p&gt;最后，在中断服务程序结束后，一定要清中断标志位，中断标志位不在 NVIC 的寄存器中，而在各个中断发生源的寄存器中，大家要注意。&lt;/p&gt;
&lt;h3 id=&#34;-s32k144--irq-&#34;&gt;附录: S32K144 的 IRQ 表：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @brief Defines the Interrupt Numbers definitions
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * This enumeration is used to configure the interrupts.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Implements : IRQn_Type_Class
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt;
{
  &lt;span style=&#34;color:#75715e&#34;&gt;/* Auxiliary constants */&lt;/span&gt;
  NotAvail_IRQn                &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Not available device specific interrupt */&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;/* Core interrupts */&lt;/span&gt;
  NonMaskableInt_IRQn          &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Non Maskable Interrupt */&lt;/span&gt;
  HardFault_IRQn               &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Cortex-M4 SV Hard Fault Interrupt */&lt;/span&gt;
  MemoryManagement_IRQn        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Cortex-M4 Memory Management Interrupt */&lt;/span&gt;
  BusFault_IRQn                &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Cortex-M4 Bus Fault Interrupt */&lt;/span&gt;
  UsageFault_IRQn              &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Cortex-M4 Usage Fault Interrupt */&lt;/span&gt;
  SVCall_IRQn                  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Cortex-M4 SV Call Interrupt */&lt;/span&gt;
  DebugMonitor_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Cortex-M4 Debug Monitor Interrupt */&lt;/span&gt;
  PendSV_IRQn                  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Cortex-M4 Pend SV Interrupt */&lt;/span&gt;
  SysTick_IRQn                 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Cortex-M4 System Tick Interrupt */&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;/* Device specific interrupts */&lt;/span&gt;
  DMA0_IRQn                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0u&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA channel 0 transfer complete */&lt;/span&gt;
  DMA1_IRQn                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1u&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA channel 1 transfer complete */&lt;/span&gt;
  DMA2_IRQn                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2u&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA channel 2 transfer complete */&lt;/span&gt;
  DMA3_IRQn                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3u&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA channel 3 transfer complete */&lt;/span&gt;
  DMA4_IRQn                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4u&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA channel 4 transfer complete */&lt;/span&gt;
  DMA5_IRQn                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5u&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA channel 5 transfer complete */&lt;/span&gt;
  DMA6_IRQn                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6u&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA channel 6 transfer complete */&lt;/span&gt;
  DMA7_IRQn                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7u&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA channel 7 transfer complete */&lt;/span&gt;
  DMA8_IRQn                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8u&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA channel 8 transfer complete */&lt;/span&gt;
  DMA9_IRQn                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9u&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA channel 9 transfer complete */&lt;/span&gt;
  DMA10_IRQn                   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA channel 10 transfer complete */&lt;/span&gt;
  DMA11_IRQn                   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA channel 11 transfer complete */&lt;/span&gt;
  DMA12_IRQn                   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA channel 12 transfer complete */&lt;/span&gt;
  DMA13_IRQn                   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA channel 13 transfer complete */&lt;/span&gt;
  DMA14_IRQn                   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA channel 14 transfer complete */&lt;/span&gt;
  DMA15_IRQn                   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA channel 15 transfer complete */&lt;/span&gt;
  DMA_Error_IRQn               &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; DMA error interrupt channels 0-15 */&lt;/span&gt;
  MCM_IRQn                     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FPU sources */&lt;/span&gt;
  FTFC_IRQn                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTFC Command complete */&lt;/span&gt;
  Read_Collision_IRQn          &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTFC Read collision */&lt;/span&gt;
  LVD_LVW_IRQn                 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; PMC Low voltage detect interrupt */&lt;/span&gt;
  FTFC_Fault_IRQn              &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTFC Double bit fault detect */&lt;/span&gt;
  WDOG_EWM_IRQn                &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Single interrupt vector for WDOG and EWM */&lt;/span&gt;
  RCM_IRQn                     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; RCM Asynchronous Interrupt */&lt;/span&gt;
  LPI2C0_Master_IRQn           &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; LPI2C0 Master Interrupt */&lt;/span&gt;
  LPI2C0_Slave_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; LPI2C0 Slave Interrupt */&lt;/span&gt;
  LPSPI0_IRQn                  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; LPSPI0 Interrupt */&lt;/span&gt;
  LPSPI1_IRQn                  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; LPSPI1 Interrupt */&lt;/span&gt;
  LPSPI2_IRQn                  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; LPSPI2 Interrupt */&lt;/span&gt;
  LPUART0_RxTx_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; LPUART0 Transmit / Receive Interrupt */&lt;/span&gt;
  LPUART1_RxTx_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; LPUART1 Transmit / Receive  Interrupt */&lt;/span&gt;
  LPUART2_RxTx_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; LPUART2 Transmit / Receive  Interrupt */&lt;/span&gt;
  ADC0_IRQn                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; ADC0 interrupt request. */&lt;/span&gt;
  ADC1_IRQn                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; ADC1 interrupt request. */&lt;/span&gt;
  CMP0_IRQn                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;41u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; CMP0 interrupt request */&lt;/span&gt;
  ERM_single_fault_IRQn        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; ERM single bit error correction */&lt;/span&gt;
  ERM_double_fault_IRQn        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;45u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; ERM double bit error non-correctable */&lt;/span&gt;
  RTC_IRQn                     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; RTC alarm interrupt */&lt;/span&gt;
  RTC_Seconds_IRQn             &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; RTC seconds interrupt */&lt;/span&gt;
  LPIT0_Ch0_IRQn               &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; LPIT0 channel 0 overflow interrupt */&lt;/span&gt;
  LPIT0_Ch1_IRQn               &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; LPIT0 channel 1 overflow interrupt */&lt;/span&gt;
  LPIT0_Ch2_IRQn               &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; LPIT0 channel 2 overflow interrupt */&lt;/span&gt;
  LPIT0_Ch3_IRQn               &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; LPIT0 channel 3 overflow interrupt */&lt;/span&gt;
  PDB0_IRQn                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; PDB0 interrupt */&lt;/span&gt;
  SCG_IRQn                     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; SCG bus interrupt request */&lt;/span&gt;
  LPTMR0_IRQn                  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; LPTIMER interrupt request */&lt;/span&gt;
  PORTA_IRQn                   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port A pin detect interrupt */&lt;/span&gt;
  PORTB_IRQn                   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port B pin detect interrupt */&lt;/span&gt;
  PORTC_IRQn                   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port C pin detect interrupt */&lt;/span&gt;
  PORTD_IRQn                   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port D pin detect interrupt */&lt;/span&gt;
  PORTE_IRQn                   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port E pin detect interrupt */&lt;/span&gt;
  SWI_IRQn                     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Software interrupt */&lt;/span&gt;
  PDB1_IRQn                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; PDB1 interrupt */&lt;/span&gt;
  FLEXIO_IRQn                  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;69u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FlexIO Interrupt */&lt;/span&gt;
  CAN0_ORed_IRQn               &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;78u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; CAN0 OR&amp;#39;ed [Bus Off OR Transmit Warning OR Receive Warning] */&lt;/span&gt;
  CAN0_Error_IRQn              &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;79u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; CAN0 Interrupt indicating that errors were detected on the CAN bus */&lt;/span&gt;
  CAN0_Wake_Up_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; CAN0 Interrupt asserted when Pretended Networking operation is enabled, and a valid message matches the selected filter criteria during Low Power mode */&lt;/span&gt;
  CAN0_ORed_0_15_MB_IRQn       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; CAN0 OR&amp;#39;ed Message buffer (0-15) */&lt;/span&gt;
  CAN0_ORed_16_31_MB_IRQn      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;82u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; CAN0 OR&amp;#39;ed Message buffer (16-31) */&lt;/span&gt;
  CAN1_ORed_IRQn               &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;85u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; CAN1 OR&amp;#39;ed [Bus Off OR Transmit Warning OR Receive Warning] */&lt;/span&gt;
  CAN1_Error_IRQn              &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;86u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; CAN1 Interrupt indicating that errors were detected on the CAN bus */&lt;/span&gt;
  CAN1_ORed_0_15_MB_IRQn       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; CAN1 OR&amp;#39;ed Interrupt for Message buffer (0-15) */&lt;/span&gt;
  CAN2_ORed_IRQn               &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;92u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; CAN2 OR&amp;#39;ed [Bus Off OR Transmit Warning OR Receive Warning] */&lt;/span&gt;
  CAN2_Error_IRQn              &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;93u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; CAN2 Interrupt indicating that errors were detected on the CAN bus */&lt;/span&gt;
  CAN2_ORed_0_15_MB_IRQn       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; CAN2 OR&amp;#39;ed Message buffer (0-15) */&lt;/span&gt;
  FTM0_Ch0_Ch1_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99u&lt;/span&gt;,              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM0 Channel 0 and 1 interrupt */&lt;/span&gt;
  FTM0_Ch2_Ch3_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM0 Channel 2 and 3 interrupt */&lt;/span&gt;
  FTM0_Ch4_Ch5_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM0 Channel 4 and 5 interrupt */&lt;/span&gt;
  FTM0_Ch6_Ch7_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM0 Channel 6 and 7 interrupt */&lt;/span&gt;
  FTM0_Fault_IRQn              &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM0 Fault interrupt */&lt;/span&gt;
  FTM0_Ovf_Reload_IRQn         &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM0 Counter overflow and Reload interrupt */&lt;/span&gt;
  FTM1_Ch0_Ch1_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM1 Channel 0 and 1 interrupt */&lt;/span&gt;
  FTM1_Ch2_Ch3_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;106u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM1 Channel 2 and 3 interrupt */&lt;/span&gt;
  FTM1_Ch4_Ch5_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM1 Channel 4 and 5 interrupt */&lt;/span&gt;
  FTM1_Ch6_Ch7_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM1 Channel 6 and 7 interrupt */&lt;/span&gt;
  FTM1_Fault_IRQn              &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM1 Fault interrupt */&lt;/span&gt;
  FTM1_Ovf_Reload_IRQn         &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM1 Counter overflow and Reload interrupt */&lt;/span&gt;
  FTM2_Ch0_Ch1_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;111u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM2 Channel 0 and 1 interrupt */&lt;/span&gt;
  FTM2_Ch2_Ch3_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM2 Channel 2 and 3 interrupt */&lt;/span&gt;
  FTM2_Ch4_Ch5_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;113u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM2 Channel 4 and 5 interrupt */&lt;/span&gt;
  FTM2_Ch6_Ch7_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;114u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM2 Channel 6 and 7 interrupt */&lt;/span&gt;
  FTM2_Fault_IRQn              &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM2 Fault interrupt */&lt;/span&gt;
  FTM2_Ovf_Reload_IRQn         &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;116u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM2 Counter overflow and Reload interrupt */&lt;/span&gt;
  FTM3_Ch0_Ch1_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;117u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM3 Channel 0 and 1 interrupt */&lt;/span&gt;
  FTM3_Ch2_Ch3_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM3 Channel 2 and 3 interrupt */&lt;/span&gt;
  FTM3_Ch4_Ch5_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM3 Channel 4 and 5 interrupt */&lt;/span&gt;
  FTM3_Ch6_Ch7_IRQn            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM3 Channel 6 and 7 interrupt */&lt;/span&gt;
  FTM3_Fault_IRQn              &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121u&lt;/span&gt;,             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM3 Fault interrupt */&lt;/span&gt;
  FTM3_Ovf_Reload_IRQn         &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;122u&lt;/span&gt;              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; FTM3 Counter overflow and Reload interrupt */&lt;/span&gt;
} IRQn_Type;

&lt;span style=&#34;color:#75715e&#34;&gt;/*!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* end of group Interrupt_vector_numbers_S32K144 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之前找内核那几个中断的 IRQn 找的好久，最后在头文件里面发现了这个表，在这里就先记录下来方便以后的查阅。&lt;/p&gt;</description>
    </item>
    <item>
      <title>S32K144EVB的学习历程（三）</title>
      <link>https://xiahualiu.github.io/posts/2017-10-02-s32k144_3/</link>
      <pubDate>Mon, 02 Oct 2017 21:10:30 +0000</pubDate>
      <guid>https://xiahualiu.github.io/posts/2017-10-02-s32k144_3/</guid>
      <description>&lt;p&gt;让我们继续上一节的内容&lt;/p&gt;
&lt;h3 id=&#34;fast-irc-control-status-register-scg-firccsr&#34;&gt;Fast IRC Control Status Register (SCG_FIRCCSR)&lt;/h3&gt;
&lt;p&gt;这个寄存器展示并且控制 FIRC 的工作状态&lt;/p&gt;
&lt;h3 id=&#34;fast-irc-divide-register-scg-fircdiv&#34;&gt;Fast IRC Divide Register (SCG_FIRCDIV)&lt;/h3&gt;
&lt;p&gt;这个寄存器控制 FIRC 的分频器的值&lt;/p&gt;
&lt;h3 id=&#34;fast-irc-configuration-register-scg-firccfg&#34;&gt;Fast IRC Configuration Register (SCG_FIRCCFG)&lt;/h3&gt;
&lt;p&gt;这个寄存器控制 FIRC 的基础设置，不能在 FIRC 开启的时候修改&lt;/p&gt;
&lt;h3 id=&#34;system-pll-control-status-register-scg-spllcsr&#34;&gt;System PLL Control Status Register (SCG_SPLLCSR)&lt;/h3&gt;
&lt;h3 id=&#34;system-pll-divide-register-scg-splldiv&#34;&gt;System PLL Divide Register (SCG_SPLLDIV)&lt;/h3&gt;
&lt;h3 id=&#34;system-pll-configuration-register-scg-spllcfg&#34;&gt;System PLL Configuration Register (SCG_SPLLCFG)&lt;/h3&gt;
&lt;p&gt;以上的几个寄存器基本设置都类似，但是具体到写程序的时候，一定要对照寄存器的表来写，因为他们之间都有一些不同&lt;/p&gt;
&lt;h2 id=&#34;-scg-&#34;&gt;不同工作模式中 SCG 的工作流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;启动的时候，’Reset’ 会直接传递给 Run 模式下的 FIRC，Run 模式下 FIRC，SOSC，SPLL，SIRC 共同工作，可以互相传递时钟&lt;/li&gt;
&lt;li&gt;启动完成后，如果单片机进入 &lt;strong&gt;High Speed Mode&lt;/strong&gt; 则会直接将 FIRC 时钟和 SPLL 相互传递&lt;/li&gt;
&lt;li&gt;启动完成后，如果单片机进入 &lt;strong&gt;Very Slow Power Mode&lt;/strong&gt; 则只启用 SIRC 时钟。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;heading&#34;&gt;查看代码对应的时钟寄存器&lt;/h1&gt;
&lt;h4 id=&#34;void-sosc-init-8mhzvoid-&#34;&gt;&lt;code&gt;void SOSC_init_8MHz(void)&lt;/code&gt; :&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SCG-&amp;gt;SOSCDIV=0x00000101;&lt;/code&gt; 设置对应的两路 DIV&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SCG-&amp;gt;SOSCCFG=0x00000024;&lt;/code&gt; 设置SOSC的硬件属性，晶振频率选择，可以看出来 1MHz ~ 8Mhz 是中频的范围，这个值在 Reference Manual 中并未给出。HGO 中高增益意味着高功率，在这里我们不需要高增益。&lt;/li&gt;
&lt;li&gt;循环，等 &lt;code&gt;SOSCCSR&lt;/code&gt; 状态寄存器解锁&lt;/li&gt;
&lt;li&gt;设置 &lt;code&gt;SOSCCSR&lt;/code&gt;  状态寄存器，这里什么都没有开启，只给了使能。&lt;/li&gt;
&lt;li&gt;循环，等待 &lt;code&gt;SOSCCSR&lt;/code&gt; 有效&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，这个函数应该在启用 &lt;strong&gt;锁相环&lt;/strong&gt; 前设定完成，而且要保证使能步骤在函数内部的最后一步完成。&lt;/p&gt;
&lt;h4 id=&#34;void-spll-init-160mhzvoid-&#34;&gt;&lt;code&gt;void SPLL_init_160MHz(void)&lt;/code&gt; :&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;循环，等 &lt;code&gt;SPLLCSR&lt;/code&gt; 状态寄存器解锁&lt;/li&gt;
&lt;li&gt;设置 &lt;code&gt;SPLLCSR&lt;/code&gt; 先关闭锁相环，&lt;code&gt;SPLLDIV&lt;/code&gt; 设置两路 DIV，&lt;code&gt;SPLLCFG&lt;/code&gt; 设置 MULT 和 PREDIV 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://xiahualiu.github.io/img/2017-10-02-S32K144_3/SPLLCalculation.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;循环，等待 &lt;code&gt;SPLLCSR&lt;/code&gt; 状态寄存器 解锁&lt;/li&gt;
&lt;li&gt;使能&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;void-normalrunmode-80mhz-void-&#34;&gt;&lt;code&gt;void NormalRUNmode_80MHz (void)&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;这个其实就是设置 SCG_RCCR 的值，这个值在 RUN 模式下是用于设定一些分频器（&lt;code&gt;DIVSLOW&lt;/code&gt; &lt;code&gt;DIVBUS&lt;/code&gt; &lt;code&gt;DIVCORE&lt;/code&gt;） 和选择时钟源（&lt;code&gt;SCS&lt;/code&gt;）的。&lt;/p&gt;
&lt;h1 id=&#34;lpit&#34;&gt;低功率中断计时器（LPIT）设置&lt;/h1&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;S32K144中有一个 LPIT 模块 &lt;code&gt;LPIT0&lt;/code&gt; 和四个通道，低泄露模式和等待模式不被该芯片支持，修改 LPIT 在其功能时钟在关闭的时候会导致赋值错误。&lt;/li&gt;
&lt;li&gt;LPIT 每个通道会给 DMAMUX 周期性触发&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;LPIT 被设计为捕捉脉冲在其输入引脚，并不需要和其时钟频率有关，但是为了保证可靠性，连续的触发操作应该至少间隔 10 个 LPIT 总线时钟周期。&lt;/p&gt;
&lt;h3 id=&#34;tval-&#34;&gt;TVAL 是初值寄存器：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在 LPIT 比较模式中&lt;/strong&gt;：其中储存的值会逐渐减少到 0，之后会产生中断并且将初值恢复，写入一个新的值不会立刻修改初值，必须要到当前的值到零重装才能生效，如果想要立即生效请在 TCRTL 寄存器中关闭该模块再重新打开。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在 LPIT 捕捉模式中&lt;/strong&gt;：其中储存的值是计数值的相反值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tctrl-&#34;&gt;TCTRL 是控制寄存器：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;工作模式有：
&lt;ul&gt;
&lt;li&gt;32-bit 周期计数&lt;/li&gt;
&lt;li&gt;双 16-bit 周期计数&lt;/li&gt;
&lt;li&gt;32-bit 触发积累&lt;/li&gt;
&lt;li&gt;32-bit 输入捕捉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TSOT（Timer Start On Trigger），TROT（Timer Reset On Trigger） 和 TSOI（Timer Stop On Interrupt） ，CHAIN 设置请参考 Reference Manual，不难，根据名字就可以理解。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lpit-&#34;&gt;LPIT 使用的步骤：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;PCC 选择 LPIT 的时钟源，然后使用 &lt;code&gt;PCC_PCCn_CGC_MASK&lt;/code&gt; 取或打开 LPIT 。&lt;/li&gt;
&lt;li&gt;首先使用 LPIT0 指针赋值 MCR 寄存器，默认赋值 &lt;code&gt;0x00000001&lt;/code&gt; 即可，仅仅打开 &lt;code&gt;M_CEN&lt;/code&gt; 开关，此开关未打开前后续的寄存器处于锁定状态，赋值以及读取均会报错。&lt;/li&gt;
&lt;li&gt;LPIT0 指针赋值 &lt;code&gt;TMR[n].TVAL&lt;/code&gt; 和 &lt;code&gt;TMR[n].TCTRL&lt;/code&gt;, TVAL 控制 timeout 周期，TCTRL 控制开启对应的通道。并且确定工作模式。&lt;/li&gt;
&lt;li&gt;检测 MSR 寄存器中的 TIFn 是否产生 flag（1）。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title>S32K144EVB的学习历程（二）</title>
      <link>https://xiahualiu.github.io/posts/2017-9-29-s32k144_2/</link>
      <pubDate>Fri, 29 Sep 2017 00:30:30 +0000</pubDate>
      <guid>https://xiahualiu.github.io/posts/2017-9-29-s32k144_2/</guid>
      <description>&lt;h1 id=&#34;heading&#34;&gt;本文简介&lt;/h1&gt;
&lt;p&gt;本文主要详细叙述了 S32K144 的时钟模块相关内容。本文代码包含以下内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一般的时钟初始化流程&lt;/li&gt;
&lt;li&gt;LPIT 通道计数器设置&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;时钟结构图&lt;/h1&gt;
&lt;p&gt;在看代码之前，首先要熟悉时钟系统，下图为本程序所用到的时钟和模块示意图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiahualiu.github.io/img/2017-9-29-S32K144_2/hello_clock.png&#34; alt=&#34;hello_clock.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到外部晶振输入 &lt;strong&gt;XTAL(External Crystal Oscillator)&lt;/strong&gt; 和震荡器 &lt;strong&gt;OSC(System Oscillator)&lt;/strong&gt; 相连，产生了一个时钟信号为 &lt;strong&gt;SOSC_CLK&lt;/strong&gt; 该信号被 &lt;strong&gt;SCG_SOSCDIV&lt;/strong&gt; 分频成为两个 &lt;strong&gt;SOSC_DIV1_CLK&lt;/strong&gt; 和 &lt;strong&gt;SOSC_DIV2_CLK&lt;/strong&gt; 时钟信号。&lt;strong&gt;SOSC_CLK&lt;/strong&gt; 又被锁相环 &lt;strong&gt;PLL&lt;/strong&gt; 升频到 &lt;strong&gt;SPLL_CLK&lt;/strong&gt; 信号，&lt;strong&gt;SPLL_CLK&lt;/strong&gt; 被 &lt;strong&gt;SCG_SPLLDIV&lt;/strong&gt; 分频得到 &lt;strong&gt;SPLL_DIV1_CLK&lt;/strong&gt; 或者得到 &lt;strong&gt;SPLL_DIV2_CLK&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FIRC(Fast Internal Reference Clock)&lt;/strong&gt; 产生一个 48HMz 的时钟 &lt;strong&gt;FIRC_CLK&lt;/strong&gt;, &lt;strong&gt;SIRC(Slow Internal Reference Clock)&lt;/strong&gt; 产生一个 8MHz 的信号 &lt;strong&gt;SIRC_SLK&lt;/strong&gt;, &lt;strong&gt;FIRC_CLK&lt;/strong&gt; 和 &lt;strong&gt;SIRC_SLK&lt;/strong&gt; 和 &lt;strong&gt;SPLL_CLK&lt;/strong&gt; 和 &lt;strong&gt;SOSC_CLK&lt;/strong&gt; 被 &lt;strong&gt;SCG_RCCR[SCS]&lt;/strong&gt; 选择器选择信号，使用 &lt;strong&gt;DIVCORE&lt;/strong&gt; 分频得到 &lt;strong&gt;CORE_CLK&lt;/strong&gt;,&lt;strong&gt;SYSCLK&lt;/strong&gt; ；使用 &lt;strong&gt;DIVBUS&lt;/strong&gt; 分频得到 &lt;strong&gt;BUS_CLK&lt;/strong&gt; ，使用 &lt;strong&gt;DIVSLOW&lt;/strong&gt; 分频得到 &lt;strong&gt;FLASH_CLK&lt;/strong&gt; 和 &lt;strong&gt;SCG_SLOW_CLK&lt;/strong&gt; 在这个地方，分频器的倍率选择是有要求的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiahualiu.github.io/img/2017-9-29-S32K144_2/DIV_Requirement.png&#34; alt=&#34;DIV_Requirement.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;主要是由于结构限制导致的。注意在设置分频器的时候，请在时钟源开启前进行，否则无法改变，分频器在时钟开启后才会被改变其值。&lt;/p&gt;
&lt;p&gt;Manual上关于该芯片的时钟模块描述：&lt;/p&gt;
&lt;h3 id=&#34;1--system-clock-generator-scg&#34;&gt;1. 系统时钟发生器 System clock generator (SCG)&lt;/h3&gt;
&lt;p&gt;系统时钟发生器（下称 SCG ）给单片机提供了不同的时钟源，包含三个时钟分支：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SPLL(System Phase-locked Loop)&lt;/strong&gt; 系统锁相环，一个压控震荡器。在其他地方也被称作 &lt;strong&gt;PLL&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;电压控制振荡器 VCO(Voltage-controlled oscillator)&lt;/li&gt;
&lt;li&gt;外部参考时钟是锁相环的时钟源&lt;/li&gt;
&lt;li&gt;模数 VCO 分频器&lt;/li&gt;
&lt;li&gt;相位/频率探测器&lt;/li&gt;
&lt;li&gt;可以被选做单片机的系统时钟源&lt;/li&gt;
&lt;li&gt;双路可编程控制的时钟输出，可以提供给片内外围器件时钟源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FIRC/SIRC(Fast/Slow Internal Reference Clock)&lt;/strong&gt; 两个内部参考时钟 IRC 发生器：
&lt;ul&gt;
&lt;li&gt;快速内部参考时钟 FIRC 可以程序控制高/低频率范围, 高为 48Mhz。&lt;/li&gt;
&lt;li&gt;快速内部参考时钟 FIRC 和慢速内部参考时钟 SIRC 都可以被选做单片机的系统时钟源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SOSC(System Crystal Oscillator)&lt;/strong&gt; 系统晶振振荡器，在其他地方也被称作 &lt;strong&gt;OSC&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;被当做系统 PLL 的时钟源&lt;/li&gt;
&lt;li&gt;可以被当做单片机的时钟源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;heading-2&#34;&gt;注意：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;SPLL，SOSC 时钟可以被时钟监测器检测，提供重启和中断请求。&lt;/li&gt;
&lt;li&gt;SPLL 可以被锁定监测器检测，提供中断请求。&lt;/li&gt;
&lt;li&gt;每一个时钟源都有一个参考分频器，给片内模块和外围器件提供分频功能，故时钟名中都有 DIV ，譬如：
&lt;ul&gt;
&lt;li&gt;SPLLDIV1_CLK / SPLLDIV2_CLK&lt;/li&gt;
&lt;li&gt;FIRCDIV1_CLK / SCG_FIRCDIV2_CLK&lt;/li&gt;
&lt;li&gt;SIRCDIV1_CLK / SIRCDIV2_CLK&lt;/li&gt;
&lt;li&gt;SOSCDIV1_CLK / SOSCDIV2_CLK&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2--low-power-oscillator-lpo&#34;&gt;2. 低功率振荡器 Low Power Oscillator (LPO)&lt;/h3&gt;
&lt;p&gt;一个内部的低功率时钟，可以给工作在低功率模式下的器件提供时钟源。&lt;/p&gt;
&lt;h3 id=&#34;3--peripheral-clock-control-pcc&#34;&gt;3. 外围时钟控制器 Peripheral Clock Control (PCC)&lt;/h3&gt;
&lt;p&gt;在上一节详细介绍过这个控制器，用于控制大多数器件的时钟选择。&lt;/p&gt;
&lt;h1 id=&#34;heading-3&#34;&gt;代码&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; hello_clocks.c              Copyright NXP &lt;span style=&#34;color:#ae81ff&#34;&gt;2016&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Description: Example clock and LPIT channel initializations
 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2016&lt;/span&gt; Mar &lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt; S Mihalik &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Initial version
 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2016&lt;/span&gt; Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; SM &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Updated &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; new header files in S32DS v &lt;span style=&#34;color:#ae81ff&#34;&gt;1.3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;S32K144.h&amp;#34;            /* include peripheral declarations S32K144 */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;clocks_and_modes.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; lpit0_ch0_flag_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* LPIT0 timeout counter */&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PORT_init&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
  PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; PCCn[PCC_PORTD_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_CGC_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clock for PORT D */&lt;/span&gt;
  PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PDDR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;            &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D0:  Data Direction= output */&lt;/span&gt;
  PORTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCR[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000100&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D0:  MUX = ALT1, GPIO (to blue LED on EVB) */&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LPIT0_init&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
  PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCCn[PCC_LPIT_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_PCS(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;);    &lt;span style=&#34;color:#75715e&#34;&gt;/* Clock Src = 6 (SPLL2_DIV2_CLK)*/&lt;/span&gt;
  PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCCn[PCC_LPIT_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_CGC_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clk to LPIT0 regs */&lt;/span&gt;
  LPIT0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;MCR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000001&lt;/span&gt;;    &lt;span style=&#34;color:#75715e&#34;&gt;/* DBG_EN-0: Timer chans stop in Debug mode */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* DOZE_EN=0: Timer chans are stopped in DOZE mode */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* SW_RST=0: SW reset does not reset timer chans, regs */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* M_CEN=1: enable module clk (allows writing other LPIT0 regs) */&lt;/span&gt;
  LPIT0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TMR[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].TVAL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40000000&lt;/span&gt;;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Chan 0 Timeout period: 40M clocks */&lt;/span&gt;
  LPIT0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TMR[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].TCTRL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000001&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* T_EN=1: Timer channel is enabled */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* CHAIN=0: channel chaining is disabled */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* MODE=0: 32 periodic counter mode */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* TSOT=0: Timer decrements immediately based on restart */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* TSOI=0: Timer does not stop after timeout */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* TROT=0 Timer will not reload on trigger */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* TRG_SRC=0: External trigger soruce */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* TRG_SEL=0: Timer chan 0 trigger source is selected*/&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SOSC_init_8MHz&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
  SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SOSCDIV&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000101&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCDIV1 &amp;amp; SOSCDIV2 =1: divide by 1 */&lt;/span&gt;
  SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SOSCCFG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000024&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Range=2: Medium freq (SOSC betw 1MHz-8MHz)*/&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;/* HGO=0:   Config xtal osc for low power */&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;/* EREFS=1: Input is external XTAL */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SOSCCSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_SOSCCSR_LK_MASK); &lt;span style=&#34;color:#75715e&#34;&gt;/* Ensure SOSCCSR unlocked */&lt;/span&gt;
  SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SOSCCSR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000001&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/* LK=0:          SOSCCSR can be written */&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCCMRE=0:    OSC CLK monitor IRQ if enabled */&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCCM=0:      OSC CLK monitor disabled */&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCERCLKEN=0: Sys OSC 3V ERCLK output clk disabled */&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCLPEN=0:    Sys OSC disabled in VLP modes */&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCSTEN=0:    Sys OSC disabled in Stop modes */&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;/* SOSCEN=1:      Enable oscillator */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SOSCCSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_SOSCCSR_SOSCVLD_MASK)); &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for sys OSC clk valid */&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SPLL_init_160MHz&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_SPLLCSR_LK_MASK); &lt;span style=&#34;color:#75715e&#34;&gt;/* Ensure SPLLCSR unlocked */&lt;/span&gt;
  SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCSR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLEN=0: SPLL is disabled (default) */&lt;/span&gt;
  SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLDIV &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000302&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLDIV1 divide by 2; SPLLDIV2 divide by 4 */&lt;/span&gt;
  SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCFG &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00180000&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/* PREDIV=0: Divide SOSC_CLK by 0+1=1 */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* MULT=24:  Multiply sys pll by 4+24=40 */&lt;/span&gt;
                              &lt;span style=&#34;color:#75715e&#34;&gt;/* SPLL_CLK = 8MHz / 1 * 40 / 2 = 160 MHz */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_SPLLCSR_LK_MASK); &lt;span style=&#34;color:#75715e&#34;&gt;/* Ensure SPLLCSR unlocked */&lt;/span&gt;
  SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCSR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000001&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* LK=0:        SPLLCSR can be written */&lt;/span&gt;
                             &lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLCMRE=0:  SPLL CLK monitor IRQ if enabled */&lt;/span&gt;
                             &lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLCM=0:    SPLL CLK monitor disabled */&lt;/span&gt;
                             &lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLSTEN=0:  SPLL disabled in Stop modes */&lt;/span&gt;
                             &lt;span style=&#34;color:#75715e&#34;&gt;/* SPLLEN=1:    Enable SPLL */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;SPLLCSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_SPLLCSR_SPLLVLD_MASK)); &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for SPLL valid */&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NormalRUNmode_80MHz&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {  &lt;span style=&#34;color:#75715e&#34;&gt;/* Change to normal RUN mode with 8MHz SOSC, 80 MHz PLL*/&lt;/span&gt;
  SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;RCCR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SCG_RCCR_SCS(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)      &lt;span style=&#34;color:#75715e&#34;&gt;/* PLL as clock source*/&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;SCG_RCCR_DIVCORE(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;b01)      &lt;span style=&#34;color:#75715e&#34;&gt;/* DIVCORE=1, div. by 2: Core clock = 160/2 MHz = 80 MHz*/&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;SCG_RCCR_DIVBUS(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;b01)       &lt;span style=&#34;color:#75715e&#34;&gt;/* DIVBUS=1, div. by 2: bus clock = 40 MHz*/&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;SCG_RCCR_DIVSLOW(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;b10);     &lt;span style=&#34;color:#75715e&#34;&gt;/* DIVSLOW=2, div. by 2: SCG slow, flash clock= 26 2/3 MHz*/&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (((SCG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SCG_CSR_SCS_MASK) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; SCG_CSR_SCS_SHIFT ) &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) {}
                                 &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for sys clk src = SPLL */&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WDOG_disable&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;){
    WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CNT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xD928C520&lt;/span&gt;;   &lt;span style=&#34;color:#75715e&#34;&gt;/*Unlock watchdog*/&lt;/span&gt;
    WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TOVAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000FFFF&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/*Maximum timeout value*/&lt;/span&gt;
    WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002100&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/*Disable watchdog*/&lt;/span&gt;
}


&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
  WDOG_disable();
  PORT_init();            &lt;span style=&#34;color:#75715e&#34;&gt;/* Configure ports */&lt;/span&gt;
  SOSC_init_8MHz();       &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize system oscilator for 8 MHz xtal */&lt;/span&gt;
  SPLL_init_160MHz();     &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize SPLL to 160 MHz with 8 MHz SOSC */&lt;/span&gt;
  NormalRUNmode_80MHz();  &lt;span style=&#34;color:#75715e&#34;&gt;/* Init clocks: 80 MHz sysclk &amp;amp; core, 40 MHz bus, 20 MHz flash */&lt;/span&gt;
  LPIT0_init();           &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize PIT0 for 1 second timeout  */&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (;;) {                     &lt;span style=&#34;color:#75715e&#34;&gt;/* Toggle output to LED every LPIT0 timeout */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (LPIT0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;MSR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; LPIT_MSR_TIF0_MASK)) {} &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait for LPIT0 CH0 Flag */&lt;/span&gt;
    lpit0_ch0_flag_counter&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;;         &lt;span style=&#34;color:#75715e&#34;&gt;/* Increment LPIT0 timeout counter */&lt;/span&gt;
    PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PTOR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;                &lt;span style=&#34;color:#75715e&#34;&gt;/* Toggle output on port D0 (blue LED) */&lt;/span&gt;
    LPIT0&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;MSR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LPIT_MSR_TIF0_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Clear LPIT0 timer flag 0 */&lt;/span&gt;
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading-4&#34;&gt;代码详解&lt;/h1&gt;
&lt;p&gt;老样子，还是从 &lt;code&gt;main()&lt;/code&gt; 内开始：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;PORT_init();    &lt;span style=&#34;color:#75715e&#34;&gt;/* Configure ports */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这一行用于初始化端口，函数内部打开 CGC，配置 GPIO ,设置 PCR MUX 和被动滤波。由于第一节已经有了详细介绍，在这里不做过多描述。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;SOSC_init_8MHz();   &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize system oscilator for 8 MHz xtal */&lt;/span&gt;
SPLL_init_160MHz(); &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize SPLL to 160 MHz with 8 MHz SOSC */&lt;/span&gt;
NormalRUNmode_80MHz();  &lt;span style=&#34;color:#75715e&#34;&gt;/* Init clocks: 80 MHz sysclk &amp;amp; core, 40 MHz bus, 20 MHz flash */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这三个放在一起，因为他们都用到了一个指针来进行修改，这个指针就是 &lt;code&gt;SCG&lt;/code&gt; , 在头文件中 &lt;code&gt;SCG&lt;/code&gt; 有以下的含义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** SCG - Register Layout Typedef */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
  __I  uint32_t VERID;                             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Version ID Register, offset: 0x0 */&lt;/span&gt;
  __I  uint32_t PARAM;                             &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Parameter Register, offset: 0x4 */&lt;/span&gt;
       uint8_t RESERVED_0[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];
  __I  uint32_t CSR;                               &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Clock Status Register, offset: 0x10 */&lt;/span&gt;
  __IO uint32_t RCCR;                              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Run Clock Control Register, offset: 0x14 */&lt;/span&gt;
  __IO uint32_t VCCR;                              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; VLPR Clock Control Register, offset: 0x18 */&lt;/span&gt;
  __IO uint32_t HCCR;                              &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; HSRUN Clock Control Register, offset: 0x1C */&lt;/span&gt;
  __IO uint32_t CLKOUTCNFG;                        &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; SCG CLKOUT Configuration Register, offset: 0x20 */&lt;/span&gt;
       uint8_t RESERVED_1[&lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt;];
  __IO uint32_t SOSCCSR;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; System OSC Control Status Register, offset: 0x100 */&lt;/span&gt;
  __IO uint32_t SOSCDIV;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; System OSC Divide Register, offset: 0x104 */&lt;/span&gt;
  __IO uint32_t SOSCCFG;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; System Oscillator Configuration Register, offset: 0x108 */&lt;/span&gt;
       uint8_t RESERVED_2[&lt;span style=&#34;color:#ae81ff&#34;&gt;244&lt;/span&gt;];
  __IO uint32_t SIRCCSR;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Slow IRC Control Status Register, offset: 0x200 */&lt;/span&gt;
  __IO uint32_t SIRCDIV;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Slow IRC Divide Register, offset: 0x204 */&lt;/span&gt;
  __IO uint32_t SIRCCFG;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Slow IRC Configuration Register, offset: 0x208 */&lt;/span&gt;
       uint8_t RESERVED_3[&lt;span style=&#34;color:#ae81ff&#34;&gt;244&lt;/span&gt;];
  __IO uint32_t FIRCCSR;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Fast IRC Control Status Register, offset: 0x300 */&lt;/span&gt;
  __IO uint32_t FIRCDIV;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Fast IRC Divide Register, offset: 0x304 */&lt;/span&gt;
  __IO uint32_t FIRCCFG;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Fast IRC Configuration Register, offset: 0x308 */&lt;/span&gt;
       uint8_t RESERVED_4[&lt;span style=&#34;color:#ae81ff&#34;&gt;756&lt;/span&gt;];
  __IO uint32_t SPLLCSR;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; System PLL Control Status Register, offset: 0x600 */&lt;/span&gt;
  __IO uint32_t SPLLDIV;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; System PLL Divide Register, offset: 0x604 */&lt;/span&gt;
  __IO uint32_t SPLLCFG;                           &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; System PLL Configuration Register, offset: 0x608 */&lt;/span&gt;
} SCG_Type, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SCG_MemMapPtr;

&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral SCG base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define SCG_BASE    (0x40064000u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral SCG base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define SCG    ((SCG_Type *)SCG_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是一个相当庞大的结构，翻阅 Manual 瞅一瞅各个小寄存器吧。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Register name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Width&lt;!-- raw HTML omitted --&gt;(in bits)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Access&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Version ID Register (SCG_VERID)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Parameter Register (SCG_PARAM)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Clock Status Register (SCG_CSR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Run Clock Control Register (SCG_RCCR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;VLPR Clock Control Register (SCG_VCCR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;HSRUN Clock Control Register (SCG_HCCR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SCG CLKOUT Configuration Register (SCG_CLKOUTCNFG)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;System OSC Control Status Register (SCG_SOSCCSR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;System OSC Divide Register (SCG_SOSCDIV)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;System Oscillator Configuration Register (SCG_SOSCCFG)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Slow IRC Control Status Register (SCG_SIRCCSR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Slow IRC Divide Register (SCG_SIRCDIV)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Slow IRC Configuration Register (SCG_SIRCCFG)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Fast IRC Control Status Register (SCG_FIRCCSR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Fast IRC Divide Register (SCG_FIRCDIV)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Fast IRC Configuration Register (SCG_FIRCCFG)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;System PLL Control Status Register (SCG_SPLLCSR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;System PLL Divide Register (SCG_SPLLDIV)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;System PLL Configuration Register (SCG_SPLLCFG)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;version-id-register-scg-verid&#34;&gt;Version ID Register (SCG_VERID)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;VERSION&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SCG Version Number&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SCG 的版本号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;parameter-register-scg-param&#34;&gt;Parameter Register (SCG_PARAM)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;写入会导致错误。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;字面意思是参数寄存器，其中 32 位的定义如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;31-27&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DIVPRES&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;指示现在的 SCG 分频器使用状态&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;&lt;code&gt;DIVPRES[27]=1&lt;/code&gt; DIVSLOW 正在被使用&lt;!-- raw HTML omitted --&gt;&lt;code&gt;DIVPRES[28]=1&lt;/code&gt; DIVBUS 正在被使用&lt;!-- raw HTML omitted --&gt;&lt;code&gt;DIVPRES[31]=1&lt;/code&gt; DIVCORE 正在被使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7-0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CLKPRES&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;指示当前状态下哪个时钟正在被当做 SCG 时钟源&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;CLKPRES[0] Reserved&lt;!-- raw HTML omitted --&gt;CLKPRES&lt;a href=&#34;https://xiahualiu.github.io/img/2017-9-29-S32K144_2/hello_clock.png&#34;&gt;1&lt;/a&gt;=1 System OSC (SOSC) 正在被使用&lt;!-- raw HTML omitted --&gt;CLKPRES&lt;a href=&#34;https://xiahualiu.github.io/img/2017-9-29-S32K144_2/DIV_Requirement.png&#34;&gt;2&lt;/a&gt;=1 Slow IRC (SIRC) 正在被使用&lt;!-- raw HTML omitted --&gt;CLKPRES[3]=1 Fast IRC (FIRC) 正在被使用&lt;!-- raw HTML omitted --&gt;CLKPRES[6]=1 System PLL (SPLL) 正在被使用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;clock-status-register-scg-csr&#34;&gt;Clock Status Register (SCG_CSR)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;写入会导致错误。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个寄存器返回当前的系统时钟源和系统时钟分频器配置，镜像 SCG_RCCR, SCG_VCCR, SCG_HCCR 三个时钟控制器其中之一的配置。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;27-24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SCS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;返回当前配置的系统时钟发生器来源&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;0001 System OSC (SOSC_CLK)&lt;!-- raw HTML omitted --&gt;0010 Slow IRC (SIRC_CLK)&lt;!-- raw HTML omitted --&gt;0011 Fast IRC (FIRC_CLK)&lt;!-- raw HTML omitted --&gt;0110 System PLL (SPLL_CLK)&lt;!-- raw HTML omitted --&gt;其余的值无效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;19-16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DIVCORE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;指示现在的核心时钟分频比率&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;* 若 SPLL 被选做时钟源，则最大比率是 4&lt;!-- raw HTML omitted --&gt; 分频比率 = &lt;code&gt;DIVCORE+1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7-4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DIVBUS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;返回现在的总线（BUS）时钟分频比率&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;分频比率 = &lt;code&gt;DIVBUS+1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3-0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DIVSLOW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;返回现在的慢速时钟分频比率&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;分频比率 = &lt;code&gt;DIVSLOW+1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;run-clock-control-register-scg-rccr&#34;&gt;Run Clock Control Register (SCG_RCCR)&lt;/h3&gt;
&lt;p&gt;这个寄存器给核心，平台，外围，总线控制系统时钟源和系统时钟分频器，只在 Run 模式下起作用，这个寄存器写入的时候只能一次写入 32 位。在 Run 模式下选择一个不同的时钟源需要时钟源在系统时钟调整到时钟源前就要开启并且保证有效。如果系统时钟分频器比率改变的同时选择了一个不同的时钟模式，则新的分频器比率只有在新的时钟源有效后才会发生改变。&lt;/p&gt;
&lt;p&gt;寄存器见 &lt;code&gt;SCG_CSR&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;vlpr-clock-control-register-scg-vccr&#34;&gt;VLPR Clock Control Register (SCG_VCCR)&lt;/h3&gt;
&lt;p&gt;SCG_VCCR 控制的是 VLPR 模式下的，而不是 Run 模式下的，其他的寄存器地图什么的和 SCG_RCCR 一样。写入的时候只能一次写入 32 位。&lt;/p&gt;
&lt;p&gt;寄存器见 &lt;code&gt;SCG_CSR&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;hsrun-clock-control-register-scg-hccr&#34;&gt;HSRUN Clock Control Register (SCG_HCCR)&lt;/h3&gt;
&lt;p&gt;在 HSRUN 模式下的时钟控制寄存器，同上。&lt;/p&gt;
&lt;p&gt;寄存器见 &lt;code&gt;SCG_CSR&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;scg-clkout-configuration-register-scg-clkoutcnfg&#34;&gt;SCG CLKOUT Configuration Register (SCG_CLKOUTCNFG)&lt;/h3&gt;
&lt;p&gt;这个寄存器控制哪一个 SCG 时钟源被输出到 &lt;strong&gt;CLKOUT&lt;/strong&gt; 管脚。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;27-24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SCS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;选择 SCG 系统时钟作为 CLKOUT&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;0001 System OSC (SOSC_CLK)&lt;!-- raw HTML omitted --&gt;0010 Slow IRC (SIRC_CLK)&lt;!-- raw HTML omitted --&gt;0011 Fast IRC (FIRC_CLK)&lt;!-- raw HTML omitted --&gt;0110 System PLL (SPLL_CLK)&lt;!-- raw HTML omitted --&gt;其余的值无效&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;system-osc-control-status-register-scg-sosccsr&#34;&gt;System OSC Control Status Register (SCG_SOSCCSR)&lt;/h3&gt;
&lt;p&gt;这个寄存器控制 SCG 模块中的 SOSC 工作状态。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOSCERR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Clock Error&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;此位只能被单片机的上电复位重置，但是软件也可以通过向此位写入 1 清零&lt;!-- raw HTML omitted --&gt;0 SOSC 检测器被关闭或者没有检测到错误&lt;!-- raw HTML omitted --&gt;1 SOSC  检测器被开启并且检测到一个错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;25&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOSCSEL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Selected 此位不可写入&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;0 SOSC 不是系统时钟源&lt;!-- raw HTML omitted --&gt;1 SOSC 是系统时钟源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOSCVLD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Valid 此位不可写入&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;0 SOSC 无效或者没有启用&lt;!-- raw HTML omitted --&gt;1 SOSC 有效并且输出有效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;LK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Lock Register&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;此位可以在任何时候清零或者置 1 &lt;!-- raw HTML omitted --&gt;0 CSR 寄存器可以写入&lt;!-- raw HTML omitted --&gt;1 CSR 寄存器不可以写入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOSCCMRE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Clock Monitor Reset Enable&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;SOSC 监测器中断/重置开关&lt;!-- raw HTML omitted --&gt;0 当错误被检测，监测器产生中断&lt;!-- raw HTML omitted --&gt;1 当错误被检测，监测器产生重启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOSCCM&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Clock Monitor&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;SOSC 监测器开关&lt;!-- raw HTML omitted --&gt;0 SOSC 监测器关&lt;!-- raw HTML omitted --&gt;1 SOSC 监测器开&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOSCEN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Enable&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;SOSC 使能&lt;!-- raw HTML omitted --&gt;0 SOSC 关&lt;!-- raw HTML omitted --&gt;1 SOSC 开&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;system-osc-divide-register-scg-soscdiv&#34;&gt;System OSC Divide Register (SCG_SOSCDIV)&lt;/h3&gt;
&lt;p&gt;这个寄存器控制两个时钟输出，既可以用作外围器件的功能时钟，也可以作为时钟模块使用，每一路输出都有分频器提供分频，应该在 SOSC 被关闭的情况下更改该寄存器的值以避免输出的值出现错误。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;10-8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOSCDIV2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Clock Divide 2&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;设置 SOSC 第二路输出的分频比率&lt;!-- raw HTML omitted --&gt;分频比率 = &lt;code&gt;2^(SOSCDIV2-1)&lt;/code&gt; &lt;!-- raw HTML omitted --&gt; 0 时关闭时钟输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2-1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SOSCDIV1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Clock Divide 1&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;设置 SOSC 第一路输出的分频比率&lt;!-- raw HTML omitted --&gt;分频比率 = &lt;code&gt;2^(SOSCDIV1-1)&lt;/code&gt; &lt;!-- raw HTML omitted --&gt; 0 时关闭时钟输出&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;system-oscillator-configuration-register-scg-sosccfg&#34;&gt;System Oscillator Configuration Register (SCG_SOSCCFG)&lt;/h3&gt;
&lt;p&gt;此寄存器控制振荡器的工作状态，在 SOSC 运行的时候无法被写入，强行写入会被忽略并不会报赋值错误。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;5-4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RANGE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;System OSC Range Select&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;选择 SOSC 外接晶振的频率范围&lt;!-- raw HTML omitted --&gt;10 中频 (4 MHz to 8MHz)&lt;!-- raw HTML omitted --&gt;11 高频 (8 MHz to 40 MHz)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;HGO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;High Gain Oscillator Select&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;高增益振荡器选择&lt;!-- raw HTML omitted --&gt;0 低增益运行振荡器&lt;!-- raw HTML omitted --&gt;1 高增益运行振荡器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;EREFS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;External Reference Select&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;外部参考时钟选择&lt;!-- raw HTML omitted --&gt;0 外部参考时钟&lt;!-- raw HTML omitted --&gt;1 SOSC 内部晶体振荡器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;slow-irc-control-status-register-scg-sirccsr&#34;&gt;Slow IRC Control Status Register (SCG_SIRCCSR)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;25&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SIRCSEL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Slow IRC Selected&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;选择 SIRC 是否作为系统时钟源&lt;!-- raw HTML omitted --&gt;0 Slow IRC 是系统时钟源&lt;!-- raw HTML omitted --&gt;1 Slow IRC 不是系统时钟源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SIRCVLD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Slow IRC Valid&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Slow IRC 有效位&lt;!-- raw HTML omitted --&gt;0 Slow IRC 无效或者没有启动&lt;!-- raw HTML omitted --&gt;1 Slow IRC 启动并且有效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SIRCLPEN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Slow IRC Low Power Enable&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Slow IRC 低功率模式开关&lt;!-- raw HTML omitted --&gt;0 Slow IRC 在 VLP 模式不启动下&lt;!-- raw HTML omitted --&gt;1 Slow IRC 在 VLP 模式下启动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SIRCSTEN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Slow IRC Stop Enable&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Slow IRC 停止模式开关&lt;!-- raw HTML omitted --&gt;0 Slow IRC 在 Stop modes 下不工作&lt;!-- raw HTML omitted --&gt;1 Slow IRC 在 Stop modes 下工作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SIRCEN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Slow IRC Enable&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Slow IRC 使能&lt;!-- raw HTML omitted --&gt;0 Slow IRC 关闭&lt;!-- raw HTML omitted --&gt;1 Slow IRC 开启&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;slow-irc-divide-register-scg-sircdiv&#34;&gt;Slow IRC Divide Register (SCG_SIRCDIV)&lt;/h3&gt;
&lt;p&gt;该寄存器控制 SIRC 的分频器工作状态，请确保该寄存器在改变前，SIRC 是关闭着的，以防止出现错误。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;10-8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SIRCDIV2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Slow IRC Clock Divide 2&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;提供给需要异步时钟的模块的分频器 2&lt;!-- raw HTML omitted --&gt;分频比率 = &lt;code&gt;2^(SIRCDIV2-1)&lt;/code&gt; &lt;!-- raw HTML omitted --&gt; 0 时关闭时钟输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2-0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SIRCDIV1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Slow IRC Clock Divide 1&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;提供给需要异步时钟的模块的分频器 1&lt;!-- raw HTML omitted --&gt;分频比率 = &lt;code&gt;2^(SIRCDIV1-1)&lt;/code&gt; &lt;!-- raw HTML omitted --&gt; 0 时关闭时钟输出&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;slow-irc-configuration-register-scg-sirccfg&#34;&gt;Slow IRC Configuration Register (SCG_SIRCCFG)&lt;/h3&gt;
&lt;p&gt;此寄存器控制振荡器的工作状态，在 SIRC 运行的时候无法被写入，强行写入会被忽略并不会报赋值错误。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RANGE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Frequency Range&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;频率范围&lt;!-- raw HTML omitted --&gt;0 Slow IRC low range clock (2 MHz)&lt;!-- raw HTML omitted --&gt;1 Slow IRC high range clock (8 MHz)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;剩余的 FIRC 跟这个差不多，但是有一部分细微的变化，到用的时候请查询对应的用户手册。&lt;/p&gt;</description>
    </item>
    <item>
      <title>S32K144EVB的学习历程（一）</title>
      <link>https://xiahualiu.github.io/posts/2017-09-28-s32k144_1/</link>
      <pubDate>Thu, 28 Sep 2017 09:30:30 +0000</pubDate>
      <guid>https://xiahualiu.github.io/posts/2017-09-28-s32k144_1/</guid>
      <description>&lt;h1 id=&#34;heading&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;本文主要介绍了本人在学习使用 &lt;a href=&#34;https://www.nxp.com/cn/products/microcontrollers-and-processors/arm-processors/s32-arm-processors-microcontrollers/32-bit-automotive-general-purpose-microcontrollers:S32K#overviewExpand?cid=ps_cn_baidu_cpc_B_AUTO_S32K_Phrase_bd20170620002&#34;&gt;S32K144EVB&lt;/a&gt;中遇到的问题和解决办法，由于本芯片是 &lt;a href=&#34;https://www.nxp.com/&#34;&gt;NXP&lt;/a&gt;(原 freescale) 生产的基于 ARM M4F 内核的32位芯片，主要适用对象是汽车 。目前在网络上该芯片还没有相关的中文学习资料，到笔者写本文目前，网络上能够找到的资料只有开发板的电路图和 Reference Manual 和该芯片配套的 IDE 内置头文件以及给出的 cookbook 例程，笔者也是在一步步摸索学习，故本文为一个记录性质的文章。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;本文阅读需要 C 语言基础和一些简单的单片机知识，笔者在之前曾经开发过51单片机和 freescale 公司的 HC08GP32 单片机，故可能会跳过一些基础说明。&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;由于该芯片的 Manual 文件长达 1929 页，全读完肯定要浪费很多时间，为了节约时间，我就针对例程中给出的部分内容查询手册相关内容，进行分析。&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;本文针对 S32K144EVB-Q100X 开发板，但基本原理都是相同的。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;hello-world&#34;&gt;Hello World&lt;/h1&gt;
&lt;h2 id=&#34;1-&#34;&gt;1. 本例程主要包含以下部分的操作：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;配置 GPIO&lt;/li&gt;
&lt;li&gt;根据按键状态输出 LED 灯信号&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-&#34;&gt;2. 使用到的电路图：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://xiahualiu.github.io/img/2017-09-28-S32K144_1/helloworld1.png&#34; alt=&#34;Hello World block diagram&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-&#34;&gt;3. 第一个例程的代码如下：&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;S32K144.h&amp;#34; /* include peripheral declarations S32K144 */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTD0 0 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Port PTD0, bit 0: FRDM EVB output to blue LED */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTC12 12 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Port PTC12, bit 12: FRDM EVB input from BTN0 [SW2] */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WDOG_disable&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;){
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CNT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xD928C520&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/*Unlock watchdog*/&lt;/span&gt;
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;TOVAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000FFFF&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/*Maximum timeout value*/&lt;/span&gt;
WDOG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;CS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002100&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/*Disable watchdog*/&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
WDOG_disable();
&lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clocks to peripherals (PORT modules) */&lt;/span&gt;
PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; PCCn[PCC_PORTC_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_CGC_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clock to PORT C */&lt;/span&gt;
PCC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; PCCn[PCC_PORTD_INDEX] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PCC_PCCn_CGC_MASK; &lt;span style=&#34;color:#75715e&#34;&gt;/* Enable clock to PORT D */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* Configure port C12 as GPIO input (BTN 0 [SW2] on EVB) */&lt;/span&gt;
PTC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PDDR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTC12); &lt;span style=&#34;color:#75715e&#34;&gt;/* Port C12: Data Direction= input (default) */&lt;/span&gt;
PORTC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCR[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000110&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port C12: MUX = GPIO, input filter enabled */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* Configure port D0 as GPIO output (LED on EVB) */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PDDR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD0; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D0: Data Direction= output */&lt;/span&gt;
PORTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PCR[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000100&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* Port D0: MUX = GPIO */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(;;) {
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (PTC&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;PDIR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTC12)) { &lt;span style=&#34;color:#75715e&#34;&gt;/* If Pad Data Input = 1 (BTN0 [SW2] pushed) */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; PCOR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD0; &lt;span style=&#34;color:#75715e&#34;&gt;/* Clear Output on port D0 (LED on) */&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;/* If BTN0 was not pushed */&lt;/span&gt;
PTD&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; PSOR &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PTD0; &lt;span style=&#34;color:#75715e&#34;&gt;/* Set Output on port D0 (LED off) */&lt;/span&gt;
}
counter&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-&#34;&gt;4. 代码详解&lt;/h2&gt;
&lt;p&gt;主要关注 main() 内部&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PCC-&amp;gt; PCCn[PCC_PORTC_INDEX] = PCC_PCCn_CGC_MASK; /* Enable clock to PORT C */
PCC-&amp;gt; PCCn[PCC_PORTD_INDEX] = PCC_PCCn_CGC_MASK; /* Enable clock to PORT D */
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这两句话使用的 &lt;code&gt;PCC&lt;/code&gt; 等变量名都是在头文件 &lt;code&gt;&amp;quot;S32K144.h&amp;quot;&lt;/code&gt; 中定义的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** PCC - Size of Registers Arrays */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PCCn_COUNT 116u&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/** PCC - Register Layout Typedef */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
  __IO uint32_t PCCn[PCC_PCCn_COUNT];   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; PCC Reserved Register 0..PCC CMP0 Register, array offset: 0x0, array step: 0x4 */&lt;/span&gt;
} PCC_Type, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PCC_MemMapPtr;

&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PCC base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_BASE (0x40065000u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PCC base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC ((PCC_Type *)PCC_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;PCC&lt;/code&gt; 是一个指向固定地址的 &lt;code&gt;PCC_Type&lt;/code&gt;结构体指针，他的固定地址是 &lt;code&gt;(0x40065000u)&lt;/code&gt; 它对应的 &lt;code&gt;PCC_Type&lt;/code&gt; 结构拥有一个116个无符号整型变量的数组 &lt;code&gt;PCCn&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;根据注释内容判断，这个指针的主要作用是用来改变 PCC (Peripheral Clock Controller)控制器内部寄存器的值（下称 PCC ），PCC 控制有关外部时钟频率相关的设置。&lt;br&gt;
查询了 Reference Manual 后得知，PCC 有三个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;时钟界面开闭控制 CGC (Clock Gating Controller)&lt;/li&gt;
&lt;li&gt;*功能性时钟源选择控制（如果对应模块有时钟源）&lt;/li&gt;
&lt;li&gt;*功能性时钟分频值控制（如果对应模块有分频器）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这个地方，我们仅仅用到第一个功能，也就是时钟界面开关功能。在本文文末，我将给出 PCC 的内存地图。
PCC 模块给芯片上面每一个外围模块都设置了独自的 PCC 内部寄存器地址，用于控制以上的三个功能，PCC 内的每一个寄存器都有一个时钟界面开闭位 (CGC)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在每一个模块使用前，必须打开该模块的CGC (CGC = 1)，才能使用该模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如何打开？首先是寻址，在头文件 &lt;code&gt;&amp;quot;S32K144.h&amp;quot;&lt;/code&gt; 中已经将 PCC 控制器的各个寄存器地址全部用宏定义了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* PCC index offsets */&lt;/span&gt;
...
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PORTA_INDEX 73&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PORTB_INDEX 74&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PORTC_INDEX 75&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PORTD_INDEX 76&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PORTE_INDEX 77&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 GPIO A/B/C/D/E 对应的地址。将其赋值为 &lt;code&gt;PCC_PCCn_CGC_MASK&lt;/code&gt; 即可打开 CGC。&lt;code&gt;PCC_PCCn_CGC_MASK&lt;/code&gt; 在头文件中定义为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PCC_PCCn_CGC_MASK 0x40000000u&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后面的 GPIO 端口方向控制类似 PCC 的控制，在这里使用了一个 PTC 和 PTD 指针，指向两个固定地址的结构体 &lt;code&gt;GPIO_Type&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** GPIO - Register Layout Typedef */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
  __IO uint32_t PDOR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Data Output Register, offset: 0x0 */&lt;/span&gt;
  __O  uint32_t PSOR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Set Output Register, offset: 0x4 */&lt;/span&gt;
  __O  uint32_t PCOR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Clear Output Register, offset: 0x8 */&lt;/span&gt;
  __O  uint32_t PTOR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Toggle Output Register, offset: 0xC */&lt;/span&gt;
  __I  uint32_t PDIR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Data Input Register, offset: 0x10 */&lt;/span&gt;
  __IO uint32_t PDDR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Data Direction Register, offset: 0x14 */&lt;/span&gt;
  __IO uint32_t PIDR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Port Input Disable Register, offset: 0x18 */&lt;/span&gt;
} GPIO_Type, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GPIO_MemMapPtr;

&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PTC base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTC_BASE (0x400FF080u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PTC base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTC ((GPIO_Type *)PTC_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PTD base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTD_BASE (0x400FF0C0u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PTD base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PTD ((GPIO_Type *)PTD_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gpio-&#34;&gt;GPIO 的控制器：&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Width&lt;!-- raw HTML omitted --&gt;(in bits)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Access&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Data Output Register (PDOR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Set Output Register (PSOR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Clear Output Register (PCOR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Toggle Output Register (PTOR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Data Input Register (PDIR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Data Direction Register (PDDR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Port Input Disable Register (PIDR)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RW&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-data-output-register-pdor&#34;&gt;Port Data Output Register (PDOR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PDO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Data Output&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;输出管脚的值，对应逻辑值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-set-output-register-psor&#34;&gt;Port Set Output Register (PSOR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PTSO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Set Output&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;将指定管脚的值置 1&lt;!-- raw HTML omitted --&gt;读取恒为零&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-clear-output-register-pcor&#34;&gt;Port Clear Output Register (PCOR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PTCO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Clear Output&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;将指定管脚的值置 0&lt;!-- raw HTML omitted --&gt;读取恒为零&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-toggle-output-register-ptor&#34;&gt;Port Toggle Output Register (PTOR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PTTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Toggle Output&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;将指定管脚的值反转&lt;!-- raw HTML omitted --&gt;读取恒为零&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-data-input-register-pdir&#34;&gt;Port Data Input Register (PDIR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PDI&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Data Input&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;读取指定管脚的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-data-direction-register-pddr&#34;&gt;Port Data Direction Register (PDDR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PDD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Data Direction&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;0 Input&lt;!-- raw HTML omitted --&gt;1 Output&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;port-input-disable-register-pidr&#34;&gt;Port Input Disable Register (PIDR)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PID&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Port Input Disable&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;0 管脚正常输入&lt;!-- raw HTML omitted --&gt;1 管脚不能输入&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-port-controller-register&#34;&gt;端口功能控制 PORT Controller Register&lt;/h3&gt;
&lt;p&gt;我做个比喻，在 ARM 中，各个管脚就像是一个个等待工作的银行柜台窗口，可以存钱，也可以取钱，也可以借贷款，也可以办理理财业务，银行不能一个业务开一个窗口，所以每个窗口必须可以做很多事情，ARM 也是这样，在有限的管脚上，需要进行中断，PWM，GPIO，UART串口，SPI，I2C，CAN 信息交流功能，所以&lt;strong&gt;有些&lt;/strong&gt;管脚有很多功能可以选择，我们要使用某个功能就要自己进行设置，设置的地方呢就在 &lt;strong&gt;PCR(Pin Controller Register)&lt;/strong&gt; 这个寄存器里面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** PORT - Register Layout Typedef */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
  __IO uint32_t PCR[PORT_PCR_COUNT];    &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Pin Control Register n, array offset: 0x0, array step: 0x4 */&lt;/span&gt;
  __O  uint32_t GPCLR;  &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Global Pin Control Low Register, offset: 0x80 */&lt;/span&gt;
  __O  uint32_t GPCHR;  &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Global Pin Control High Register, offset: 0x84 */&lt;/span&gt;
       uint8_t RESERVED_0[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
  __IO uint32_t ISFR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Interrupt Status Flag Register, offset: 0xA0 */&lt;/span&gt;
       uint8_t RESERVED_1[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;];
  __IO uint32_t DFER;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Digital Filter Enable Register, offset: 0xC0 */&lt;/span&gt;
  __IO uint32_t DFCR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Digital Filter Clock Register, offset: 0xC4 */&lt;/span&gt;
  __IO uint32_t DFWR;   &lt;span style=&#34;color:#75715e&#34;&gt;/**&amp;lt; Digital Filter Width Register, offset: 0xC8 */&lt;/span&gt;
} PORT_Type, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PORT_MemMapPtr;

&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PORTC base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PORTC_BASE (0x4004B000u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PORTC base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PORTC ((PORT_Type *)PORTC_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PORTD base address */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PORTD_BASE (0x4004C000u)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Peripheral PORTD base pointer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;define PORTD ((PORT_Type *)PORTD_BASE)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样每个 PCR 都有 32 位，与之前不同的是，这 32 位仅仅设置了一个管脚，而不是 32 个个，这 32 位的功能如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ISF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Interrupt Status Flag&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; 管脚未检测中断&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 管脚检测到中断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;19-16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;IRQC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Interrupt Configuration&lt;/strong&gt; 对应管脚的设置如下&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0000&lt;!-- raw HTML omitted --&gt; ISF 关闭&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0001&lt;!-- raw HTML omitted --&gt; ISF标志 和 DMA 请求，产生在上升沿&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0010&lt;!-- raw HTML omitted --&gt; ISF标志 和 DMA 请求，产生在下降沿&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0011&lt;!-- raw HTML omitted --&gt; ISF标志 和 DMA 请求，既在上升沿也在下降沿产生&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0100&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0101&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0110&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0111&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1000&lt;!-- raw HTML omitted --&gt; ISF 标志和中断，产生于逻辑 0&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1001&lt;!-- raw HTML omitted --&gt; ISF 标志和中断，产生于上升沿&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1010&lt;!-- raw HTML omitted --&gt; ISF 标志和中断，产生于下降沿&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1100&lt;!-- raw HTML omitted --&gt; ISF 标志和中断，产生于两个沿&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1100&lt;!-- raw HTML omitted --&gt; ISF 标志和中断，产生于逻辑 1&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1101&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1110&lt;!-- raw HTML omitted --&gt; 保留&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1111&lt;!-- raw HTML omitted --&gt; 保留&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;LK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Lock Register&lt;/strong&gt; &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; PCR 寄存器 0 到 15 位值不锁定&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; PCR 寄存器 0 - 15 位值锁定，直到下次重新启动才能够更改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;10-8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;MUX&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Pin Mux Control&lt;/strong&gt; 管脚复用控制&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;不是所有的管脚都支持管脚复用，若支持，则可以有以下的设置：&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;000&lt;!-- raw HTML omitted --&gt; 关闭管脚复用&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;001&lt;!-- raw HTML omitted --&gt; 功能 1 ，GPIO&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;010&lt;!-- raw HTML omitted --&gt; 功能 2 ，芯片特定功能&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;011&lt;!-- raw HTML omitted --&gt; 功能 3 ，芯片特定功能&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;100&lt;!-- raw HTML omitted --&gt; 功能 4 ，芯片特定功能&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;101&lt;!-- raw HTML omitted --&gt; 功能 5 ，芯片特定功能&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;110&lt;!-- raw HTML omitted --&gt; 功能 6 ，芯片特定功能&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;111&lt;!-- raw HTML omitted --&gt; 功能 7 ，芯片特定功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Drive Strength Enable&lt;/strong&gt; DSE 驱动力加强设置，此位在各种复用模式下都有效&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; 低驱动力模式，如果管脚处于输出模式&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 高驱动力模式，如果管脚处于输出模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PFE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Passive Filter Enable&lt;/strong&gt; 被动滤波功能，此位在各复用状态下都有效&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; 关闭被动滤波&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 开启被动滤波，工作在输入状态下，详情参考滤波说明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Pull Enable&lt;/strong&gt; PE 使能上下拉电阻&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; 无内部上下拉电阻&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 有上下拉电阻&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;PS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Pull Select&lt;/strong&gt; PE 选择上下拉电阻&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;0&lt;!-- raw HTML omitted --&gt; 有上拉电阻&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 有下拉电阻&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;如果要使用某个 GPIO 端口，需要的准备工作是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 PCC 指针打开对应的 PCCn[] 对应的CGC ，PCCn是 PCC 所指向的结构体内部的数组，固定地址，包含一共有116个 uint32 类型寄存器，将对应的寄存器赋值为 &lt;code&gt;PCC_PCCn_CGC_MASK&lt;/code&gt; 即可打开 CGC = 1 。&lt;/li&gt;
&lt;li&gt;设置 GPIO 的控制器中的 PDDR 寄存器，用于调整输入/输出方向。此寄存器在一个类型为 &lt;code&gt;GPIO_Type&lt;/code&gt; 的结构中，一共有 5 个固定地址的结构，使用 PTA/PTB/PTC/PTD/PTE 访问。&lt;/li&gt;
&lt;li&gt;设置 PORT.PCR 控制器，关闭中断，MUX 设置成为 &lt;strong&gt;001&lt;/strong&gt;，是否开启被动滤波。使用 PORTA/PORTB/PORTC/PORTD/PORTE 访问。&lt;/li&gt;
&lt;li&gt;读取对应的 PDIR （输入），或者给 PDOR 赋值 （输出）。使用 PTA/PTB/PTC/PTD/PTE 访问。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;pcc-&#34;&gt;附录：PCC 各个寄存器地图&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;偏移地址&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;寄存器名称&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;长度/位 (bit)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;权限&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;重启默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;80h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTFC Register (PCC_FTFC)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;84h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC DMAMUX Register (PCC_DMAMUX)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;90h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FlexCAN0 Register (PCC_FlexCAN0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;94h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FlexCAN1 Register (PCC_FlexCAN1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;98h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM3 Register (PCC_FTM3)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;9Ch&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC ADC1 Register (PCC_ADC1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ACh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FlexCAN2 Register (PCC_FlexCAN2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B0h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPSPI0 Register (PCC_LPSPI0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPSPI1 Register (PCC_LPSPI1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPSPI2 Register (PCC_LPSPI2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;C4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PDB1 Register (PCC_PDB1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;C8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC CRC Register (PCC_CRC)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PDB0 Register (PCC_PDB0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;DCh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPIT Register (PCC_LPIT)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;E0h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM0 Register (PCC_FTM0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;E4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM1 Register (PCC_FTM1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;E8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM2 Register (PCC_FTM2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ECh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC ADC0 Register (PCC_ADC0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;F4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC RTC Register (PCC_RTC)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;100h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPTMR0 Register (PCC_LPTMR0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;124h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PORTA Register (PCC_PORTA)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;128h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PORTB Register (PCC_PORTB)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;12Ch&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PORTC Register (PCC_PORTC)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;130h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PORTD Register (PCC_PORTD)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;134h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC PORTE Register (PCC_PORTE)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;150h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC SAI0 Register (PCC_SAI0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;154h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC SAI1 Register (PCC_SAI1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;168h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FlexIO Register (PCC_FlexIO)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;184h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC EWM Register (PCC_EWM)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;198h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPI2C0 Register (PCC_LPI2C0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;19Ch&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPI2C1 Register (PCC_LPI2C1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1A8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPUART0 Register (PCC_LPUART0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1ACh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPUART1 Register (PCC_LPUART1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1B0h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC LPUART2 Register (PCC_LPUART2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1B8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM4 Register (PCC_FTM4)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1BCh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM5 Register (PCC_FTM5)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1C0h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM6 Register (PCC_FTM6)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1C4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC FTM7 Register (PCC_FTM7)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1CCh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC CMP0 Register (PCC_CMP0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1D8h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC QSPI Register (PCC_QSPI)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1E4h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PCC ENET Register (PCC_ENET)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8000_0000h&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
  </channel>
</rss>
